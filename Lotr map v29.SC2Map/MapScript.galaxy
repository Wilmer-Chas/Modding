//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Middle Earth - War Of The Last Alliance
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
unit gv_ringBearer;
point gv_untitledVariable001;
int gv_playernumber;
bool[16] gv_recentlyDSD;
unitgroup gv_westGondorPlayer;
unitgroup gv_dwarvesPlayer;
unitgroup gv_eastgondorPlayer;
unitgroup gv_arnorPlayer;
unitgroup gv_elvesPlayer;
unitgroup gv_evilmenPlayer;
unitgroup gv_mordorPlayer;
unitgroup gv_mistyMountainsPlayer;
unitgroup gv_easterlingsPlayer;
text[16] gv_txtPArray;
int gv_itemWestGondor;
int gv_itemDwarves;
int gv_itemEastGondor;
int gv_itemArnor;
int gv_itemElves;
int gv_itemEvilMen;
int gv_itemMordor;
int gv_itemMistyMountains;
int gv_ittemEasterlings;
playergroup gv_evil;
playergroup gv_good;
playergroup gv_spectators;
int gv_tW;
timer gv_t;
unitgroup gv_goodStructures;
unitgroup gv_evilStructures;
bool gv_eastGondorLeft;
bool gv_elvesLeft;
bool gv_arnorleft;
bool gv_westernGondorLeft;
bool gv_mordorleft;
bool gv_evilmenleft;
bool gv_mistyMountainsleft;
bool gv_dwarvesleft;
bool gv_easterlingsleft;
bool gv_goodWin;
bool gv_evilWin;
unit gv_eastGondorSpy;
timer gv_eastGondorSpytimer;
unit gv_elvesSpy;
timer gv_elvesSpytimer;
unit gv_arnorSpy;
timer gv_arnorSpytimer;
unit gv_westGondorSpy;
timer gv_westGondortimer;
unit gv_mordorSpy;
timer gv_mordorSpytimer;
unit gv_evilmenSpy;
timer gv_evilmenSpytimer;
unit gv_mistySpy;
timer gv_mistySpytimer;
unit gv_dwarvesSpy;
timer gv_dwarvesSpytimer;
unit gv_easterlingsSpy;
timer gv_easterlingsSpytimer;
unitgroup gv_herogroup;
timer gv_eastGondorTimer;
timer gv_arnorTimer;
timer gv_elvesTimer;
timer gv_westGondorTimer;
timer gv_dwarvesTimer;
timer gv_mordorTimer;
timer gv_evilMenTimer;
timer gv_mistyTimer;
timer gv_easterlingsTimer;
unit gv_tulkasBeacon;
unit gv_auleBeacon;
unit gv_ulmoBeacon;
unit gv_manweBeacon;
bool gv_morgothCanDie;
unit gv_yavannaBeacon;
timer gv_yavannatimer;
int gv_yavannatimerwindow;
unit gv_morgoth;
bool gv_morgothteleport;
timer gv_morgothTimer;
timer gv_mordorTimeoldr;
bool gv_aIBoolean;
unitgroup gv_warshipofarnorCount;
unitgroup gv_sailorCounArnort;
unitgroup gv_osgiliathveteranCount;
unit gv_erynVornBeacon;
unit gv_erynVorn;
unit gv_pallandoBeacon;
unit gv_alatarbeacon;
unit gv_breebeacon;
unit gv_bree;
unit gv_aglarondBeacon;
unit gv_suthburg;
unit gv_aglarond;
unit gv_refugeOfEdhelionBeacon;
unit gv_refugeOfEdhelion;
unit gv_lossarnachBeacon;
unit gv_lossarnach;
unit gv_libnirBeacon;
unit gv_libnir;
unit gv_redDwarvesBeacon;
unit gv_redDwarvesEncampment;
unit gv_dale;
int gv_miningUpgrades;
unit gv_buzraDumbeacon;
unit gv_buzradum;
unit gv_houseOfHealing;
bool gv_fightForDorwinionBool;
unitgroup gv_clearDorwinion;
unit gv_dorwinionBeacon;
unit gv_goodDorwinion;
unit gv_anorienBeacon;
unit gv_anorien;
unit gv_gladdenCamp;
unit gv_tolfalasBeacon;
unit gv_tolfalas;
unit gv_fieldOfSilverlodeBeacon;
unit gv_fieldOfSilverlode;
unit gv_rhosgobelBeacon;
unit gv_rhosgobel;
unit gv_fieldOfCelenbrandtBeacon;
unit gv_fieldOfCelebrandt;
unit gv_orophin;
unit gv_forlondbeacon;
unit gv_forlond;
unit gv_cirdan;
int gv_retreatUpgrades;
int gv_fortifyUpgrades;
bool gv_disperseDone;
bool gv_centralizedone;
unitgroup gv_clearDruwaithCannons;
unit gv_druwaithLaurBeacon;
unit gv_druwaithLaur;
unit gv_westMarchBeacon;
unit gv_westMarch;
unit gv_blackValeBeacon;
unit gv_blackVale;
unit gv_litashBeacon;
unit gv_litash;
unit gv_rhuadurBeacon;
unit gv_evilRhuadur;
unitgroup gv_mirkwoodClearCannons;
unit gv_mirkwoodBeacon;
unit gv_mirkwood;
unit gv_mirkwoodCreep4;
unit gv_mirkwoodCreep3;
unit gv_mirkwoodCreep2;
unit gv_mirkwoodCreep;
unit gv_northernWastesBeacon;
unit gv_northernWastesWest;
unit gv_northernWastesEast;
unit gv_lieutenantOfHoarddale;
bool gv_evilLefnuiGotten;
unit gv_evilLefnuiBeacon;
unit gv_evilLefnui;
unitgroup gv_clearEvilLefnuiCannons;
bool gv_evilOrthancGotten;
unitgroup gv_clearOrthancCannons;
unit gv_evilOrthancBeacon;
unit gv_evilOrthanc;
unit gv_nanLaeglinBeacon;
unit gv_nanLaeglin;
unitgroup gv_clearminhiarthcannons;
unit gv_minhiarthBeacon;
unit gv_evilMinhiarth;
unit gv_shelobBeacon;
unit gv_burnGardensbeacon;
unit gv_carnDumBeacon;
unit gv_carnDum;
unit gv_greenwoodcorruption;
unitgroup gv_clearAmonLancCannons;
unit gv_dolGuldur;
unit gv_creep1;
unit gv_creep2;
unit gv_creep3;
unit gv_creep4;
timer gv_callSouthTimer;
int gv_callSouthTimerwindow;
unitgroup gv_clearPelargir;
unit gv_corsairPelargir;
unit gv_corsairLefnui;
unit gv_southronEncampment;
unit gv_eastBightBeacon;
unit gv_eastbight;
unit gv_anduinCampBeacon;
unit gv_anduinCamp;
unitgroup gv_ereborCannonCount;
unit gv_siegeOfEreborBeacon;
unit gv_smaug;
unit gv_ereborcaptured;
unit gv_bolg;
unit gv_broggau;
unit gv_scorba;
unit gv_scathaBeacon;
unit gv_scatha;

void InitGlobals () {
    gv_ringBearer = UnitFromId(727530196);
    gv_playernumber = 9;
    gv_westGondorPlayer = UnitGroupEmpty();
    gv_dwarvesPlayer = UnitGroupEmpty();
    gv_eastgondorPlayer = UnitGroupEmpty();
    gv_arnorPlayer = UnitGroupEmpty();
    gv_elvesPlayer = UnitGroupEmpty();
    gv_evilmenPlayer = UnitGroupEmpty();
    gv_mordorPlayer = UnitGroupEmpty();
    gv_mistyMountainsPlayer = UnitGroupEmpty();
    gv_easterlingsPlayer = UnitGroupEmpty();
    gv_itemWestGondor = 1;
    gv_itemDwarves = 2;
    gv_itemEastGondor = 3;
    gv_itemArnor = 4;
    gv_itemElves = 5;
    gv_itemEvilMen = 6;
    gv_itemMordor = 7;
    gv_itemMistyMountains = 8;
    gv_ittemEasterlings = 9;
    gv_evil = PlayerGroupEmpty();
    gv_good = PlayerGroupEmpty();
    gv_spectators = PlayerGroupEmpty();
    gv_tW = c_timerWindowNone;
    gv_t = TimerCreate();
    gv_goodStructures = UnitGroupEmpty();
    gv_evilStructures = UnitGroupEmpty();
    gv_eastGondorSpytimer = TimerCreate();
    gv_elvesSpytimer = TimerCreate();
    gv_arnorSpytimer = TimerCreate();
    gv_westGondortimer = TimerCreate();
    gv_mordorSpytimer = TimerCreate();
    gv_evilmenSpytimer = TimerCreate();
    gv_mistySpytimer = TimerCreate();
    gv_dwarvesSpytimer = TimerCreate();
    gv_easterlingsSpytimer = TimerCreate();
    gv_herogroup = UnitGroupEmpty();
    gv_eastGondorTimer = TimerCreate();
    gv_arnorTimer = TimerCreate();
    gv_elvesTimer = TimerCreate();
    gv_westGondorTimer = TimerCreate();
    gv_dwarvesTimer = TimerCreate();
    gv_mordorTimer = TimerCreate();
    gv_evilMenTimer = TimerCreate();
    gv_mistyTimer = TimerCreate();
    gv_easterlingsTimer = TimerCreate();
    gv_yavannatimer = TimerCreate();
    gv_yavannatimerwindow = c_timerWindowNone;
    gv_morgothTimer = TimerCreate();
    gv_mordorTimeoldr = TimerCreate();
    gv_aIBoolean = true;
    gv_warshipofarnorCount = UnitGroupEmpty();
    gv_sailorCounArnort = UnitGroupEmpty();
    gv_osgiliathveteranCount = UnitGroupEmpty();
    gv_erynVornBeacon = UnitFromId(1843716119);
    gv_pallandoBeacon = UnitFromId(761919187);
    gv_alatarbeacon = UnitFromId(1080236571);
    gv_breebeacon = UnitFromId(1286610569);
    gv_bree = UnitFromId(1295235531);
    gv_aglarondBeacon = UnitFromId(1894058311);
    gv_refugeOfEdhelionBeacon = UnitFromId(2541577);
    gv_lossarnachBeacon = UnitFromId(536870447);
    gv_libnirBeacon = UnitFromId(1571004196);
    gv_redDwarvesBeacon = UnitFromId(1431844182);
    gv_buzraDumbeacon = UnitFromId(49567173);
    gv_clearDorwinion = UnitGroup("PhotonCannon", UnitGetOwner(UnitFromId(1164482133)), RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_anorienBeacon = UnitFromId(1739339726);
    gv_tolfalasBeacon = UnitFromId(1381218684);
    gv_fieldOfSilverlodeBeacon = UnitFromId(1559398988);
    gv_rhosgobelBeacon = UnitFromId(115566426);
    gv_fieldOfCelenbrandtBeacon = UnitFromId(1221128249);
    gv_clearDruwaithCannons = UnitGroup("PhotonCannon", UnitGetOwner(UnitFromId(1948361748)), RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_blackValeBeacon = UnitFromId(365524603);
    gv_litashBeacon = UnitFromId(296883939);
    gv_mirkwoodClearCannons = UnitGroup("PhotonCannon", UnitGetOwner(UnitFromId(677747402)), RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_northernWastesBeacon = UnitFromId(25639022);
    gv_clearEvilLefnuiCannons = UnitGroup("PhotonCannon", UnitGetOwner(UnitFromId(490175528)), RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_clearOrthancCannons = UnitGroup("PhotonCannon", UnitGetOwner(UnitFromId(1421689034)), RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_nanLaeglinBeacon = UnitFromId(1425060100);
    gv_clearminhiarthcannons = UnitGroup("PhotonCannon", UnitGetOwner(UnitFromId(1731438873)), RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_shelobBeacon = UnitFromId(2105255613);
    gv_carnDumBeacon = UnitFromId(298536961);
    gv_clearAmonLancCannons = UnitGroup("PhotonCannon", UnitGetOwner(UnitFromId(969977804)), RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_callSouthTimer = TimerCreate();
    gv_callSouthTimerwindow = c_timerWindowNone;
    gv_clearPelargir = UnitGroup("PhotonCannon", UnitGetOwner(UnitFromId(989327831)), RegionFromId(41), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_southronEncampment = UnitFromId(1767098372);
    gv_ereborCannonCount = UnitGroup("PhotonCannon", UnitGetOwner(UnitFromId(1045690131)), RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_siegeOfEreborBeacon = UnitFromId(569097050);
    gv_scathaBeacon = UnitFromId(791819109);
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_CreateunitOsgiliathveteran (int lp_spawnedAmount, string lp_unitType, unit lp_spawner, point lp_spawnPoint, string lp_elseUnitType);
void gf_CreateUnitSailorarnor (int lp_spawnedAmount, string lp_unitType, unit lp_spawner, point lp_spawnPoint, string lp_elseUnitType);
void gf_CreateUnitWarship (int lp_spawnedAmount, string lp_unitType, unit lp_spawner, point lp_spawnPoint, string lp_elseUnitType);
void gf_Createunit (int lp_spawnedAmount, string lp_unitType, unit lp_spawner, point lp_spawnPoint);
void gf_BasicSpawnDesign ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_MeleeInitialization;
trigger gt_InitializationEvents;
trigger gt_deathresponsemorgomir;
trigger gt_deathresponsedeprecated;
trigger gt_LondDaerDeath;
trigger gt_MinhiriathDeath;
trigger gt_TharbadDeath;
trigger gt_BarrowDownsDeath;
trigger gt_AnnuminasDeath;
trigger gt_LastBridgeDeath;
trigger gt_AmonSulDeath;
trigger gt_OuterRhuadurDeath;
trigger gt_FornostDeath;
trigger gt_EvendimDeath;
trigger gt_KhazaDumDeath;
trigger gt_EreborDeath;
trigger gt_IronHillsDeath;
trigger gt_DaleDeath;
trigger gt_BlueMountainsDeath;
trigger gt_GardensOfEntwivesDeath;
trigger gt_AmonLancDeath;
trigger gt_GreenwoodDeath;
trigger gt_GreenwoodHallsDeath;
trigger gt_LothorienDeath;
trigger gt_HarlondDeath;
trigger gt_MithlondDeath;
trigger gt_DolAmrothDeath;
trigger gt_ErechDeath;
trigger gt_PinnathGaelinDeath;
trigger gt_AnfalasDeath;
trigger gt_LefnuiDeath;
trigger gt_OrthancDeath;
trigger gt_OsgiliathDeath;
trigger gt_PelargirDeath;
trigger gt_MinasAnorDeath;
trigger gt_LamedonDeath;
trigger gt_DorEnErnilDeath;
trigger gt_FreePeopleOfDorwinionDeath;
trigger gt_HoardDaleDeath;
trigger gt_TrollshawsDeath;
trigger gt_DunlandDeath;
trigger gt_NorthEnedwaithDeath;
trigger gt_SouthEnedwaithDeath;
trigger gt_DruwaithDeath;
trigger gt_DunharrowDeath;
trigger gt_WitheredHeathdeath;
trigger gt_GoblinTownDeath;
trigger gt_MountGundabadDeath;
trigger gt_EttenmoorsDeath;
trigger gt_FrozenplainsDeath;
trigger gt_MountGramDeath;
trigger gt_BaradDurDeath;
trigger gt_UdunDeath;
trigger gt_NurnDeath;
trigger gt_CirthNurnDeath;
trigger gt_MinasMorgulDeath;
trigger gt_SouthronEncampmentDeath;
trigger gt_RhunDeath;
trigger gt_RhovanionDeath;
trigger gt_DorwinionDeath;
trigger gt_CarnenDeath;
trigger gt_EsgarothDeath;
trigger gt_MouthOfSauron;
trigger gt_Sauron;
trigger gt_WitchKing;
trigger gt_GreatBeast;
trigger gt_Khamul;
trigger gt_KingOfDorwinion;
trigger gt_QueenOfRhovanion;
trigger gt_BlackSerpent;
trigger gt_Mootlord;
trigger gt_CommanderOfHoardale;
trigger gt_Adunabeth;
trigger gt_ChieftainOfDunland;
trigger gt_Drogoth;
trigger gt_Urgost;
trigger gt_GreatGoblin;
trigger gt_Azog;
trigger gt_LieutenantOfHoarddaleDeath;
trigger gt_ScorbaDeath;
trigger gt_BroggauDeath;
trigger gt_BolgDeath;
trigger gt_SmaugDeath;
trigger gt_MorgothDeath;
trigger gt_Isildur;
trigger gt_Anarion;
trigger gt_Cemendur;
trigger gt_Meneldil;
trigger gt_Elendur;
trigger gt_Ciryon;
trigger gt_Aratan;
trigger gt_Elendil;
trigger gt_GilGilad;
trigger gt_Amdir;
trigger gt_Amroth;
trigger gt_Oropher;
trigger gt_DurinIV;
trigger gt_LordOfErebor;
trigger gt_GuildmasterOfBlueMountains;
trigger gt_StewardOfGondor;
trigger gt_Valandil;
trigger gt_EC3A4rendil;
trigger gt_OrophinDeath;
trigger gt_CirdanDeath;
trigger gt_TulkasDeath;
trigger gt_AuleDeath;
trigger gt_UlmoDeath;
trigger gt_Manwedeath;
trigger gt_YavannaDeath;
trigger gt_Ringmechanic2;
trigger gt_TurnonFund;
trigger gt_FundCommand;
trigger gt_Mineralscheat;
trigger gt_Gascheat;
trigger gt_Devunit;
trigger gt_Passive;
trigger gt_Disablepassive;
trigger gt_Normalchat;
trigger gt_Hardchat;
trigger gt_Brutalchat;
trigger gt_Nightmarechat;
trigger gt_DefenseSelect;
trigger gt_StartUp;
trigger gt_Leveling;
trigger gt_Unitgroupallunits;
trigger gt_AllNeutral;
trigger gt_MainPlayerAsssignment;
trigger gt_PlayerIsZero;
trigger gt_InitialResources;
trigger gt_Alliances;
trigger gt_Soundtrack;
trigger gt_F12guides;
trigger gt_Helprequestsoff;
trigger gt_Factionsetup;
trigger gt_Timer;
trigger gt_goodstructures;
trigger gt_Evilstructures;
trigger gt_RemovefromGoodleaving;
trigger gt_Removefromevilleaving;
trigger gt_DefeatbyleaveGOODWINS;
trigger gt_DefeatbyleaveEVIlWINS;
trigger gt_DefeatbystructuresEVILWINS;
trigger gt_DefeatbystructuresGOODWINS;
trigger gt_Resourcemanaging;
trigger gt_EnablePing;
trigger gt_ReturnGas;
trigger gt_MasterSpyRespawn;
trigger gt_EastGondorSpy;
trigger gt_EastGondorSpyDeath;
trigger gt_EastGondorSpyRespawn;
trigger gt_ElvesSpy;
trigger gt_ElvesSpyDeath;
trigger gt_ElvesSpyRespawn;
trigger gt_ArnorSpy;
trigger gt_ArnorSpyDeath;
trigger gt_ArnorSpyRespawn;
trigger gt_WestGondorSpy;
trigger gt_WestGondorSpyDeath;
trigger gt_WestGondorSpyRespawn;
trigger gt_MordorSpy;
trigger gt_MordorSpyDeath;
trigger gt_MordorSpyRespawn;
trigger gt_EvilmenSpy;
trigger gt_EvilmenSpyDeath;
trigger gt_EvilmenSpyRespawn;
trigger gt_MistySpy;
trigger gt_MistySpyDeath;
trigger gt_MistySpyRespawn;
trigger gt_DwarvesSpy;
trigger gt_DwarvesSpyDeath;
trigger gt_DwarvesSpyRespawn;
trigger gt_EasterlingsSpy;
trigger gt_EasterlingsSpyDeath;
trigger gt_EasterlingsSpyRespawn;
trigger gt_RetreatHeroesEastGondor;
trigger gt_waitteleportEastGondor;
trigger gt_RetreatHeroesArnor;
trigger gt_waitteleportArnor;
trigger gt_RetreatHeroesElves;
trigger gt_waitteleportElves;
trigger gt_RetreatHeroesWestGondor;
trigger gt_waitteleportWestGondor;
trigger gt_RetreatHeroesDwarves;
trigger gt_waitteleportDwarves;
trigger gt_RetreatHeroesMordor;
trigger gt_waitteleportMordor;
trigger gt_RetreatHeroesEvilMen;
trigger gt_waitteleportEvilMen;
trigger gt_RetreatHeroesMisty;
trigger gt_waitteleportMisty;
trigger gt_RetreatHeroesEasterlings;
trigger gt_waitteleportEasterlings;
trigger gt_AICanResearchEastGondor;
trigger gt_AICanResearchElves;
trigger gt_AICanResearchArnor;
trigger gt_AICanResearchWestGondor;
trigger gt_AICanResearchDwarves;
trigger gt_AICanResearchMordor;
trigger gt_AICanResearchMistyMountain;
trigger gt_AICanResearchEasterlings;
trigger gt_AICanResearchEvilmen;
trigger gt_AInormaldifficulty;
trigger gt_AIHarddifficulty;
trigger gt_UpgradeSpeedMordor;
trigger gt_UpradeSpeedMistymountains;
trigger gt_UpgradeSpeedEasterlings;
trigger gt_UpgradeSpeedEvilMen;
trigger gt_AIBrutalDifficulty;
trigger gt_EnableTulkas;
trigger gt_ActivateTulkas;
trigger gt_EnableAule;
trigger gt_ActivateAule;
trigger gt_EnableUlmo;
trigger gt_ActivateUlmo;
trigger gt_EnableManwe;
trigger gt_ActivateManwe;
trigger gt_EnableYavanna;
trigger gt_ActivateYavanna;
trigger gt_YavannaTimer;
trigger gt_MorgothSoundtrack;
trigger gt_ValarSoundtrack;
trigger gt_Morgothintiilizatation;
trigger gt_AINightmareDifficulty;
trigger gt_RetreatHeroesMorgoth;
trigger gt_waitteleportMorgoth;
trigger gt_moveTeleportMorgoth;
trigger gt_RetreatHeroesMordorold;
trigger gt_waitteleportMordorold;
trigger gt_AIintialization;
trigger gt_Aichecker;
trigger gt_AIenableteleport;
trigger gt_Attackwaves;
trigger gt_Turnrecurringdifficultyoff;
trigger gt_spawnlayout;
trigger gt_spawnlayout2;
trigger gt_spawnlayout3;
trigger gt_MountGram;
trigger gt_MountGramIncome;
trigger gt_FrozenPlains;
trigger gt_FrozenPlainsincome;
trigger gt_MountGundabad;
trigger gt_MountGundabadIncome;
trigger gt_GoblinTown;
trigger gt_GoblinTownIncome;
trigger gt_Ettenmoors;
trigger gt_EttenmoorsIncome;
trigger gt_WitheredHeath;
trigger gt_DolAmroth;
trigger gt_DolAmrothIncome;
trigger gt_Erech;
trigger gt_ErechIncome;
trigger gt_PinnathGaelin;
trigger gt_PinnathGaelinIncome;
trigger gt_Lefnui;
trigger gt_LefnuiIncome;
trigger gt_Orthanc;
trigger gt_Anfalas;
trigger gt_Hoarddale;
trigger gt_HoarddaleIncome;
trigger gt_Trollshaws;
trigger gt_TrollshawsIncome;
trigger gt_Dunland;
trigger gt_DunlandIncome;
trigger gt_Druwaith;
trigger gt_DruwaithIncome;
trigger gt_Dunharrow;
trigger gt_DunharrowIncome;
trigger gt_SouthEnedwaith;
trigger gt_SouthEnedwaithIncome;
trigger gt_NorthEnedwaith;
trigger gt_NorthEnedwaithIncome;
trigger gt_Lothorien;
trigger gt_LothorienIncome;
trigger gt_GreenwoodHalls;
trigger gt_GreenwoodHallsIncome;
trigger gt_Harlond;
trigger gt_HarlondIncome;
trigger gt_GardenofTheEntwives;
trigger gt_Mithlond;
trigger gt_MithlondIncome;
trigger gt_Greenwood;
trigger gt_AmonLanc;
trigger gt_Erebor;
trigger gt_EreborIncome;
trigger gt_EreborIncomemining;
trigger gt_Khazadum;
trigger gt_KhazaDumIncome;
trigger gt_KhazaDumIncomemining;
trigger gt_BlueMountains;
trigger gt_BlueMountainsincome;
trigger gt_BlueMountainsincomemining;
trigger gt_IronHills;
trigger gt_IronHillsincome;
trigger gt_IronHillsIncomemining;
trigger gt_Dale;
trigger gt_DaleIncome;
trigger gt_Rhun;
trigger gt_RhunIncome;
trigger gt_Dorwinion;
trigger gt_DorwinionIncome;
trigger gt_Rhovanion;
trigger gt_RhovanionIncome;
trigger gt_Carnen;
trigger gt_CarnenIncome;
trigger gt_Esgaroth;
trigger gt_EsgarothIncome;
trigger gt_SouthernEncampment;
trigger gt_SouthronEncampmentincome;
trigger gt_BaradDur;
trigger gt_BaradDurIncome;
trigger gt_Udun;
trigger gt_UdunIncome;
trigger gt_MinasMorgul;
trigger gt_Nurn;
trigger gt_NurnIncome;
trigger gt_CirthNurn;
trigger gt_CirthNurnIncome;
trigger gt_Lastbridge;
trigger gt_LondDaer;
trigger gt_LondDaerIncome;
trigger gt_Tharbad;
trigger gt_TharbadIncome;
trigger gt_OuterRhuadur;
trigger gt_Minhiarth;
trigger gt_AmonSul;
trigger gt_Fornost;
trigger gt_FornostIncome;
trigger gt_Evendim;
trigger gt_Barrowdowns;
trigger gt_BarrowDownsIncome;
trigger gt_Annuminas;
trigger gt_AnnuminasIncome;
trigger gt_FreePeopleOfDorwinion;
trigger gt_Osgiliath;
trigger gt_OsgiliathIncome;
trigger gt_Minasanor;
trigger gt_MinasAnorincome;
trigger gt_Pelargir;
trigger gt_PelargirIncome;
trigger gt_DorEnErnil;
trigger gt_DorEnErnilIncome;
trigger gt_Lamedon;
trigger gt_LamedonIncome;
trigger gt_ActivateErynVornGood;
trigger gt_ActivateErynVornEvil;
trigger gt_ErynVorngood;
trigger gt_ErynVornEvil;
trigger gt_ActivePallando;
trigger gt_ActiveAlatar;
trigger gt_ActivateBree;
trigger gt_Bree;
trigger gt_BreeIncome;
trigger gt_ActivtateAglarond;
trigger gt_Suthburg;
trigger gt_Aglarond;
trigger gt_AglarondIncome;
trigger gt_ActivateRefugeOfEdhelion;
trigger gt_RefugeOfEdhelion;
trigger gt_ActivateLossarnach;
trigger gt_Lossarnach;
trigger gt_ActivateLibnir;
trigger gt_Libnir;
trigger gt_LordOfIronHills;
trigger gt_ActivateRedDwarvesEncampment;
trigger gt_RedDwarvesEncampment;
trigger gt_FleeDaleActivate;
trigger gt_Dale2;
trigger gt_Dale2Income;
trigger gt_IncreaseMiningUpgrades;
trigger gt_Increaseminingupgradesbluemountains;
trigger gt_IncreaseminingupgradesKhazaDum;
trigger gt_IncreaseminingupgradesErebor;
trigger gt_IncreaseminingupgradesIronHills;
trigger gt_IncreaseminingupgradesBuzradum;
trigger gt_IncreaseminingupgradesAglarond;
trigger gt_UnlockDurinTheFifth;
trigger gt_BuyDurinTheFifth;
trigger gt_ActivateBuzraDum;
trigger gt_BuzraDum;
trigger gt_BuzraeventIncome;
trigger gt_BuzraIncome;
trigger gt_HouseOfHealing;
trigger gt_HouseOfHealingdestroy;
trigger gt_Genevive;
trigger gt_MarquilGladden;
trigger gt_MarquilFreePeople;
trigger gt_FightForDorwinion;
trigger gt_SpawnDorwinion;
trigger gt_ActivateDorwinion;
trigger gt_GoodDorwinion;
trigger gt_FortifyRiver;
trigger gt_ActivateAnorien;
trigger gt_Anorien;
trigger gt_GladdenMigrate;
trigger gt_GladdenCamp;
trigger gt_ActivateTolfalas;
trigger gt_Tolfalas;
trigger gt_Galadriel;
trigger gt_DwarvenFriendshipIncome;
trigger gt_Conceal;
trigger gt_GreenwoodDestroyed;
trigger gt_Thranduil;
trigger gt_ActivateFieldOfSilverlode;
trigger gt_FieldOfSilverlode;
trigger gt_ActivateRhosgobel;
trigger gt_Rhosgobel;
trigger gt_ActivateFieldOfCelebrandt;
trigger gt_FieldOfCelebrandt;
trigger gt_Orophin;
trigger gt_Fimbreithil;
trigger gt_SpawnForlond;
trigger gt_ActivateForlond;
trigger gt_Forlond;
trigger gt_ColationHasFormed;
trigger gt_Cirdan;
trigger gt_Crownsbounty;
trigger gt_Noblesaccord;
trigger gt_CallUponTheFief;
trigger gt_Disperse;
trigger gt_UnlockDisperse;
trigger gt_Eldacardisperse;
trigger gt_FortifiedLastBridge;
trigger gt_FortifiedLondDaer;
trigger gt_FortifiedMinhiarth;
trigger gt_FortifiedOuterRhuadur;
trigger gt_FortifiedTharbad;
trigger gt_Centralize;
trigger gt_UnlockCentralize;
trigger gt_Eldacarcentralize;
trigger gt_RetreatedLastBridge;
trigger gt_RetreatedLondDaer;
trigger gt_RetreatedMinhiarth;
trigger gt_RetreatedOuterRhuadur;
trigger gt_RetreatedTharbad;
trigger gt_FortifyOuterRhuadur;
trigger gt_FortifyLastBridge;
trigger gt_FortifyTharbad;
trigger gt_FortifyMinhiarth;
trigger gt_FortifyLondDaer;
trigger gt_Guerillawarfare;
trigger gt_PrinceOfDolAmroth;
trigger gt_ChiefOfDruwaith;
trigger gt_SpawnDruwaithLaur;
trigger gt_ActivateDruwaithLaur;
trigger gt_DruwaithLaur;
trigger gt_SpawnWestmarch;
trigger gt_ActivateWestmarch;
trigger gt_WestMarch;
trigger gt_SurveilerOfGondor;
trigger gt_ActivateBlackVale;
trigger gt_BlackVale;
trigger gt_ActivateValandilsinsanity;
trigger gt_ValandilIncomeErech;
trigger gt_ValandilIncomeDolamroth;
trigger gt_ValandilIncomePinnathGaelin;
trigger gt_ActivateLitash;
trigger gt_Litash;
trigger gt_SpawnEvilRhuadur;
trigger gt_ActivateEvilRhuadur;
trigger gt_Evilrhuadur;
trigger gt_SpawnMirkwood;
trigger gt_ActivateMirkwood;
trigger gt_Mirkwood;
trigger gt_MirkwoodDestroyed;
trigger gt_ActivateNorthernWastes;
trigger gt_NorthernWastesWest;
trigger gt_NorthernWastesEast;
trigger gt_KhorakhilEmpower;
trigger gt_Horamuth;
trigger gt_LieutenantOfHoarddale;
trigger gt_SpawnEvilLefnui;
trigger gt_ActivateEvilLefnui;
trigger gt_EvilLefnui;
trigger gt_SpawnEvilOrthanc;
trigger gt_ActivateEvilOrthanc;
trigger gt_EvilOrthanc;
trigger gt_ActivateNanLaeglin;
trigger gt_NanLaeglin;
trigger gt_SpawnEvilMinhiarth;
trigger gt_ActivateEvilMinhiarth;
trigger gt_EvilMinhiarth;
trigger gt_SerantsOfMordorActivate;
trigger gt_MouthOfSauronSpawning;
trigger gt_ActivateShelob;
trigger gt_SpawnBurnTheGardens;
trigger gt_BurnTheGardens;
trigger gt_EstablishAngmar;
trigger gt_ActivateCarnDum;
trigger gt_CarnDum;
trigger gt_EmpowerSauron;
trigger gt_EmpowerWitchKing;
trigger gt_Uvartha;
trigger gt_Amonlancdestroyed;
trigger gt_Amonlanccorruption;
trigger gt_Udundestroyed;
trigger gt_ActivateDolGuldur;
trigger gt_DolGuldur;
trigger gt_Udundestroyed2;
trigger gt_Dolguldurdestroyed;
trigger gt_WarlordOfTheSouthrons;
trigger gt_CallTheSouth;
trigger gt_CorsairLord;
trigger gt_EnableCorsairPelargir;
trigger gt_ActivateCorsairPelargirSpawn;
trigger gt_ActivateCorsairPelargirship;
trigger gt_CorsairPelargir;
trigger gt_EnableCorsairLefnui;
trigger gt_ActivateCorsairLefnuiSpawn;
trigger gt_ActivateCorsairLefnuiship;
trigger gt_CorsairLefnui;
trigger gt_Morgomir;
trigger gt_ShatterMorgomir;
trigger gt_RallyTheEasterlings;
trigger gt_Rallyeasterlings;
trigger gt_ActivateCorsairinvasion;
trigger gt_SpawnEastBight;
trigger gt_ActivateEastBight;
trigger gt_EastBight;
trigger gt_SpawnAnduinCamp;
trigger gt_ActivateAnduinCamp;
trigger gt_AnduinCamp;
trigger gt_CreateSmaugBeacon;
trigger gt_ActivateSiegeOfErebor;
trigger gt_SiegeOfErebor;
trigger gt_RemoveEreborinvulernability;
trigger gt_Bolg;
trigger gt_Broggau;
trigger gt_Scorba;
trigger gt_ActivateScatha;
trigger gt_Scatha;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_CreateunitOsgiliathveteran (int lp_spawnedAmount, string lp_unitType, unit lp_spawner, point lp_spawnPoint, string lp_elseUnitType) {
    // Automatic Variable Declarations
    int auto34E5A18A_n;
    int auto34E5A18A_i;

    // Implementation
    auto34E5A18A_n = lp_spawnedAmount;
    for (auto34E5A18A_i = 1; auto34E5A18A_i <= auto34E5A18A_n; auto34E5A18A_i += 1) {
        if ((PlayerGetPropertyInt(UnitGetOwner(lp_spawner), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lp_spawner), c_playerPropSuppliesMade)) && (UnitGroupCount(gv_osgiliathveteranCount, c_unitCountAlive) <= 7)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_unitType, 0, UnitGetOwner(lp_spawner), lp_spawnPoint);
            UnitGroupAdd(gv_sailorCounArnort, UnitLastCreated());
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_elseUnitType, 0, UnitGetOwner(lp_spawner), lp_spawnPoint);
            break;
        }
    }
}

void gf_CreateUnitSailorarnor (int lp_spawnedAmount, string lp_unitType, unit lp_spawner, point lp_spawnPoint, string lp_elseUnitType) {
    // Automatic Variable Declarations
    int auto5A1D7577_n;
    int auto5A1D7577_i;

    // Implementation
    auto5A1D7577_n = lp_spawnedAmount;
    for (auto5A1D7577_i = 1; auto5A1D7577_i <= auto5A1D7577_n; auto5A1D7577_i += 1) {
        if ((PlayerGetPropertyInt(UnitGetOwner(lp_spawner), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lp_spawner), c_playerPropSuppliesMade)) && (UnitGroupCount(gv_sailorCounArnort, c_unitCountAlive) <= 10)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_unitType, 0, UnitGetOwner(lp_spawner), lp_spawnPoint);
            UnitGroupAdd(gv_sailorCounArnort, UnitLastCreated());
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_elseUnitType, 0, UnitGetOwner(lp_spawner), lp_spawnPoint);
            break;
        }
    }
}

void gf_CreateUnitWarship (int lp_spawnedAmount, string lp_unitType, unit lp_spawner, point lp_spawnPoint, string lp_elseUnitType) {
    // Automatic Variable Declarations
    int auto704BE88B_n;
    int auto704BE88B_i;

    // Implementation
    auto704BE88B_n = lp_spawnedAmount;
    for (auto704BE88B_i = 1; auto704BE88B_i <= auto704BE88B_n; auto704BE88B_i += 1) {
        if ((PlayerGetPropertyInt(UnitGetOwner(lp_spawner), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lp_spawner), c_playerPropSuppliesMade)) && (UnitGroupCount(gv_warshipofarnorCount, c_unitCountAlive) <= 4)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_unitType, 0, UnitGetOwner(lp_spawner), lp_spawnPoint);
            UnitGroupAdd(gv_warshipofarnorCount, UnitLastCreated());
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_elseUnitType, 0, UnitGetOwner(lp_spawner), lp_spawnPoint);
            break;
        }
    }
}

void gf_Createunit (int lp_spawnedAmount, string lp_unitType, unit lp_spawner, point lp_spawnPoint) {
    // Automatic Variable Declarations
    int autoC1FB36AB_n;
    int autoC1FB36AB_i;

    // Implementation
    autoC1FB36AB_n = lp_spawnedAmount;
    for (autoC1FB36AB_i = 1; autoC1FB36AB_i <= autoC1FB36AB_n; autoC1FB36AB_i += 1) {
        if ((PlayerGetPropertyInt(UnitGetOwner(lp_spawner), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lp_spawner), c_playerPropSuppliesMade))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_unitType, 0, UnitGetOwner(lp_spawner), lp_spawnPoint);
        }
        else {
            break;
        }
    }
}

void gf_BasicSpawnDesign () {
    // Variable Declarations
    unit lv_orthanc;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_orthanc = UnitFromId(1897128707);

    // Implementation
    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(EventUnit()) == true) && (UnitGetOwner(EventUnit()) != 0)) {
        if (true) {
        }
        else {
            if (true) {
            }
            else {
                if (true) {
                }
                else {
                    if (true) {
                    }
                    else {
                        if (true) {
                        }
                        else {
                            if (true) {
                            }
                            else {
                                if (true) {
                                }

                            }
                        }
                    }
                }
            }
        }
    }

}

//--------------------------------------------------------------------------------------------------
// Trigger: Melee Initialization
//--------------------------------------------------------------------------------------------------
bool gt_MeleeInitialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    MeleeInitAI();
    MeleeInitOptions();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MeleeInitialization_Init () {
    gt_MeleeInitialization = TriggerCreate("gt_MeleeInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization Events
//--------------------------------------------------------------------------------------------------
bool gt_InitializationEvents_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto310E8295_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetSpeedValue(c_gameSpeedFaster);
    auto310E8295_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto310E8295_g, lv_player);
        if (lv_player < 0) { break; }
        VisRevealArea(lv_player, RegionPlayableMap(), 0.3, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializationEvents_Init () {
    gt_InitializationEvents = TriggerCreate("gt_InitializationEvents_Func");
    TriggerAddEventMapInit(gt_InitializationEvents);
}

//--------------------------------------------------------------------------------------------------
// Trigger: death response (morgomir)
//--------------------------------------------------------------------------------------------------
bool gt_deathresponsemorgomir_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((RandomInt(0, 100) >= 50))) {
            return false;
        }

        if (!((UnitBehaviorCount(libNtve_gf_KillingUnit(), "UndeadSpawnapply") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedCivilian", 0, UnitGetOwner(libNtve_gf_KillingUnit()), UnitGetPosition(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_deathresponsemorgomir_Init () {
    gt_deathresponsemorgomir = TriggerCreate("gt_deathresponsemorgomir_Func");
    TriggerEnable(gt_deathresponsemorgomir, false);
    TriggerAddEventUnitDied(gt_deathresponsemorgomir, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: death response deprecated
//--------------------------------------------------------------------------------------------------
bool gt_deathresponsedeprecated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(libNtve_gf_KillingUnit(), "BasicAuraapplyreal") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedCivilian", 0, UnitGetOwner(UnitFromId(1782954501)), PointFromId(936611018));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedCivilian", 0, UnitGetOwner(libNtve_gf_KillingUnit()), UnitGetPosition(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_deathresponsedeprecated_Init () {
    gt_deathresponsedeprecated = TriggerCreate("gt_deathresponsedeprecated_Func");
    TriggerEnable(gt_deathresponsedeprecated, false);
    TriggerAddEventUnitDied(gt_deathresponsedeprecated, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lond Daer Death
//--------------------------------------------------------------------------------------------------
bool gt_LondDaerDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SupplyDepot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/3976B198"));
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/7DF3886A"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/55DC0B56"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LondDaerDeath_Init () {
    gt_LondDaerDeath = TriggerCreate("gt_LondDaerDeath_Func");
    TriggerAddEventUnitDied(gt_LondDaerDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minhiriath Death
//--------------------------------------------------------------------------------------------------
bool gt_MinhiriathDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "DataCore"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/0F1C263C"));
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/B2A8238B"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/DC5C464A"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MinhiriathDeath_Init () {
    gt_MinhiriathDeath = TriggerCreate("gt_MinhiriathDeath_Func");
    TriggerAddEventUnitDied(gt_MinhiriathDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tharbad Death
//--------------------------------------------------------------------------------------------------
bool gt_TharbadDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "HiveMindEmulator"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/F4C4381B"));
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/01B94E42"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/655BA067"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TharbadDeath_Init () {
    gt_TharbadDeath = TriggerCreate("gt_TharbadDeath_Func");
    TriggerAddEventUnitDied(gt_TharbadDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Barrow Downs Death
//--------------------------------------------------------------------------------------------------
bool gt_BarrowDownsDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "NukeSiloNova"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/E5147B1F"));
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/61981EE7"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/38311D21"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BarrowDownsDeath_Init () {
    gt_BarrowDownsDeath = TriggerCreate("gt_BarrowDownsDeath_Func");
    TriggerAddEventUnitDied(gt_BarrowDownsDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Annuminas Death
//--------------------------------------------------------------------------------------------------
bool gt_AnnuminasDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "OrbitalCommand"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/D7A013A2"));
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/EC6F1D0D"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/CDC46C11"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AnnuminasDeath_Init () {
    gt_AnnuminasDeath = TriggerCreate("gt_AnnuminasDeath_Func");
    TriggerAddEventUnitDied(gt_AnnuminasDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Last Bridge Death
//--------------------------------------------------------------------------------------------------
bool gt_LastBridgeDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "MannedTurret"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/DD3329FB"));
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/9C066D82"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/220FB6AE"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LastBridgeDeath_Init () {
    gt_LastBridgeDeath = TriggerCreate("gt_LastBridgeDeath_Func");
    TriggerAddEventUnitDied(gt_LastBridgeDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amon Sul Death
//--------------------------------------------------------------------------------------------------
bool gt_AmonSulDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SensorTower"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/9E2363AF"));
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/86448264"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/369C66EC"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmonSulDeath_Init () {
    gt_AmonSulDeath = TriggerCreate("gt_AmonSulDeath_Func");
    TriggerAddEventUnitDied(gt_AmonSulDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Outer Rhuadur Death
//--------------------------------------------------------------------------------------------------
bool gt_OuterRhuadurDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Barracks"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/BCC49C3D"));
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/12E0F6AC"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/8D993978"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OuterRhuadurDeath_Init () {
    gt_OuterRhuadurDeath = TriggerCreate("gt_OuterRhuadurDeath_Func");
    TriggerAddEventUnitDied(gt_OuterRhuadurDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fornost Death
//--------------------------------------------------------------------------------------------------
bool gt_FornostDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Armory"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/F7E5AAC5"));
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/58AC8284"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/3D20239E"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FornostDeath_Init () {
    gt_FornostDeath = TriggerCreate("gt_FornostDeath_Func");
    TriggerAddEventUnitDied(gt_FornostDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evendim Death
//--------------------------------------------------------------------------------------------------
bool gt_EvendimDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "ColonistBiodome"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/ED7C6113"));
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/772EED1C"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/62F449C1"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EvendimDeath_Init () {
    gt_EvendimDeath = TriggerCreate("gt_EvendimDeath_Func");
    TriggerAddEventUnitDied(gt_EvendimDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Khaza Dum Death
//--------------------------------------------------------------------------------------------------
bool gt_KhazaDumDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "JoriumStockpile"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/198BA1F2"));
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/216A0585"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/D4BD673F"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KhazaDumDeath_Init () {
    gt_KhazaDumDeath = TriggerCreate("gt_KhazaDumDeath_Func");
    TriggerAddEventUnitDied(gt_KhazaDumDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Erebor Death
//--------------------------------------------------------------------------------------------------
bool gt_EreborDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "PlatformStabilizer"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        if ((UnitIsAlive(gv_smaug) == true)) {
            UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/A177248E"));
            UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/726D8560"));
            UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/382F1365"));
        }
        else {
            UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/FC449491"));
            UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/0CA02152"));
            UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/2A1BD783"));
        }
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EreborDeath_Init () {
    gt_EreborDeath = TriggerCreate("gt_EreborDeath_Func");
    TriggerAddEventUnitDied(gt_EreborDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Iron Hills Death
//--------------------------------------------------------------------------------------------------
bool gt_IronHillsDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "MainCellBlock"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/F864C80F"));
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/92A11DA3"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/5EF14CAB"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IronHillsDeath_Init () {
    gt_IronHillsDeath = TriggerCreate("gt_IronHillsDeath_Func");
    TriggerAddEventUnitDied(gt_IronHillsDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dale Death
//--------------------------------------------------------------------------------------------------
bool gt_DaleDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Factory"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(699489457)), "PrepareToFlee", c_techCountCompleteOnly) == 1)) {
            UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/22B17628"));
            UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/6CCD75B0"));
            UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/C6488E97"));
        }
        else {
            UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/80DE7059"));
            UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/96ACED03"));
            UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/7E2F996C"));
        }
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DaleDeath_Init () {
    gt_DaleDeath = TriggerCreate("gt_DaleDeath_Func");
    TriggerAddEventUnitDied(gt_DaleDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blue Mountains Death
//--------------------------------------------------------------------------------------------------
bool gt_BlueMountainsDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "BioDomeCommand"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/31A7D903"));
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/D9F3F8CD"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/A6274B5A"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BlueMountainsDeath_Init () {
    gt_BlueMountainsDeath = TriggerCreate("gt_BlueMountainsDeath_Func");
    TriggerAddEventUnitDied(gt_BlueMountainsDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gardens Of Entwives Death
//--------------------------------------------------------------------------------------------------
bool gt_GardensOfEntwivesDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "TwilightCouncil"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/01E00B35"));
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/589CEA79"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/1F60376B"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GardensOfEntwivesDeath_Init () {
    gt_GardensOfEntwivesDeath = TriggerCreate("gt_GardensOfEntwivesDeath_Func");
    TriggerAddEventUnitDied(gt_GardensOfEntwivesDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amon Lanc Death
//--------------------------------------------------------------------------------------------------
bool gt_AmonLancDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "CyberneticsCore"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        if ((UnitIsAlive(UnitFromId(677747402)) == true)) {
            UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/E52D4A7A"));
            UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/3BADB2B2"));
            UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/FE0836F8"));
        }
        else {
            UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/E2213643"));
            UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/219DB30E"));
            UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/1A37679F"));
        }
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmonLancDeath_Init () {
    gt_AmonLancDeath = TriggerCreate("gt_AmonLancDeath_Func");
    TriggerAddEventUnitDied(gt_AmonLancDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Greenwood Death
//--------------------------------------------------------------------------------------------------
bool gt_GreenwoodDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "WarpGate"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/99FE45C1"));
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/BAE2B268"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/3F913CCE"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GreenwoodDeath_Init () {
    gt_GreenwoodDeath = TriggerCreate("gt_GreenwoodDeath_Func");
    TriggerAddEventUnitDied(gt_GreenwoodDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Greenwood Halls Death
//--------------------------------------------------------------------------------------------------
bool gt_GreenwoodHallsDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "ShieldBattery"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/08FD6A2C"));
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/85AFA428"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/3118BC51"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GreenwoodHallsDeath_Init () {
    gt_GreenwoodHallsDeath = TriggerCreate("gt_GreenwoodHallsDeath_Func");
    TriggerAddEventUnitDied(gt_GreenwoodHallsDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lothorien Death
//--------------------------------------------------------------------------------------------------
bool gt_LothorienDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Forge"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/A983C3E6"));
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/CEE0E2C6"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/2DF6DEE2"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LothorienDeath_Init () {
    gt_LothorienDeath = TriggerCreate("gt_LothorienDeath_Func");
    TriggerAddEventUnitDied(gt_LothorienDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Harlond Death
//--------------------------------------------------------------------------------------------------
bool gt_HarlondDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "TemplarArchive"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/49482B67"));
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/8C85B8EA"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/3F3BB1C3"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HarlondDeath_Init () {
    gt_HarlondDeath = TriggerCreate("gt_HarlondDeath_Func");
    TriggerAddEventUnitDied(gt_HarlondDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mithlond Death
//--------------------------------------------------------------------------------------------------
bool gt_MithlondDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Stargate"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/A8AA1D82"));
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/D8AEE64F"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/FB6FEB5A"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MithlondDeath_Init () {
    gt_MithlondDeath = TriggerCreate("gt_MithlondDeath_Func");
    TriggerAddEventUnitDied(gt_MithlondDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dol Amroth Death
//--------------------------------------------------------------------------------------------------
bool gt_DolAmrothDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "PlanetaryFortress"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/914FE414"));
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/CA006E8A"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/94955C94"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DolAmrothDeath_Init () {
    gt_DolAmrothDeath = TriggerCreate("gt_DolAmrothDeath_Func");
    TriggerAddEventUnitDied(gt_DolAmrothDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Erech Death
//--------------------------------------------------------------------------------------------------
bool gt_ErechDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Gateway"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1068266261)), "OathOfErech", c_techCountCompleteOnly) == 0)) {
            UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/F74E08B6"));
            UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/22527CA0"));
            UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/DC4ED3AE"));
        }
        else {
            UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/6F10DFA8"));
            UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/9E3E83D6"));
            UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/1C4CEE02"));
        }
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ErechDeath_Init () {
    gt_ErechDeath = TriggerCreate("gt_ErechDeath_Func");
    TriggerAddEventUnitDied(gt_ErechDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pinnath Gaelin Death
//--------------------------------------------------------------------------------------------------
bool gt_PinnathGaelinDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "RoboticsBay"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/E9CD3001"));
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/00BEA2CB"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/9883D936"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PinnathGaelinDeath_Init () {
    gt_PinnathGaelinDeath = TriggerCreate("gt_PinnathGaelinDeath_Func");
    TriggerAddEventUnitDied(gt_PinnathGaelinDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Anfalas Death
//--------------------------------------------------------------------------------------------------
bool gt_AnfalasDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "FusionReactor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/E1C47C59"));
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/4FA0F513"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/59B0AA3B"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AnfalasDeath_Init () {
    gt_AnfalasDeath = TriggerCreate("gt_AnfalasDeath_Func");
    TriggerAddEventUnitDied(gt_AnfalasDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lefnui Death
//--------------------------------------------------------------------------------------------------
bool gt_LefnuiDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "PowerCore"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/D8E532AA"));
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/0511A749"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/6232C0CB"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LefnuiDeath_Init () {
    gt_LefnuiDeath = TriggerCreate("gt_LefnuiDeath_Func");
    TriggerAddEventUnitDied(gt_LefnuiDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orthanc Death
//--------------------------------------------------------------------------------------------------
bool gt_OrthancDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "DarkShrine"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/657F9AD3"));
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/870F17C5"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/BF4DC7D0"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrthancDeath_Init () {
    gt_OrthancDeath = TriggerCreate("gt_OrthancDeath_Func");
    TriggerAddEventUnitDied(gt_OrthancDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Osgiliath Death
//--------------------------------------------------------------------------------------------------
bool gt_OsgiliathDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Nexus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1897128707)), "FortifyTheRiverOfAnduin", c_techCountCompleteOnly) == 0)) {
            UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/7EB68D45"));
            UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/C9AF28A9"));
            UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/70910277"));
        }
        else {
            UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/B9F29C58"));
            UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/E737037F"));
            UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/542C9A45"));
        }
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OsgiliathDeath_Init () {
    gt_OsgiliathDeath = TriggerCreate("gt_OsgiliathDeath_Func");
    TriggerAddEventUnitDied(gt_OsgiliathDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pelargir Death
//--------------------------------------------------------------------------------------------------
bool gt_PelargirDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Starport"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1897128707)), "ReinforcementsFromHarandor", c_techCountCompleteOnly) == 1)) {
            UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/5B76322D"));
            UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/AC53AB46"));
            UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/AFA58FF8"));
        }
        else {
            UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/88A4F4D4"));
            UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/DF6F4CE9"));
            UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/F7E37911"));
        }
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PelargirDeath_Init () {
    gt_PelargirDeath = TriggerCreate("gt_PelargirDeath_Func");
    TriggerAddEventUnitDied(gt_PelargirDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minas Anor Death
//--------------------------------------------------------------------------------------------------
bool gt_MinasAnorDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "AbandonedBuilding"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/3BF94677"));
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/2F5ABB4E"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/90435173"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MinasAnorDeath_Init () {
    gt_MinasAnorDeath = TriggerCreate("gt_MinasAnorDeath_Func");
    TriggerAddEventUnitDied(gt_MinasAnorDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lamedon Death
//--------------------------------------------------------------------------------------------------
bool gt_LamedonDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "UmojanLabGenerator"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/E6D85A71"));
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/8D33A2ED"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/BCDFCAB1"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LamedonDeath_Init () {
    gt_LamedonDeath = TriggerCreate("gt_LamedonDeath_Func");
    TriggerAddEventUnitDied(gt_LamedonDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dor-En-Ernil Death
//--------------------------------------------------------------------------------------------------
bool gt_DorEnErnilDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "MercCompound"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/7CA889EF"));
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/5ED728FF"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/54BAE116"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DorEnErnilDeath_Init () {
    gt_DorEnErnilDeath = TriggerCreate("gt_DorEnErnilDeath_Func");
    TriggerAddEventUnitDied(gt_DorEnErnilDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Free People Of Dorwinion Death
//--------------------------------------------------------------------------------------------------
bool gt_FreePeopleOfDorwinionDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "ColonistHut"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(2112326322)), "MigrateFromDorwinion", c_techCountCompleteOnly) == 1)) {
        }
        else if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(2112326322)), "FightForDorwinion", c_techCountCompleteOnly) == 1) && (UnitIsAlive(UnitFromId(1164482133)) == true)) {
            UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/5F466935"));
            UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/5FE49FD0"));
            UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/C883429D"));
        }
        else if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(2112326322)), "FightForDorwinion", c_techCountCompleteOnly) == 1) && (UnitIsAlive(UnitFromId(1164482133)) == false) && (UnitIsAlive(gv_goodDorwinion) == true)) {
            UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/7977992D"));
            UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/51F9979C"));
            UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/EBB6B1DE"));
        }
        else if (true) {
            UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/D247506D"));
            UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/FC607B64"));
            UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/8AE98CB9"));
        }
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FreePeopleOfDorwinionDeath_Init () {
    gt_FreePeopleOfDorwinionDeath = TriggerCreate("gt_FreePeopleOfDorwinionDeath_Func");
    TriggerAddEventUnitDied(gt_FreePeopleOfDorwinionDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HoardDale Death
//--------------------------------------------------------------------------------------------------
bool gt_HoardDaleDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "NydusNetwork"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/C56B8E86"));
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/FAC09E1B"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/7A43C3A4"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HoardDaleDeath_Init () {
    gt_HoardDaleDeath = TriggerCreate("gt_HoardDaleDeath_Func");
    TriggerAddEventUnitDied(gt_HoardDaleDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Trollshaws Death
//--------------------------------------------------------------------------------------------------
bool gt_TrollshawsDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Hatchery"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/28D9761C"));
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/5D74B761"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/BB33491F"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrollshawsDeath_Init () {
    gt_TrollshawsDeath = TriggerCreate("gt_TrollshawsDeath_Func");
    TriggerAddEventUnitDied(gt_TrollshawsDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dunland Death
//--------------------------------------------------------------------------------------------------
bool gt_DunlandDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Refinery"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/3377A16A"));
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/0C9790CB"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/1030224D"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DunlandDeath_Init () {
    gt_DunlandDeath = TriggerCreate("gt_DunlandDeath_Func");
    TriggerAddEventUnitDied(gt_DunlandDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: North Enedwaith Death
//--------------------------------------------------------------------------------------------------
bool gt_NorthEnedwaithDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "HomeSmall"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/FFCABE02"));
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/9444CBEA"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/55744875"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NorthEnedwaithDeath_Init () {
    gt_NorthEnedwaithDeath = TriggerCreate("gt_NorthEnedwaithDeath_Func");
    TriggerAddEventUnitDied(gt_NorthEnedwaithDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: South Enedwaith Death
//--------------------------------------------------------------------------------------------------
bool gt_SouthEnedwaithDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Bunker"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/E2832728"));
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/755637EB"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/580B0DFB"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SouthEnedwaithDeath_Init () {
    gt_SouthEnedwaithDeath = TriggerCreate("gt_SouthEnedwaithDeath_Func");
    TriggerAddEventUnitDied(gt_SouthEnedwaithDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Druwaith Death
//--------------------------------------------------------------------------------------------------
bool gt_DruwaithDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "LabTurret"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/3C7AC611"));
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/95A44609"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/3D6437F8"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DruwaithDeath_Init () {
    gt_DruwaithDeath = TriggerCreate("gt_DruwaithDeath_Func");
    TriggerAddEventUnitDied(gt_DruwaithDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dunharrow Death
//--------------------------------------------------------------------------------------------------
bool gt_DunharrowDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Hut"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/BA987BD0"));
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/61AE0D65"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/03E4E606"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DunharrowDeath_Init () {
    gt_DunharrowDeath = TriggerCreate("gt_DunharrowDeath_Func");
    TriggerAddEventUnitDied(gt_DunharrowDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Withered Heath death
//--------------------------------------------------------------------------------------------------
bool gt_WitheredHeathdeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "InfestationPit"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/AF474605"));
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/8703F7F9"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/F2969D7B"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WitheredHeathdeath_Init () {
    gt_WitheredHeathdeath = TriggerCreate("gt_WitheredHeathdeath_Func");
    TriggerAddEventUnitDied(gt_WitheredHeathdeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Goblin Town Death
//--------------------------------------------------------------------------------------------------
bool gt_GoblinTownDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "NydusCanal"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/D9FA3641"));
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/D42BE597"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/A7C6AD38"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GoblinTownDeath_Init () {
    gt_GoblinTownDeath = TriggerCreate("gt_GoblinTownDeath_Func");
    TriggerAddEventUnitDied(gt_GoblinTownDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mount Gundabad Death
//--------------------------------------------------------------------------------------------------
bool gt_MountGundabadDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "UltraliskCavern"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/E280088E"));
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/CFAD9613"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/BCA5E81A"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MountGundabadDeath_Init () {
    gt_MountGundabadDeath = TriggerCreate("gt_MountGundabadDeath_Func");
    TriggerAddEventUnitDied(gt_MountGundabadDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ettenmoors Death
//--------------------------------------------------------------------------------------------------
bool gt_EttenmoorsDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "RoachWarren"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/AB05C4B8"));
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/F700ADC3"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/461C740B"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EttenmoorsDeath_Init () {
    gt_EttenmoorsDeath = TriggerCreate("gt_EttenmoorsDeath_Func");
    TriggerAddEventUnitDied(gt_EttenmoorsDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Frozen plains Death
//--------------------------------------------------------------------------------------------------
bool gt_FrozenplainsDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Hive"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1492802972)), "EstablishAngmar", c_techCountCompleteOnly) == 0)) {
            UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/088577D3"));
            UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/2F73FCFA"));
            UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/6C3F1B31"));
        }
        else {
            UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/E8C9DCEE"));
            UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/CE6A78F9"));
            UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/7275F6AB"));
        }
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FrozenplainsDeath_Init () {
    gt_FrozenplainsDeath = TriggerCreate("gt_FrozenplainsDeath_Func");
    TriggerAddEventUnitDied(gt_FrozenplainsDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mount Gram Death
//--------------------------------------------------------------------------------------------------
bool gt_MountGramDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Virophage"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/7ECC94A5"));
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/F3C1C2C4"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/0F39FA86"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MountGramDeath_Init () {
    gt_MountGramDeath = TriggerCreate("gt_MountGramDeath_Func");
    TriggerAddEventUnitDied(gt_MountGramDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Barad Dur Death
//--------------------------------------------------------------------------------------------------
bool gt_BaradDurDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "GreaterSpire"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/3065A18B"));
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/2EDED907"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/383A33A5"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BaradDurDeath_Init () {
    gt_BaradDurDeath = TriggerCreate("gt_BaradDurDeath_Func");
    TriggerAddEventUnitDied(gt_BaradDurDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Udun Death
//--------------------------------------------------------------------------------------------------
bool gt_UdunDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SpawningPool"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/AA8E6218"));
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/5DA729E1"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/C6EFFF73"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UdunDeath_Init () {
    gt_UdunDeath = TriggerCreate("gt_UdunDeath_Func");
    TriggerAddEventUnitDied(gt_UdunDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nurn Death
//--------------------------------------------------------------------------------------------------
bool gt_NurnDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "CarrionNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/212EE05A"));
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/42E9CD20"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/F56BAD4F"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NurnDeath_Init () {
    gt_NurnDeath = TriggerCreate("gt_NurnDeath_Func");
    TriggerAddEventUnitDied(gt_NurnDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cirth Nurn Death
//--------------------------------------------------------------------------------------------------
bool gt_CirthNurnDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "BanelingNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/E9AD2327"));
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/9A985EC1"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/9F7B237A"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CirthNurnDeath_Init () {
    gt_CirthNurnDeath = TriggerCreate("gt_CirthNurnDeath_Func");
    TriggerAddEventUnitDied(gt_CirthNurnDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minas Morgul Death
//--------------------------------------------------------------------------------------------------
bool gt_MinasMorgulDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "PsiIndoctrinator"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/4F4FC160"));
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/EAF5093D"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/EDEB147C"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MinasMorgulDeath_Init () {
    gt_MinasMorgulDeath = TriggerCreate("gt_MinasMorgulDeath_Func");
    TriggerAddEventUnitDied(gt_MinasMorgulDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Southron Encampment Death
//--------------------------------------------------------------------------------------------------
bool gt_SouthronEncampmentDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "TechLab"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/21C8B391"));
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/80209CD6"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/6179D3BE"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SouthronEncampmentDeath_Init () {
    gt_SouthronEncampmentDeath = TriggerCreate("gt_SouthronEncampmentDeath_Func");
    TriggerAddEventUnitDied(gt_SouthronEncampmentDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rhun Death
//--------------------------------------------------------------------------------------------------
bool gt_RhunDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "TerrazineTank"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/47B8B81A"));
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/0B8621EF"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/59A94948"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RhunDeath_Init () {
    gt_RhunDeath = TriggerCreate("gt_RhunDeath_Func");
    TriggerAddEventUnitDied(gt_RhunDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rhovanion Death
//--------------------------------------------------------------------------------------------------
bool gt_RhovanionDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "HERCCompound"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/9B4E5E03"));
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/DF407981"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/904466AA"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RhovanionDeath_Init () {
    gt_RhovanionDeath = TriggerCreate("gt_RhovanionDeath_Func");
    TriggerAddEventUnitDied(gt_RhovanionDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dorwinion Death
//--------------------------------------------------------------------------------------------------
bool gt_DorwinionDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "FusionCore"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(2112326322)), "FightForDorwinion", c_techCountCompleteOnly) == 0)) {
            UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/5F23C3C4"));
            UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/D50FF5CA"));
            UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/5C167BC8"));
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(2112326322)), "FightForDorwinion", c_techCountCompleteOnly) == 1)) {
            UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/AC970008"));
            UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/9ED9D262"));
            UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/DAD597FE"));
        }

    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DorwinionDeath_Init () {
    gt_DorwinionDeath = TriggerCreate("gt_DorwinionDeath_Func");
    TriggerAddEventUnitDied(gt_DorwinionDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Carnen Death
//--------------------------------------------------------------------------------------------------
bool gt_CarnenDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "GhostAcademy"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/ECDAC982"));
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/144A37B6"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/72B1D87C"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CarnenDeath_Init () {
    gt_CarnenDeath = TriggerCreate("gt_CarnenDeath_Func");
    TriggerAddEventUnitDied(gt_CarnenDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Esgaroth Death
//--------------------------------------------------------------------------------------------------
bool gt_EsgarothDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "EngineeringBay"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(gv_evil, c_messageAreaSubtitle, StringExternal("Param/Value/1E00A4FF"));
        UIDisplayMessage(gv_good, c_messageAreaSubtitle, StringExternal("Param/Value/9E4C257F"));
        UIDisplayMessage(gv_spectators, c_messageAreaSubtitle, StringExternal("Param/Value/59801488"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EsgarothDeath_Init () {
    gt_EsgarothDeath = TriggerCreate("gt_EsgarothDeath_Func");
    TriggerAddEventUnitDied(gt_EsgarothDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mouth Of Sauron
//--------------------------------------------------------------------------------------------------
bool gt_MouthOfSauron_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Stetmann"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/86DC26C4"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MouthOfSauron_Init () {
    gt_MouthOfSauron = TriggerCreate("gt_MouthOfSauron_Func");
    TriggerAddEventUnitDied(gt_MouthOfSauron, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sauron
//--------------------------------------------------------------------------------------------------
bool gt_Sauron_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Maar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/760521CF"));
        SoundPlayForPlayer(SoundLink("SauronDying", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Sauron_Init () {
    gt_Sauron = TriggerCreate("gt_Sauron_Func");
    TriggerAddEventUnitDied(gt_Sauron, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Witch-King
//--------------------------------------------------------------------------------------------------
bool gt_WitchKing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "AlarakChampion"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        SoundPlayForPlayer(SoundLink("WitchKingDying", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A7E968AC"));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WitchKing_Init () {
    gt_WitchKing = TriggerCreate("gt_WitchKing_Func");
    TriggerAddEventUnitDied(gt_WitchKing, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Great Beast
//--------------------------------------------------------------------------------------------------
bool gt_GreatBeast_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Mitosaurus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6478BEA2"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GreatBeast_Init () {
    gt_GreatBeast = TriggerCreate("gt_GreatBeast_Func");
    TriggerAddEventUnitDied(gt_GreatBeast, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Khamul
//--------------------------------------------------------------------------------------------------
bool gt_Khamul_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Archon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/EE60A49D"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Khamul_Init () {
    gt_Khamul = TriggerCreate("gt_Khamul_Func");
    TriggerAddEventUnitDied(gt_Khamul, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: King Of Dorwinion
//--------------------------------------------------------------------------------------------------
bool gt_KingOfDorwinion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Dehaka"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A305C9C5"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KingOfDorwinion_Init () {
    gt_KingOfDorwinion = TriggerCreate("gt_KingOfDorwinion_Func");
    TriggerAddEventUnitDied(gt_KingOfDorwinion, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen Of Rhovanion
//--------------------------------------------------------------------------------------------------
bool gt_QueenOfRhovanion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "VorazunChampion"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/757BBDF5"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenOfRhovanion_Init () {
    gt_QueenOfRhovanion = TriggerCreate("gt_QueenOfRhovanion_Func");
    TriggerAddEventUnitDied(gt_QueenOfRhovanion, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Black Serpent
//--------------------------------------------------------------------------------------------------
bool gt_BlackSerpent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "MercHellion"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/EEE130E1"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BlackSerpent_Init () {
    gt_BlackSerpent = TriggerCreate("gt_BlackSerpent_Func");
    TriggerAddEventUnitDied(gt_BlackSerpent, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mootlord
//--------------------------------------------------------------------------------------------------
bool gt_Mootlord_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "TaurenSpaceMarine"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/DC871FF7"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Mootlord_Init () {
    gt_Mootlord = TriggerCreate("gt_Mootlord_Func");
    TriggerAddEventUnitDied(gt_Mootlord, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Commander Of Hoardale
//--------------------------------------------------------------------------------------------------
bool gt_CommanderOfHoardale_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "InfestedStukov"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A90A6B54"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CommanderOfHoardale_Init () {
    gt_CommanderOfHoardale = TriggerCreate("gt_CommanderOfHoardale_Func");
    TriggerAddEventUnitDied(gt_CommanderOfHoardale, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Adunabeth
//--------------------------------------------------------------------------------------------------
bool gt_Adunabeth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Nova"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/C8F19B89"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Adunabeth_Init () {
    gt_Adunabeth = TriggerCreate("gt_Adunabeth_Func");
    TriggerAddEventUnitDied(gt_Adunabeth, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chieftain Of Dunland
//--------------------------------------------------------------------------------------------------
bool gt_ChieftainOfDunland_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "MengskFirebat"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/470BC0E9"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChieftainOfDunland_Init () {
    gt_ChieftainOfDunland = TriggerCreate("gt_ChieftainOfDunland_Func");
    TriggerAddEventUnitDied(gt_ChieftainOfDunland, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drogoth
//--------------------------------------------------------------------------------------------------
bool gt_Drogoth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Terrorzor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/87CF56D7"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Drogoth_Init () {
    gt_Drogoth = TriggerCreate("gt_Drogoth_Func");
    TriggerAddEventUnitDied(gt_Drogoth, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Urgost
//--------------------------------------------------------------------------------------------------
bool gt_Urgost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Ravager"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/BD3828DF"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Urgost_Init () {
    gt_Urgost = TriggerCreate("gt_Urgost_Func");
    TriggerAddEventUnitDied(gt_Urgost, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Great Goblin
//--------------------------------------------------------------------------------------------------
bool gt_GreatGoblin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SwarmHostSplitB"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E12454A0"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GreatGoblin_Init () {
    gt_GreatGoblin = TriggerCreate("gt_GreatGoblin_Func");
    TriggerAddEventUnitDied(gt_GreatGoblin, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Azog
//--------------------------------------------------------------------------------------------------
bool gt_Azog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "ZaGara"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/C67A6DDC"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Azog_Init () {
    gt_Azog = TriggerCreate("gt_Azog_Func");
    TriggerAddEventUnitDied(gt_Azog, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lieutenant Of Hoarddale Death
//--------------------------------------------------------------------------------------------------
bool gt_LieutenantOfHoarddaleDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "RoachVile"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/47A87012"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LieutenantOfHoarddaleDeath_Init () {
    gt_LieutenantOfHoarddaleDeath = TriggerCreate("gt_LieutenantOfHoarddaleDeath_Func");
    TriggerEnable(gt_LieutenantOfHoarddaleDeath, false);
    TriggerAddEventUnitDied(gt_LieutenantOfHoarddaleDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scorba Death
//--------------------------------------------------------------------------------------------------
bool gt_ScorbaDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "DevourerMP"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/010B6404"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScorbaDeath_Init () {
    gt_ScorbaDeath = TriggerCreate("gt_ScorbaDeath_Func");
    TriggerEnable(gt_ScorbaDeath, false);
    TriggerAddEventUnitDied(gt_ScorbaDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Broggau Death
//--------------------------------------------------------------------------------------------------
bool gt_BroggauDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "DuskWing"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/947F9470"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BroggauDeath_Init () {
    gt_BroggauDeath = TriggerCreate("gt_BroggauDeath_Func");
    TriggerEnable(gt_BroggauDeath, false);
    TriggerAddEventUnitDied(gt_BroggauDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bolg Death
//--------------------------------------------------------------------------------------------------
bool gt_BolgDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "HotSTorrasque"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/2AE6FCFD"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BolgDeath_Init () {
    gt_BolgDeath = TriggerCreate("gt_BolgDeath_Func");
    TriggerEnable(gt_BolgDeath, false);
    TriggerAddEventUnitDied(gt_BolgDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Smaug Death
//--------------------------------------------------------------------------------------------------
bool gt_SmaugDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "PrimalMutalisk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/872385D6"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SmaugDeath_Init () {
    gt_SmaugDeath = TriggerCreate("gt_SmaugDeath_Func");
    TriggerEnable(gt_SmaugDeath, false);
    TriggerAddEventUnitDied(gt_SmaugDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Morgoth Death
//--------------------------------------------------------------------------------------------------
bool gt_MorgothDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "HybridBehemoth"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/3940AC5C"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MorgothDeath_Init () {
    gt_MorgothDeath = TriggerCreate("gt_MorgothDeath_Func");
    TriggerEnable(gt_MorgothDeath, false);
    TriggerAddEventUnitDied(gt_MorgothDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Isildur
//--------------------------------------------------------------------------------------------------
bool gt_Isildur_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "HERC"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/AE0D8568"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Isildur_Init () {
    gt_Isildur = TriggerCreate("gt_Isildur_Func");
    TriggerAddEventUnitDied(gt_Isildur, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Anarion
//--------------------------------------------------------------------------------------------------
bool gt_Anarion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "RaynorCommando"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/70D8061B"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Anarion_Init () {
    gt_Anarion = TriggerCreate("gt_Anarion_Func");
    TriggerAddEventUnitDied(gt_Anarion, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cemendur
//--------------------------------------------------------------------------------------------------
bool gt_Cemendur_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "TychusCommando"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/571CAE67"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Cemendur_Init () {
    gt_Cemendur = TriggerCreate("gt_Cemendur_Func");
    TriggerAddEventUnitDied(gt_Cemendur, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Meneldil
//--------------------------------------------------------------------------------------------------
bool gt_Meneldil_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "MothershipAiur06"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F7FB6453"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Meneldil_Init () {
    gt_Meneldil = TriggerCreate("gt_Meneldil_Func");
    TriggerAddEventUnitDied(gt_Meneldil, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Elendur
//--------------------------------------------------------------------------------------------------
bool gt_Elendur_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "ScienceVessel"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/165ED3D0"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Elendur_Init () {
    gt_Elendur = TriggerCreate("gt_Elendur_Func");
    TriggerAddEventUnitDied(gt_Elendur, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ciryon
//--------------------------------------------------------------------------------------------------
bool gt_Ciryon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "DarkTemplarAiur"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/FA6663A8"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ciryon_Init () {
    gt_Ciryon = TriggerCreate("gt_Ciryon_Func");
    TriggerAddEventUnitDied(gt_Ciryon, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aratan
//--------------------------------------------------------------------------------------------------
bool gt_Aratan_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "MengskGoliath"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/05C2FBF3"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Aratan_Init () {
    gt_Aratan = TriggerCreate("gt_Aratan_Func");
    TriggerAddEventUnitDied(gt_Aratan, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Elendil
//--------------------------------------------------------------------------------------------------
bool gt_Elendil_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SentryPurifier"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/2D3C112B"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Elendil_Init () {
    gt_Elendil = TriggerCreate("gt_Elendil_Func");
    TriggerAddEventUnitDied(gt_Elendil, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gil-Gilad
//--------------------------------------------------------------------------------------------------
bool gt_GilGilad_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Zeratul"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A13A7977"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GilGilad_Init () {
    gt_GilGilad = TriggerCreate("gt_GilGilad_Func");
    TriggerAddEventUnitDied(gt_GilGilad, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amdir
//--------------------------------------------------------------------------------------------------
bool gt_Amdir_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "KaraxChampion"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D9E7149E"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Amdir_Init () {
    gt_Amdir = TriggerCreate("gt_Amdir_Func");
    TriggerAddEventUnitDied(gt_Amdir, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amroth
//--------------------------------------------------------------------------------------------------
bool gt_Amroth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Talis"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/3FB62E1F"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Amroth_Init () {
    gt_Amroth = TriggerCreate("gt_Amroth_Func");
    TriggerAddEventUnitDied(gt_Amroth, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Oropher
//--------------------------------------------------------------------------------------------------
bool gt_Oropher_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Urun"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/848EEC93"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Oropher_Init () {
    gt_Oropher = TriggerCreate("gt_Oropher_Func");
    TriggerAddEventUnitDied(gt_Oropher, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Durin IV
//--------------------------------------------------------------------------------------------------
bool gt_DurinIV_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "FenixChampion"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/8C4239E9"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DurinIV_Init () {
    gt_DurinIV = TriggerCreate("gt_DurinIV_Func");
    TriggerAddEventUnitDied(gt_DurinIV, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lord Of Erebor
//--------------------------------------------------------------------------------------------------
bool gt_LordOfErebor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Warbot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/BCB9CF9D"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LordOfErebor_Init () {
    gt_LordOfErebor = TriggerCreate("gt_LordOfErebor_Func");
    TriggerAddEventUnitDied(gt_LordOfErebor, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Guildmaster Of Blue Mountains
//--------------------------------------------------------------------------------------------------
bool gt_GuildmasterOfBlueMountains_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Swann"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/8AA16AF3"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GuildmasterOfBlueMountains_Init () {
    gt_GuildmasterOfBlueMountains = TriggerCreate("gt_GuildmasterOfBlueMountains_Func");
    TriggerAddEventUnitDied(gt_GuildmasterOfBlueMountains, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Steward Of Gondor
//--------------------------------------------------------------------------------------------------
bool gt_StewardOfGondor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "MengskSiegeTank"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/FCF9444F"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StewardOfGondor_Init () {
    gt_StewardOfGondor = TriggerCreate("gt_StewardOfGondor_Func");
    TriggerAddEventUnitDied(gt_StewardOfGondor, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Valandil
//--------------------------------------------------------------------------------------------------
bool gt_Valandil_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Raven"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/21B772EB"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Valandil_Init () {
    gt_Valandil = TriggerCreate("gt_Valandil_Func");
    TriggerAddEventUnitDied(gt_Valandil, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: E??rendil
//--------------------------------------------------------------------------------------------------
bool gt_EC3A4rendil_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Tosh"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/18B0C5D8"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EC3A4rendil_Init () {
    gt_EC3A4rendil = TriggerCreate("gt_EC3A4rendil_Func");
    TriggerAddEventUnitDied(gt_EC3A4rendil, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orophin Death
//--------------------------------------------------------------------------------------------------
bool gt_OrophinDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "MengskReaper"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F49DFC31"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrophinDeath_Init () {
    gt_OrophinDeath = TriggerCreate("gt_OrophinDeath_Func");
    TriggerEnable(gt_OrophinDeath, false);
    TriggerAddEventUnitDied(gt_OrophinDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cirdan Death
//--------------------------------------------------------------------------------------------------
bool gt_CirdanDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Tassadar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/34A98F8F"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CirdanDeath_Init () {
    gt_CirdanDeath = TriggerCreate("gt_CirdanDeath_Func");
    TriggerEnable(gt_CirdanDeath, false);
    TriggerAddEventUnitDied(gt_CirdanDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tulkas Death
//--------------------------------------------------------------------------------------------------
bool gt_TulkasDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "TychusChaingun"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/3AD7DC5F"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TulkasDeath_Init () {
    gt_TulkasDeath = TriggerCreate("gt_TulkasDeath_Func");
    TriggerEnable(gt_TulkasDeath, false);
    TriggerAddEventUnitDied(gt_TulkasDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aule Death
//--------------------------------------------------------------------------------------------------
bool gt_AuleDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "StoneZealot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/2D9E0762"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AuleDeath_Init () {
    gt_AuleDeath = TriggerCreate("gt_AuleDeath_Func");
    TriggerEnable(gt_AuleDeath, false);
    TriggerAddEventUnitDied(gt_AuleDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ulmo Death
//--------------------------------------------------------------------------------------------------
bool gt_UlmoDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Raynor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E265F228"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UlmoDeath_Init () {
    gt_UlmoDeath = TriggerCreate("gt_UlmoDeath_Func");
    TriggerEnable(gt_UlmoDeath, false);
    TriggerAddEventUnitDied(gt_UlmoDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Manwe death
//--------------------------------------------------------------------------------------------------
bool gt_Manwedeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "MengskThor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/18A05E43"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Manwedeath_Init () {
    gt_Manwedeath = TriggerCreate("gt_Manwedeath_Func");
    TriggerEnable(gt_Manwedeath, false);
    TriggerAddEventUnitDied(gt_Manwedeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yavanna Death
//--------------------------------------------------------------------------------------------------
bool gt_YavannaDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "KerriganEpilogue03"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), Color(100.00, 0.00, 0.00), 8.0, 270.0);
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) != UnitGetOwner(EventUnit()))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/CDD5ACB0"));
        SoundPlayForPlayer(SoundLink("HeroDead", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YavannaDeath_Init () {
    gt_YavannaDeath = TriggerCreate("gt_YavannaDeath_Func");
    TriggerEnable(gt_YavannaDeath, false);
    TriggerAddEventUnitDied(gt_YavannaDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ring mechanic 2
//--------------------------------------------------------------------------------------------------
bool gt_Ringmechanic2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libNtve_gf_KillingUnit()) == "KerriganGhostLabUnarmed")) {
        UnitBehaviorAdd(libNtve_gf_KillingUnit(), "OneRing", UnitFromId(856187551), 1);
        gv_ringBearer = libNtve_gf_KillingUnit();
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/B8174036"));
        libNtve_gf_KillDoodadsInRegion(RegionFromId(60), null);
    }
    else if ((UnitGetType(libNtve_gf_KillingUnit()) == "HERC")) {
        UnitBehaviorAdd(libNtve_gf_KillingUnit(), "OneRing", UnitFromId(856187551), 1);
        gv_ringBearer = libNtve_gf_KillingUnit();
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/BE8F619C"));
    }
    else if ((UnitGetType(EventUnit()) == "HERC")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F0C37BD9"));
    }
    else if (true) {
        UnitBehaviorAdd(libNtve_gf_KillingUnit(), "OneRing", UnitFromId(856187551), 1);
        gv_ringBearer = libNtve_gf_KillingUnit();
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/C4E56E93") + UnitGetName(libNtve_gf_KillingUnit())));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ringmechanic2_Init () {
    gt_Ringmechanic2 = TriggerCreate("gt_Ringmechanic2_Func");
    TriggerAddEventUnitDied(gt_Ringmechanic2, UnitRefFromVariable("gv_ringBearer"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn on -Fund
//--------------------------------------------------------------------------------------------------
bool gt_TurnonFund_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_FundCommand, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnonFund_Init () {
    gt_TurnonFund = TriggerCreate("gt_TurnonFund_Func");
    TriggerAddEventTimeElapsed(gt_TurnonFund, 600.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fund Command
//--------------------------------------------------------------------------------------------------
bool gt_FundCommand_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_transferAmount;
    string lv_faction;

    // Automatic Variable Declarations
    string autoFAAC1C75_val;
    string auto50BC83CE_val;

    // Variable Initialization
    lv_faction = "";

    // Conditions
    if (testConds) {
        if (!((StringSub(EventChatMessage(false), 1, 5) == "-fund"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_faction = StringSub(EventChatMessage(false), 7, 8);
    if ((StringCompare("all", StringSub(EventChatMessage(false), 10, StringLength(EventChatMessage(false))), c_stringCase) == 0)) {
        lv_transferAmount = PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals);
    }
    else {
        lv_transferAmount = StringToInt(StringSub(EventChatMessage(false), 10, StringLength(EventChatMessage(false))));
    }
    lv_transferAmount = (lv_transferAmount - ModI(lv_transferAmount, 25));
    if ((PlayerGroupHasPlayer(gv_good, EventPlayer()) == true)) {
        if ((lv_transferAmount > 0) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_transferAmount)) {
            auto50BC83CE_val = lv_faction;
            if (auto50BC83CE_val == "ar") {
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_transferAmount);
                PlayerModifyPropertyInt(gv_itemArnor, c_playerPropMinerals, c_playerPropOperAdd, lv_transferAmount);
            }
            else if (auto50BC83CE_val == "ev") {
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_transferAmount);
                PlayerModifyPropertyInt(gv_itemElves, c_playerPropMinerals, c_playerPropOperAdd, lv_transferAmount);
            }
            else if (auto50BC83CE_val == "dv") {
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_transferAmount);
                PlayerModifyPropertyInt(gv_itemDwarves, c_playerPropMinerals, c_playerPropOperAdd, lv_transferAmount);
            }
            else if (auto50BC83CE_val == "wg") {
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_transferAmount);
                PlayerModifyPropertyInt(gv_itemWestGondor, c_playerPropMinerals, c_playerPropOperAdd, lv_transferAmount);
            }
            else if (auto50BC83CE_val == "eg") {
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_transferAmount);
                PlayerModifyPropertyInt(gv_itemEastGondor, c_playerPropMinerals, c_playerPropOperAdd, lv_transferAmount);
            }
            else if (auto50BC83CE_val == "EG") {
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_transferAmount);
                PlayerModifyPropertyInt(gv_itemEastGondor, c_playerPropMinerals, c_playerPropOperAdd, lv_transferAmount);
            }
            else {
            }
        }

    }
    else {
        if ((PlayerGroupHasPlayer(gv_evil, EventPlayer()) == true)) {
            if ((lv_transferAmount > 0) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_transferAmount)) {
                autoFAAC1C75_val = lv_faction;
                if (autoFAAC1C75_val == "md") {
                    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_transferAmount);
                    PlayerModifyPropertyInt(gv_itemMordor, c_playerPropMinerals, c_playerPropOperAdd, lv_transferAmount);
                }
                else if (autoFAAC1C75_val == "mm") {
                    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_transferAmount);
                    PlayerModifyPropertyInt(gv_itemMistyMountains, c_playerPropMinerals, c_playerPropOperAdd, lv_transferAmount);
                }
                else if (autoFAAC1C75_val == "em") {
                    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_transferAmount);
                    PlayerModifyPropertyInt(gv_itemEvilMen, c_playerPropMinerals, c_playerPropOperAdd, lv_transferAmount);
                }
                else if (autoFAAC1C75_val == "er") {
                    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_transferAmount);
                    PlayerModifyPropertyInt(gv_ittemEasterlings, c_playerPropMinerals, c_playerPropOperAdd, lv_transferAmount);
                }
                else {
                }
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FundCommand_Init () {
    gt_FundCommand = TriggerCreate("gt_FundCommand_Func");
    TriggerEnable(gt_FundCommand, false);
    TriggerAddEventChatMessage(gt_FundCommand, c_playerAny, "-fund", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minerals cheat
//--------------------------------------------------------------------------------------------------
bool gt_Mineralscheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((AbsI(gv_playernumber) <= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 100000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Mineralscheat_Init () {
    gt_Mineralscheat = TriggerCreate("gt_Mineralscheat_Func");
    TriggerAddEventChatMessage(gt_Mineralscheat, c_playerAny, "-Minerals", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gas cheat
//--------------------------------------------------------------------------------------------------
bool gt_Gascheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((AbsI(gv_playernumber) <= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 100);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gascheat_Init () {
    gt_Gascheat = TriggerCreate("gt_Gascheat_Func");
    TriggerAddEventChatMessage(gt_Gascheat, c_playerAny, "-Gas", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dev unit
//--------------------------------------------------------------------------------------------------
bool gt_Devunit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((AbsI(gv_playernumber) <= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingCarbot", 0, EventPlayer(), PointFromId(940233963));
    CameraPan(EventPlayer(), RegionGetCenter(RegionFromId(12)), 2.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Devunit_Init () {
    gt_Devunit = TriggerCreate("gt_Devunit_Func");
    TriggerAddEventChatMessage(gt_Devunit, c_playerAny, "-devunit", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Passive
//--------------------------------------------------------------------------------------------------
bool gt_Passive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/0AB3923E"));
    gv_aIBoolean = false;
    TriggerEnable(gt_Aichecker, false);
    TriggerEnable(gt_RetreatHeroesWestGondor, false);
    TriggerEnable(gt_RetreatHeroesMordorold, false);
    TriggerEnable(gt_RetreatHeroesMisty, false);
    TriggerEnable(gt_RetreatHeroesEvilMen, false);
    TriggerEnable(gt_RetreatHeroesElves, false);
    TriggerEnable(gt_RetreatHeroesEasterlings, false);
    TriggerEnable(gt_RetreatHeroesEastGondor, false);
    TriggerEnable(gt_RetreatHeroesDwarves, false);
    TriggerEnable(gt_RetreatHeroesArnor, false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Passive_Init () {
    gt_Passive = TriggerCreate("gt_Passive_Func");
    TriggerAddEventChatMessage(gt_Passive, c_playerAny, "-passive", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable passive
//--------------------------------------------------------------------------------------------------
bool gt_Disablepassive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(30.0, c_timeGame);
    TriggerEnable(gt_Passive, false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Disablepassive_Init () {
    gt_Disablepassive = TriggerCreate("gt_Disablepassive_Func");
    TriggerAddEventMapInit(gt_Disablepassive);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Normal chat
//--------------------------------------------------------------------------------------------------
bool gt_Normalchat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/CC2C1E7F"));
    TriggerEnable(gt_AInormaldifficulty, true);
    TriggerExecute(gt_AIenableteleport, true, false);
    TriggerEnable(gt_Hardchat, false);
    TriggerEnable(gt_Brutalchat, false);
    TriggerEnable(gt_Nightmarechat, false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Normalchat_Init () {
    gt_Normalchat = TriggerCreate("gt_Normalchat_Func");
    TriggerAddEventChatMessage(gt_Normalchat, c_playerAny, "-normal", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hard chat
//--------------------------------------------------------------------------------------------------
bool gt_Hardchat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/25AA9B47"));
    TriggerEnable(gt_AIHarddifficulty, true);
    TriggerExecute(gt_AIenableteleport, true, false);
    TriggerEnable(gt_Normalchat, false);
    TriggerEnable(gt_Brutalchat, false);
    TriggerEnable(gt_Nightmarechat, false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hardchat_Init () {
    gt_Hardchat = TriggerCreate("gt_Hardchat_Func");
    TriggerAddEventChatMessage(gt_Hardchat, c_playerAny, "-hard", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brutal chat
//--------------------------------------------------------------------------------------------------
bool gt_Brutalchat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/1EB92BF9"));
    TriggerEnable(gt_AIBrutalDifficulty, true);
    TriggerExecute(gt_AIenableteleport, true, false);
    TriggerEnable(gt_Normalchat, false);
    TriggerEnable(gt_Hardchat, false);
    TriggerEnable(gt_Nightmarechat, false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Brutalchat_Init () {
    gt_Brutalchat = TriggerCreate("gt_Brutalchat_Func");
    TriggerAddEventChatMessage(gt_Brutalchat, c_playerAny, "-brutal", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nightmare chat
//--------------------------------------------------------------------------------------------------
bool gt_Nightmarechat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/76DAC396"));
    TriggerEnable(gt_AINightmareDifficulty, true);
    TriggerExecute(gt_AIenableteleport, true, false);
    TriggerEnable(gt_Normalchat, false);
    TriggerEnable(gt_Hardchat, false);
    TriggerEnable(gt_Brutalchat, false);
    TriggerExecute(gt_Morgothintiilizatation, true, false);
    TriggerExecute(gt_MorgothSoundtrack, true, false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Nightmarechat_Init () {
    gt_Nightmarechat = TriggerCreate("gt_Nightmarechat_Func");
    TriggerAddEventChatMessage(gt_Nightmarechat, c_playerAny, "-Nightmare", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defense Select
//--------------------------------------------------------------------------------------------------
bool gt_DefenseSelect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_tempgroup;

    // Automatic Variable Declarations
    unitgroup auto4FFDD8DF_g;
    int auto4FFDD8DF_u;
    unit auto4FFDD8DF_var;
    string autoDCE57324_val;

    // Variable Initialization
    lv_tempgroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_recentlyDSD[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_recentlyDSD[EventPlayer()] = true;
    UnitClearSelection(EventPlayer());
    auto4FFDD8DF_g = UnitGroupAlliance(EventPlayer(), c_unitAllianceAlly, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4FFDD8DF_u = UnitGroupCount(auto4FFDD8DF_g, c_unitCountAll);
    for (;; auto4FFDD8DF_u -= 1) {
        auto4FFDD8DF_var = UnitGroupUnitFromEnd(auto4FFDD8DF_g, auto4FFDD8DF_u);
        if (auto4FFDD8DF_var == null) { break; }
        if ((UnitGetOwner(auto4FFDD8DF_var) == EventPlayer())) {
            autoDCE57324_val = UnitGetType(auto4FFDD8DF_var);
            if (autoDCE57324_val == "PhotonCannon") {
                UnitGroupAdd(lv_tempgroup, auto4FFDD8DF_var);
            }
            else {
            }
        }

    }
    UnitGroupSelect(lv_tempgroup, EventPlayer(), true);
    Wait(3.0, c_timeGame);
    gv_recentlyDSD[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefenseSelect_Init () {
    gt_DefenseSelect = TriggerCreate("gt_DefenseSelect_Func");
    TriggerAddEventChatMessage(gt_DefenseSelect, c_playerAny, "-ds", true);
    TriggerAddEventChatMessage(gt_DefenseSelect, c_playerAny, "-Ds", true);
    TriggerAddEventChatMessage(gt_DefenseSelect, c_playerAny, "-DS", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StartUp
//--------------------------------------------------------------------------------------------------
bool gt_StartUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartUp_Init () {
    gt_StartUp = TriggerCreate("gt_StartUp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leveling
//--------------------------------------------------------------------------------------------------
bool gt_Leveling_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6683CF9A_g;
    int auto6683CF9A_u;
    unit auto6683CF9A_var;
    unitgroup autoEFE55259_g;
    int autoEFE55259_u;
    unit autoEFE55259_var;
    unitgroup auto5C157BB3_g;
    int auto5C157BB3_u;
    unit auto5C157BB3_var;
    unitgroup auto5BA6C773_g;
    int auto5BA6C773_u;
    unit auto5BA6C773_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) != UnitGetOwner(libNtve_gf_KillingUnit()))) {
        if (((UnitGetType(EventUnit()) == "PhotonCannon") || (UnitGetType(EventUnit()) == "SentryGun"))) {
            UnitSetPropertyFixed(libNtve_gf_KillingUnit(), c_unitPropXP, (UnitXPTotal(libNtve_gf_KillingUnit()) + 50.0));
            auto5BA6C773_g = UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 16.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto5BA6C773_u = UnitGroupCount(auto5BA6C773_g, c_unitCountAll);
            for (;; auto5BA6C773_u -= 1) {
                auto5BA6C773_var = UnitGroupUnitFromEnd(auto5BA6C773_g, auto5BA6C773_u);
                if (auto5BA6C773_var == null) { break; }
                if ((auto5BA6C773_var != libNtve_gf_KillingUnit())) {
                    UnitSetPropertyFixed(auto5BA6C773_var, c_unitPropXP, (UnitXPTotal(auto5BA6C773_var) + 25.0));
                }

            }
        }
        else {
            if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true)) {
                UnitSetPropertyFixed(libNtve_gf_KillingUnit(), c_unitPropXP, (UnitXPTotal(libNtve_gf_KillingUnit()) + 300.0));
                auto5C157BB3_g = UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 16.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto5C157BB3_u = UnitGroupCount(auto5C157BB3_g, c_unitCountAll);
                for (;; auto5C157BB3_u -= 1) {
                    auto5C157BB3_var = UnitGroupUnitFromEnd(auto5C157BB3_g, auto5C157BB3_u);
                    if (auto5C157BB3_var == null) { break; }
                    if ((auto5C157BB3_var != libNtve_gf_KillingUnit())) {
                        UnitSetPropertyFixed(auto5C157BB3_var, c_unitPropXP, (UnitXPTotal(auto5C157BB3_var) + 150.0));
                    }

                }
            }
            else {
                if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true)) {
                    UnitSetPropertyFixed(libNtve_gf_KillingUnit(), c_unitPropXP, (UnitXPTotal(libNtve_gf_KillingUnit()) + 300.0));
                    autoEFE55259_g = UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 16.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    autoEFE55259_u = UnitGroupCount(autoEFE55259_g, c_unitCountAll);
                    for (;; autoEFE55259_u -= 1) {
                        autoEFE55259_var = UnitGroupUnitFromEnd(autoEFE55259_g, autoEFE55259_u);
                        if (autoEFE55259_var == null) { break; }
                        if ((autoEFE55259_var != libNtve_gf_KillingUnit())) {
                            UnitSetPropertyFixed(autoEFE55259_var, c_unitPropXP, (UnitXPTotal(autoEFE55259_var) + 150.0));
                        }

                    }
                }
                else {
                    if (true) {
                        UnitSetPropertyFixed(libNtve_gf_KillingUnit(), c_unitPropXP, (UnitXPTotal(libNtve_gf_KillingUnit()) + 6.0));
                        auto6683CF9A_g = UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 16.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                        auto6683CF9A_u = UnitGroupCount(auto6683CF9A_g, c_unitCountAll);
                        for (;; auto6683CF9A_u -= 1) {
                            auto6683CF9A_var = UnitGroupUnitFromEnd(auto6683CF9A_g, auto6683CF9A_u);
                            if (auto6683CF9A_var == null) { break; }
                            if ((auto6683CF9A_var != libNtve_gf_KillingUnit())) {
                                UnitSetPropertyFixed(auto6683CF9A_var, c_unitPropXP, (UnitXPTotal(auto6683CF9A_var) + 3.0));
                            }

                        }
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Leveling_Init () {
    gt_Leveling = TriggerCreate("gt_Leveling_Func");
    TriggerAddEventUnitDied(gt_Leveling, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit group all units
//--------------------------------------------------------------------------------------------------
bool gt_Unitgroupallunits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE134ADBF_g;
    int autoE134ADBF_u;
    unit autoE134ADBF_var;
    unitgroup autoA1FDFACA_g;
    int autoA1FDFACA_u;
    unit autoA1FDFACA_var;
    unitgroup autoE2CFC185_g;
    int autoE2CFC185_u;
    unit autoE2CFC185_var;
    unitgroup auto8982E3D7_g;
    int auto8982E3D7_u;
    unit auto8982E3D7_var;
    unitgroup auto48EA07AA_g;
    int auto48EA07AA_u;
    unit auto48EA07AA_var;
    unitgroup auto1093291A_g;
    int auto1093291A_u;
    unit auto1093291A_var;
    unitgroup auto244F1F71_g;
    int auto244F1F71_u;
    unit auto244F1F71_var;
    unitgroup autoBFA8E1A9_g;
    int autoBFA8E1A9_u;
    unit autoBFA8E1A9_var;
    unitgroup auto0F41D72A_g;
    int auto0F41D72A_u;
    unit auto0F41D72A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoE134ADBF_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE134ADBF_u = UnitGroupCount(autoE134ADBF_g, c_unitCountAll);
    for (;; autoE134ADBF_u -= 1) {
        autoE134ADBF_var = UnitGroupUnitFromEnd(autoE134ADBF_g, autoE134ADBF_u);
        if (autoE134ADBF_var == null) { break; }
        UnitGroupAdd(gv_eastgondorPlayer, autoE134ADBF_var);
    }
    autoA1FDFACA_g = UnitGroup(null, 2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA1FDFACA_u = UnitGroupCount(autoA1FDFACA_g, c_unitCountAll);
    for (;; autoA1FDFACA_u -= 1) {
        autoA1FDFACA_var = UnitGroupUnitFromEnd(autoA1FDFACA_g, autoA1FDFACA_u);
        if (autoA1FDFACA_var == null) { break; }
        UnitGroupAdd(gv_elvesPlayer, autoA1FDFACA_var);
    }
    autoE2CFC185_g = UnitGroup(null, 3, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE2CFC185_u = UnitGroupCount(autoE2CFC185_g, c_unitCountAll);
    for (;; autoE2CFC185_u -= 1) {
        autoE2CFC185_var = UnitGroupUnitFromEnd(autoE2CFC185_g, autoE2CFC185_u);
        if (autoE2CFC185_var == null) { break; }
        UnitGroupAdd(gv_arnorPlayer, autoE2CFC185_var);
    }
    auto8982E3D7_g = UnitGroup(null, 4, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8982E3D7_u = UnitGroupCount(auto8982E3D7_g, c_unitCountAll);
    for (;; auto8982E3D7_u -= 1) {
        auto8982E3D7_var = UnitGroupUnitFromEnd(auto8982E3D7_g, auto8982E3D7_u);
        if (auto8982E3D7_var == null) { break; }
        UnitGroupAdd(gv_westGondorPlayer, auto8982E3D7_var);
    }
    auto48EA07AA_g = UnitGroup(null, 5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto48EA07AA_u = UnitGroupCount(auto48EA07AA_g, c_unitCountAll);
    for (;; auto48EA07AA_u -= 1) {
        auto48EA07AA_var = UnitGroupUnitFromEnd(auto48EA07AA_g, auto48EA07AA_u);
        if (auto48EA07AA_var == null) { break; }
        UnitGroupAdd(gv_mordorPlayer, auto48EA07AA_var);
    }
    auto1093291A_g = UnitGroup(null, 6, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1093291A_u = UnitGroupCount(auto1093291A_g, c_unitCountAll);
    for (;; auto1093291A_u -= 1) {
        auto1093291A_var = UnitGroupUnitFromEnd(auto1093291A_g, auto1093291A_u);
        if (auto1093291A_var == null) { break; }
        UnitGroupAdd(gv_evilmenPlayer, auto1093291A_var);
    }
    auto244F1F71_g = UnitGroup(null, 7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto244F1F71_u = UnitGroupCount(auto244F1F71_g, c_unitCountAll);
    for (;; auto244F1F71_u -= 1) {
        auto244F1F71_var = UnitGroupUnitFromEnd(auto244F1F71_g, auto244F1F71_u);
        if (auto244F1F71_var == null) { break; }
        UnitGroupAdd(gv_mistyMountainsPlayer, auto244F1F71_var);
    }
    autoBFA8E1A9_g = UnitGroup(null, 8, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBFA8E1A9_u = UnitGroupCount(autoBFA8E1A9_g, c_unitCountAll);
    for (;; autoBFA8E1A9_u -= 1) {
        autoBFA8E1A9_var = UnitGroupUnitFromEnd(autoBFA8E1A9_g, autoBFA8E1A9_u);
        if (autoBFA8E1A9_var == null) { break; }
        UnitGroupAdd(gv_dwarvesPlayer, autoBFA8E1A9_var);
    }
    auto0F41D72A_g = UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0F41D72A_u = UnitGroupCount(auto0F41D72A_g, c_unitCountAll);
    for (;; auto0F41D72A_u -= 1) {
        auto0F41D72A_var = UnitGroupUnitFromEnd(auto0F41D72A_g, auto0F41D72A_u);
        if (auto0F41D72A_var == null) { break; }
        UnitGroupAdd(gv_easterlingsPlayer, auto0F41D72A_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Unitgroupallunits_Init () {
    gt_Unitgroupallunits = TriggerCreate("gt_Unitgroupallunits_Func");
    TriggerAddEventMapInit(gt_Unitgroupallunits);
}

//--------------------------------------------------------------------------------------------------
// Trigger: All Neutral
//--------------------------------------------------------------------------------------------------
bool gt_AllNeutral_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto560359B3_g;
    int auto560359B3_u;
    unit auto560359B3_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto560359B3_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto560359B3_u = UnitGroupCount(auto560359B3_g, c_unitCountAll);
    for (;; auto560359B3_u -= 1) {
        auto560359B3_var = UnitGroupUnitFromEnd(auto560359B3_g, auto560359B3_u);
        if (auto560359B3_var == null) { break; }
        UnitSetOwner(auto560359B3_var, 0, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AllNeutral_Init () {
    gt_AllNeutral = TriggerCreate("gt_AllNeutral_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main Player Asssignment
//--------------------------------------------------------------------------------------------------
bool gt_MainPlayerAsssignment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoA53E81EE_ae = 15;
    int autoA53E81EE_var;
    string autoAD4D96A6_val;
    unitgroup auto3BBD4825_g;
    int auto3BBD4825_u;
    unit auto3BBD4825_var;
    unitgroup auto47F579F8_g;
    int auto47F579F8_u;
    unit auto47F579F8_var;
    unitgroup autoAB5A3AB1_g;
    int autoAB5A3AB1_u;
    unit autoAB5A3AB1_var;
    unitgroup auto0D13D26D_g;
    int auto0D13D26D_u;
    unit auto0D13D26D_var;
    unitgroup autoB8567324_g;
    int autoB8567324_u;
    unit autoB8567324_var;
    unitgroup auto6B7107AA_g;
    int auto6B7107AA_u;
    unit auto6B7107AA_var;
    unitgroup autoD9BD39EF_g;
    int autoD9BD39EF_u;
    unit autoD9BD39EF_var;
    unitgroup auto29BE9376_g;
    int auto29BE9376_u;
    unit auto29BE9376_var;
    unitgroup autoD52DAAE1_g;
    int autoD52DAAE1_u;
    unit autoD52DAAE1_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA53E81EE_var = 1;
    for ( ; autoA53E81EE_var <= autoA53E81EE_ae; autoA53E81EE_var += 1 ) {
        autoAD4D96A6_val = GameAttributePlayerValue("1", autoA53E81EE_var);
        if (autoAD4D96A6_val == "0001") {
            gv_itemWestGondor = autoA53E81EE_var;
            gv_txtPArray[autoA53E81EE_var] = StringExternal("Param/Value/ED8EB6A1");
            PlayerSetRace(autoA53E81EE_var, "Terr");
            PlayerGroupAdd(gv_good, autoA53E81EE_var);
            auto3BBD4825_g = UnitGroupFilter(null, c_playerAny, gv_westGondorPlayer, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto3BBD4825_u = UnitGroupCount(auto3BBD4825_g, c_unitCountAll);
            for (;; auto3BBD4825_u -= 1) {
                auto3BBD4825_var = UnitGroupUnitFromEnd(auto3BBD4825_g, auto3BBD4825_u);
                if (auto3BBD4825_var == null) { break; }
                UnitSetOwner(auto3BBD4825_var, autoA53E81EE_var, true);
            }
            PlayerSetColorIndex(autoA53E81EE_var, 0, true);
            CameraApplyInfo(autoA53E81EE_var, CameraInfoFromId(786324568), 0.0, -1, 10.0, true);
        }
        else if (autoAD4D96A6_val == "0008") {
            gv_itemDwarves = autoA53E81EE_var;
            gv_txtPArray[autoA53E81EE_var] = StringExternal("Param/Value/FA44F2BE");
            PlayerSetRace(autoA53E81EE_var, "Terr");
            PlayerGroupAdd(gv_good, autoA53E81EE_var);
            auto47F579F8_g = UnitGroupFilter(null, c_playerAny, gv_dwarvesPlayer, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto47F579F8_u = UnitGroupCount(auto47F579F8_g, c_unitCountAll);
            for (;; auto47F579F8_u -= 1) {
                auto47F579F8_var = UnitGroupUnitFromEnd(auto47F579F8_g, auto47F579F8_u);
                if (auto47F579F8_var == null) { break; }
                UnitSetOwner(auto47F579F8_var, autoA53E81EE_var, true);
            }
            PlayerSetColorIndex(autoA53E81EE_var, 6, true);
            CameraApplyInfo(autoA53E81EE_var, CameraInfoFromId(1284933208), 0.0, -1, 10.0, true);
        }
        else if (autoAD4D96A6_val == "0002") {
            gv_itemEastGondor = autoA53E81EE_var;
            gv_txtPArray[autoA53E81EE_var] = StringExternal("Param/Value/E216EB9D");
            PlayerSetRace(autoA53E81EE_var, "Terr");
            PlayerGroupAdd(gv_good, autoA53E81EE_var);
            autoAB5A3AB1_g = UnitGroupFilter(null, c_playerAny, gv_eastgondorPlayer, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoAB5A3AB1_u = UnitGroupCount(autoAB5A3AB1_g, c_unitCountAll);
            for (;; autoAB5A3AB1_u -= 1) {
                autoAB5A3AB1_var = UnitGroupUnitFromEnd(autoAB5A3AB1_g, autoAB5A3AB1_u);
                if (autoAB5A3AB1_var == null) { break; }
                UnitSetOwner(autoAB5A3AB1_var, autoA53E81EE_var, true);
            }
            PlayerSetColorIndex(autoA53E81EE_var, 2, true);
            CameraApplyInfo(autoA53E81EE_var, CameraInfoFromId(1034482261), 0.0, -1, 10.0, true);
        }
        else if (autoAD4D96A6_val == "0003") {
            gv_itemArnor = autoA53E81EE_var;
            gv_txtPArray[autoA53E81EE_var] = StringExternal("Param/Value/F921ECDA");
            PlayerSetRace(autoA53E81EE_var, "Terr");
            PlayerGroupAdd(gv_good, autoA53E81EE_var);
            auto0D13D26D_g = UnitGroupFilter(null, c_playerAny, gv_arnorPlayer, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto0D13D26D_u = UnitGroupCount(auto0D13D26D_g, c_unitCountAll);
            for (;; auto0D13D26D_u -= 1) {
                auto0D13D26D_var = UnitGroupUnitFromEnd(auto0D13D26D_g, auto0D13D26D_u);
                if (auto0D13D26D_var == null) { break; }
                UnitSetOwner(auto0D13D26D_var, autoA53E81EE_var, true);
            }
            PlayerSetColorIndex(autoA53E81EE_var, 1, true);
            CameraApplyInfo(autoA53E81EE_var, CameraInfoFromId(1855881280), 0.0, -1, 10.0, true);
        }
        else if (autoAD4D96A6_val == "0004") {
            gv_itemElves = autoA53E81EE_var;
            gv_txtPArray[autoA53E81EE_var] = StringExternal("Param/Value/4DAC70CD");
            PlayerSetRace(autoA53E81EE_var, "Terr");
            PlayerGroupAdd(gv_good, autoA53E81EE_var);
            autoB8567324_g = UnitGroupFilter(null, c_playerAny, gv_elvesPlayer, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoB8567324_u = UnitGroupCount(autoB8567324_g, c_unitCountAll);
            for (;; autoB8567324_u -= 1) {
                autoB8567324_var = UnitGroupUnitFromEnd(autoB8567324_g, autoB8567324_u);
                if (autoB8567324_var == null) { break; }
                UnitSetOwner(autoB8567324_var, autoA53E81EE_var, true);
            }
            PlayerSetColorIndex(autoA53E81EE_var, 7, true);
            CameraApplyInfo(autoA53E81EE_var, CameraInfoFromId(1532336798), 0.0, -1, 10.0, true);
        }
        else if (autoAD4D96A6_val == "0005") {
            gv_itemEvilMen = autoA53E81EE_var;
            gv_txtPArray[autoA53E81EE_var] = StringExternal("Param/Value/8F788FE2");
            PlayerSetRace(autoA53E81EE_var, "Terr");
            PlayerGroupAdd(gv_evil, autoA53E81EE_var);
            auto6B7107AA_g = UnitGroupFilter(null, c_playerAny, gv_evilmenPlayer, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto6B7107AA_u = UnitGroupCount(auto6B7107AA_g, c_unitCountAll);
            for (;; auto6B7107AA_u -= 1) {
                auto6B7107AA_var = UnitGroupUnitFromEnd(auto6B7107AA_g, auto6B7107AA_u);
                if (auto6B7107AA_var == null) { break; }
                UnitSetOwner(auto6B7107AA_var, autoA53E81EE_var, true);
            }
            PlayerSetColorIndex(autoA53E81EE_var, 9, true);
            CameraApplyInfo(autoA53E81EE_var, CameraInfoFromId(1443745566), 0.0, -1, 10.0, true);
        }
        else if (autoAD4D96A6_val == "0006") {
            gv_itemMordor = autoA53E81EE_var;
            gv_txtPArray[autoA53E81EE_var] = StringExternal("Param/Value/C874459D");
            PlayerSetRace(autoA53E81EE_var, "Terr");
            PlayerGroupAdd(gv_evil, autoA53E81EE_var);
            autoD9BD39EF_g = UnitGroupFilter(null, c_playerAny, gv_mordorPlayer, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoD9BD39EF_u = UnitGroupCount(autoD9BD39EF_g, c_unitCountAll);
            for (;; autoD9BD39EF_u -= 1) {
                autoD9BD39EF_var = UnitGroupUnitFromEnd(autoD9BD39EF_g, autoD9BD39EF_u);
                if (autoD9BD39EF_var == null) { break; }
                UnitSetOwner(autoD9BD39EF_var, autoA53E81EE_var, true);
            }
            PlayerSetColorIndex(autoA53E81EE_var, 12, true);
            CameraApplyInfo(autoA53E81EE_var, CameraInfoFromId(7416878), 0.0, -1, 10.0, true);
        }
        else if (autoAD4D96A6_val == "0007") {
            gv_itemMistyMountains = autoA53E81EE_var;
            gv_txtPArray[autoA53E81EE_var] = StringExternal("Param/Value/7E8A96D8");
            PlayerSetRace(autoA53E81EE_var, "Terr");
            PlayerGroupAdd(gv_evil, autoA53E81EE_var);
            auto29BE9376_g = UnitGroupFilter(null, c_playerAny, gv_mistyMountainsPlayer, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto29BE9376_u = UnitGroupCount(auto29BE9376_g, c_unitCountAll);
            for (;; auto29BE9376_u -= 1) {
                auto29BE9376_var = UnitGroupUnitFromEnd(auto29BE9376_g, auto29BE9376_u);
                if (auto29BE9376_var == null) { break; }
                UnitSetOwner(auto29BE9376_var, autoA53E81EE_var, true);
            }
            PlayerSetColorIndex(autoA53E81EE_var, 14, true);
            CameraApplyInfo(autoA53E81EE_var, CameraInfoFromId(1765051042), 0.0, -1, 10.0, true);
        }
        else if (autoAD4D96A6_val == "0009") {
            gv_ittemEasterlings = autoA53E81EE_var;
            gv_txtPArray[autoA53E81EE_var] = StringExternal("Param/Value/4CD6F5EC");
            PlayerSetRace(autoA53E81EE_var, "Terr");
            PlayerGroupAdd(gv_evil, autoA53E81EE_var);
            autoD52DAAE1_g = UnitGroupFilter(null, c_playerAny, gv_easterlingsPlayer, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoD52DAAE1_u = UnitGroupCount(autoD52DAAE1_g, c_unitCountAll);
            for (;; autoD52DAAE1_u -= 1) {
                autoD52DAAE1_var = UnitGroupUnitFromEnd(autoD52DAAE1_g, autoD52DAAE1_u);
                if (autoD52DAAE1_var == null) { break; }
                UnitSetOwner(autoD52DAAE1_var, autoA53E81EE_var, true);
            }
            PlayerSetColorIndex(autoA53E81EE_var, 5, true);
            CameraApplyInfo(autoA53E81EE_var, CameraInfoFromId(1438087159), 0.0, -1, 10.0, true);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MainPlayerAsssignment_Init () {
    gt_MainPlayerAsssignment = TriggerCreate("gt_MainPlayerAsssignment_Func");
    TriggerAddEventMapInit(gt_MainPlayerAsssignment);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PlayerIsZero
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIsZero_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoFCA26BE3_g;
    int autoFCA26BE3_u;
    unit autoFCA26BE3_var;
    unitgroup auto662C3C20_g;
    int auto662C3C20_u;
    unit auto662C3C20_var;
    unitgroup autoA682A17A_g;
    int autoA682A17A_u;
    unit autoA682A17A_var;
    unitgroup auto4388F3E6_g;
    int auto4388F3E6_u;
    unit auto4388F3E6_var;
    unitgroup autoED7BBC90_g;
    int autoED7BBC90_u;
    unit autoED7BBC90_var;
    unitgroup auto0BD696A2_g;
    int auto0BD696A2_u;
    unit auto0BD696A2_var;
    unitgroup auto877C23B1_g;
    int auto877C23B1_u;
    unit auto877C23B1_var;
    unitgroup auto6A1D9BC4_g;
    int auto6A1D9BC4_u;
    unit auto6A1D9BC4_var;
    unitgroup auto14B6D674_g;
    int auto14B6D674_u;
    unit auto14B6D674_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerType(1) == c_playerTypeNone)) {
        autoFCA26BE3_g = UnitGroupFilter(null, c_playerAny, gv_eastgondorPlayer, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoFCA26BE3_u = UnitGroupCount(autoFCA26BE3_g, c_unitCountAll);
        for (;; autoFCA26BE3_u -= 1) {
            autoFCA26BE3_var = UnitGroupUnitFromEnd(autoFCA26BE3_g, autoFCA26BE3_u);
            if (autoFCA26BE3_var == null) { break; }
            UnitKill(autoFCA26BE3_var);
        }
    }

    if ((PlayerType(2) == c_playerTypeNone)) {
        auto662C3C20_g = UnitGroupFilter(null, c_playerAny, gv_elvesPlayer, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto662C3C20_u = UnitGroupCount(auto662C3C20_g, c_unitCountAll);
        for (;; auto662C3C20_u -= 1) {
            auto662C3C20_var = UnitGroupUnitFromEnd(auto662C3C20_g, auto662C3C20_u);
            if (auto662C3C20_var == null) { break; }
            UnitKill(auto662C3C20_var);
        }
    }

    if ((PlayerType(3) == c_playerTypeNone)) {
        autoA682A17A_g = UnitGroupFilter(null, c_playerAny, gv_arnorPlayer, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA682A17A_u = UnitGroupCount(autoA682A17A_g, c_unitCountAll);
        for (;; autoA682A17A_u -= 1) {
            autoA682A17A_var = UnitGroupUnitFromEnd(autoA682A17A_g, autoA682A17A_u);
            if (autoA682A17A_var == null) { break; }
            UnitKill(autoA682A17A_var);
        }
    }

    if ((PlayerType(4) == c_playerTypeNone)) {
        auto4388F3E6_g = UnitGroupFilter(null, c_playerAny, gv_westGondorPlayer, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto4388F3E6_u = UnitGroupCount(auto4388F3E6_g, c_unitCountAll);
        for (;; auto4388F3E6_u -= 1) {
            auto4388F3E6_var = UnitGroupUnitFromEnd(auto4388F3E6_g, auto4388F3E6_u);
            if (auto4388F3E6_var == null) { break; }
            UnitKill(auto4388F3E6_var);
        }
    }

    if ((PlayerType(5) == c_playerTypeNone)) {
        autoED7BBC90_g = UnitGroupFilter(null, c_playerAny, gv_mordorPlayer, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoED7BBC90_u = UnitGroupCount(autoED7BBC90_g, c_unitCountAll);
        for (;; autoED7BBC90_u -= 1) {
            autoED7BBC90_var = UnitGroupUnitFromEnd(autoED7BBC90_g, autoED7BBC90_u);
            if (autoED7BBC90_var == null) { break; }
            UnitKill(autoED7BBC90_var);
        }
    }

    if ((PlayerType(6) == c_playerTypeNone)) {
        auto0BD696A2_g = UnitGroupFilter(null, c_playerAny, gv_evilmenPlayer, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0BD696A2_u = UnitGroupCount(auto0BD696A2_g, c_unitCountAll);
        for (;; auto0BD696A2_u -= 1) {
            auto0BD696A2_var = UnitGroupUnitFromEnd(auto0BD696A2_g, auto0BD696A2_u);
            if (auto0BD696A2_var == null) { break; }
            UnitKill(auto0BD696A2_var);
        }
    }

    if ((PlayerType(7) == c_playerTypeNone)) {
        auto877C23B1_g = UnitGroupFilter(null, c_playerAny, gv_mistyMountainsPlayer, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto877C23B1_u = UnitGroupCount(auto877C23B1_g, c_unitCountAll);
        for (;; auto877C23B1_u -= 1) {
            auto877C23B1_var = UnitGroupUnitFromEnd(auto877C23B1_g, auto877C23B1_u);
            if (auto877C23B1_var == null) { break; }
            UnitKill(auto877C23B1_var);
        }
    }

    if ((PlayerType(8) == c_playerTypeNone)) {
        auto6A1D9BC4_g = UnitGroupFilter(null, c_playerAny, gv_dwarvesPlayer, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6A1D9BC4_u = UnitGroupCount(auto6A1D9BC4_g, c_unitCountAll);
        for (;; auto6A1D9BC4_u -= 1) {
            auto6A1D9BC4_var = UnitGroupUnitFromEnd(auto6A1D9BC4_g, auto6A1D9BC4_u);
            if (auto6A1D9BC4_var == null) { break; }
            UnitKill(auto6A1D9BC4_var);
        }
    }

    if ((PlayerType(9) == c_playerTypeNone)) {
        auto14B6D674_g = UnitGroupFilter(null, c_playerAny, gv_easterlingsPlayer, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto14B6D674_u = UnitGroupCount(auto14B6D674_g, c_unitCountAll);
        for (;; auto14B6D674_u -= 1) {
            auto14B6D674_var = UnitGroupUnitFromEnd(auto14B6D674_g, auto14B6D674_u);
            if (auto14B6D674_var == null) { break; }
            UnitKill(auto14B6D674_var);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIsZero_Init () {
    gt_PlayerIsZero = TriggerCreate("gt_PlayerIsZero_Func");
    TriggerAddEventMapInit(gt_PlayerIsZero);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InitialResources
//--------------------------------------------------------------------------------------------------
bool gt_InitialResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoFFD6A1CA_g;
    int autoFFD6A1CA_var;
    playergroup auto1C375D71_g;
    int auto1C375D71_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoFFD6A1CA_g = gv_good;
    autoFFD6A1CA_var = -1;
    while (true) {
        autoFFD6A1CA_var = PlayerGroupNextPlayer(autoFFD6A1CA_g, autoFFD6A1CA_var);
        if (autoFFD6A1CA_var < 0) { break; }
        PlayerSetRace(autoFFD6A1CA_var, "Terr");
        PlayerModifyPropertyInt(autoFFD6A1CA_var, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
        PlayerModifyPropertyInt(autoFFD6A1CA_var, c_playerPropVespene, c_playerPropOperSetTo, 1);
        PlayerModifyPropertyInt(autoFFD6A1CA_var, c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    }
    auto1C375D71_g = gv_evil;
    auto1C375D71_var = -1;
    while (true) {
        auto1C375D71_var = PlayerGroupNextPlayer(auto1C375D71_g, auto1C375D71_var);
        if (auto1C375D71_var < 0) { break; }
        PlayerSetRace(auto1C375D71_var, "Zerg");
        PlayerModifyPropertyInt(auto1C375D71_var, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
        PlayerModifyPropertyInt(auto1C375D71_var, c_playerPropVespene, c_playerPropOperSetTo, 1);
        PlayerModifyPropertyInt(auto1C375D71_var, c_playerPropMinerals, c_playerPropOperSetTo, 2500);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitialResources_Init () {
    gt_InitialResources = TriggerCreate("gt_InitialResources_Func");
    TriggerAddEventMapInit(gt_InitialResources);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alliances
//--------------------------------------------------------------------------------------------------
bool gt_Alliances_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetPlayerGroupAlliance(gv_good, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetPlayerGroupAlliance(gv_evil, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(gv_good, gv_evil, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(gv_evil, gv_good, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(PlayerGroupAll(), gv_spectators, libNtve_ge_AllianceSetting_Ally);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Alliances_Init () {
    gt_Alliances = TriggerCreate("gt_Alliances_Func");
    TriggerAddEventMapInit(gt_Alliances);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Soundtrack
//--------------------------------------------------------------------------------------------------
bool gt_Soundtrack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, true);
    Wait(0.5, c_timeGame);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "LOTRSoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Soundtrack_Init () {
    gt_Soundtrack = TriggerCreate("gt_Soundtrack_Func");
    TriggerAddEventMapInit(gt_Soundtrack);
}

//--------------------------------------------------------------------------------------------------
// Trigger: F12 guides
//--------------------------------------------------------------------------------------------------
bool gt_F12guides_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/181F9E29"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/F0F97FD1"), StringToText(""), "Assets\\Textures\\ui_console_icon_chat.dds");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/DD68854B"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/20BF720B"), StringToText(""), "Assets\\Textures\\ui_console_icon_chat.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_F12guides_Init () {
    gt_F12guides = TriggerCreate("gt_F12guides_Func");
    TriggerAddEventMapInit(gt_F12guides);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Help requests off
//--------------------------------------------------------------------------------------------------
bool gt_Helprequestsoff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAllianceAspectForPlayerGroup(gv_good, c_allianceIdSeekHelp, false);
    libNtve_gf_SetAllianceAspectForPlayerGroup(gv_evil, c_allianceIdSeekHelp, false);
    PlayerSetAlliance(1, c_allianceIdSeekHelp, 2, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Helprequestsoff_Init () {
    gt_Helprequestsoff = TriggerCreate("gt_Helprequestsoff_Func");
    TriggerEnable(gt_Helprequestsoff, false);
    TriggerAddEventMapInit(gt_Helprequestsoff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Faction setup
//--------------------------------------------------------------------------------------------------
bool gt_Factionsetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Factionsetup_Init () {
    gt_Factionsetup = TriggerCreate("gt_Factionsetup_Func");
    TriggerAddEventMapInit(gt_Factionsetup);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer
//--------------------------------------------------------------------------------------------------
bool gt_Timer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_t, 90.0, true, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/F13C5F6E"), true, false);
    gv_tW = TimerWindowLastCreated();
    Wait(1.0, c_timeGame);
    TimerWindowSetStyle(gv_tW, c_timerWindowStyleHorizontalTitleTime, false);
    TimerWindowShowBorder(gv_tW, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Timer_Init () {
    gt_Timer = TriggerCreate("gt_Timer_Func");
    TriggerAddEventMapInit(gt_Timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: good structures
//--------------------------------------------------------------------------------------------------
bool gt_goodstructures_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_goodStructures, UnitFromId(1897128707));
    UnitGroupAdd(gv_goodStructures, UnitFromId(989327831));
    UnitGroupAdd(gv_goodStructures, UnitFromId(1325808467));
    UnitGroupAdd(gv_goodStructures, UnitFromId(2112326322));
    UnitGroupAdd(gv_goodStructures, UnitFromId(1231497359));
    UnitGroupAdd(gv_goodStructures, UnitFromId(100603755));
    UnitGroupAdd(gv_goodStructures, UnitFromId(1824510748));
    UnitGroupAdd(gv_goodStructures, UnitFromId(969977804));
    UnitGroupAdd(gv_goodStructures, UnitFromId(677747402));
    UnitGroupAdd(gv_goodStructures, UnitFromId(14086565));
    UnitGroupAdd(gv_goodStructures, UnitFromId(2050115423));
    UnitGroupAdd(gv_goodStructures, UnitFromId(649935218));
    UnitGroupAdd(gv_goodStructures, UnitFromId(502699174));
    UnitGroupAdd(gv_goodStructures, UnitFromId(2026638653));
    UnitGroupAdd(gv_goodStructures, UnitFromId(1068266261));
    UnitGroupAdd(gv_goodStructures, UnitFromId(1919917573));
    UnitGroupAdd(gv_goodStructures, UnitFromId(126626611));
    UnitGroupAdd(gv_goodStructures, UnitFromId(490175528));
    UnitGroupAdd(gv_goodStructures, UnitFromId(1421689034));
    UnitGroupAdd(gv_goodStructures, UnitFromId(221478581));
    UnitGroupAdd(gv_goodStructures, UnitFromId(1045690131));
    UnitGroupAdd(gv_goodStructures, UnitFromId(699489457));
    UnitGroupAdd(gv_goodStructures, UnitFromId(974373087));
    UnitGroupAdd(gv_goodStructures, UnitFromId(333958134));
    UnitGroupAdd(gv_goodStructures, UnitFromId(421005958));
    UnitGroupAdd(gv_goodStructures, UnitFromId(650634245));
    UnitGroupAdd(gv_goodStructures, UnitFromId(573473263));
    UnitGroupAdd(gv_goodStructures, UnitFromId(1067839632));
    UnitGroupAdd(gv_goodStructures, UnitFromId(439325741));
    UnitGroupAdd(gv_goodStructures, UnitFromId(1213833690));
    UnitGroupAdd(gv_goodStructures, UnitFromId(1087886462));
    UnitGroupAdd(gv_goodStructures, UnitFromId(1731438873));
    UnitGroupAdd(gv_goodStructures, UnitFromId(1550051897));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_goodstructures_Init () {
    gt_goodstructures = TriggerCreate("gt_goodstructures_Func");
    TriggerAddEventMapInit(gt_goodstructures);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evil structures
//--------------------------------------------------------------------------------------------------
bool gt_Evilstructures_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_evilStructures, UnitFromId(1930801371));
    UnitGroupAdd(gv_evilStructures, UnitFromId(509044797));
    UnitGroupAdd(gv_evilStructures, UnitFromId(1569959845));
    UnitGroupAdd(gv_evilStructures, UnitFromId(315361432));
    UnitGroupAdd(gv_evilStructures, UnitFromId(1641847481));
    UnitGroupAdd(gv_evilStructures, UnitFromId(1767098372));
    UnitGroupAdd(gv_evilStructures, UnitFromId(1782954501));
    UnitGroupAdd(gv_evilStructures, UnitFromId(1164482133));
    UnitGroupAdd(gv_evilStructures, UnitFromId(418557182));
    UnitGroupAdd(gv_evilStructures, UnitFromId(1948731451));
    UnitGroupAdd(gv_evilStructures, UnitFromId(1353683019));
    UnitGroupAdd(gv_evilStructures, UnitFromId(2081578249));
    UnitGroupAdd(gv_evilStructures, UnitFromId(1989109597));
    UnitGroupAdd(gv_evilStructures, UnitFromId(853024071));
    UnitGroupAdd(gv_evilStructures, UnitFromId(1716558742));
    UnitGroupAdd(gv_evilStructures, UnitFromId(1492802972));
    UnitGroupAdd(gv_evilStructures, UnitFromId(1040499259));
    UnitGroupAdd(gv_evilStructures, UnitFromId(1920784909));
    UnitGroupAdd(gv_evilStructures, UnitFromId(1521351733));
    UnitGroupAdd(gv_evilStructures, UnitFromId(1472757999));
    UnitGroupAdd(gv_evilStructures, UnitFromId(1330193940));
    UnitGroupAdd(gv_evilStructures, UnitFromId(1122522248));
    UnitGroupAdd(gv_evilStructures, UnitFromId(1948361748));
    UnitGroupAdd(gv_evilStructures, UnitFromId(761806837));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Evilstructures_Init () {
    gt_Evilstructures = TriggerCreate("gt_Evilstructures_Func");
    TriggerAddEventMapInit(gt_Evilstructures);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove from Good (leaving)
//--------------------------------------------------------------------------------------------------
bool gt_RemovefromGoodleaving_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_good, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayer() == UnitGetOwner(UnitFromId(1115911984)))) {
        gv_eastGondorLeft = true;
    }
    else {
        if ((EventPlayer() == UnitGetOwner(UnitFromId(1577456443)))) {
            gv_elvesLeft = true;
        }
        else {
            if ((EventPlayer() == UnitGetOwner(UnitFromId(1187303155)))) {
                gv_arnorleft = true;
            }
            else {
                if ((EventPlayer() == UnitGetOwner(UnitFromId(1255680029)))) {
                    gv_westernGondorLeft = true;
                }
                else {
                    if ((EventPlayer() == UnitGetOwner(UnitFromId(1325281323)))) {
                        gv_dwarvesleft = true;
                    }

                }
            }
        }
    }
    PlayerGroupRemove(gv_good, EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemovefromGoodleaving_Init () {
    gt_RemovefromGoodleaving = TriggerCreate("gt_RemovefromGoodleaving_Func");
    TriggerAddEventPlayerLeft(gt_RemovefromGoodleaving, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove from evil (leaving)
//--------------------------------------------------------------------------------------------------
bool gt_Removefromevilleaving_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_evil, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayer() == UnitGetOwner(UnitFromId(682814818)))) {
        gv_mordorleft = true;
    }
    else {
        if ((EventPlayer() == UnitGetOwner(UnitFromId(591676803)))) {
            gv_evilmenleft = true;
        }
        else {
            if ((EventPlayer() == UnitGetOwner(UnitFromId(1565330970)))) {
                gv_mistyMountainsleft = true;
            }
            else {
                if ((EventPlayer() == UnitGetOwner(UnitFromId(1288358028)))) {
                    gv_easterlingsleft = true;
                }

            }
        }
    }
    PlayerGroupRemove(gv_evil, EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Removefromevilleaving_Init () {
    gt_Removefromevilleaving = TriggerCreate("gt_Removefromevilleaving_Func");
    TriggerAddEventPlayerLeft(gt_Removefromevilleaving, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat by leave (GOOD WINS)
//--------------------------------------------------------------------------------------------------
bool gt_DefeatbyleaveGOODWINS_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto2BD2E446_g;
    int auto2BD2E446_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(gv_evil) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2BD2E446_g = gv_good;
    auto2BD2E446_var = -1;
    while (true) {
        auto2BD2E446_var = PlayerGroupNextPlayer(auto2BD2E446_g, auto2BD2E446_var);
        if (auto2BD2E446_var < 0) { break; }
        GameOver(auto2BD2E446_var, c_gameOverVictory, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatbyleaveGOODWINS_Init () {
    gt_DefeatbyleaveGOODWINS = TriggerCreate("gt_DefeatbyleaveGOODWINS_Func");
    TriggerAddEventPlayerLeft(gt_DefeatbyleaveGOODWINS, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat by leave (EVIl WINS)
//--------------------------------------------------------------------------------------------------
bool gt_DefeatbyleaveEVIlWINS_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto431A0E1E_g;
    int auto431A0E1E_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(gv_good) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto431A0E1E_g = gv_evil;
    auto431A0E1E_var = -1;
    while (true) {
        auto431A0E1E_var = PlayerGroupNextPlayer(auto431A0E1E_g, auto431A0E1E_var);
        if (auto431A0E1E_var < 0) { break; }
        GameOver(auto431A0E1E_var, c_gameOverVictory, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatbyleaveEVIlWINS_Init () {
    gt_DefeatbyleaveEVIlWINS = TriggerCreate("gt_DefeatbyleaveEVIlWINS_Func");
    TriggerAddEventPlayerLeft(gt_DefeatbyleaveEVIlWINS, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat by structures (EVIL WINS)
//--------------------------------------------------------------------------------------------------
bool gt_DefeatbystructuresEVILWINS_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto89669518_g;
    int auto89669518_var;
    playergroup auto4671986E_g;
    int auto4671986E_var;

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_goodStructures, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto89669518_g = gv_evil;
    auto89669518_var = -1;
    while (true) {
        auto89669518_var = PlayerGroupNextPlayer(auto89669518_g, auto89669518_var);
        if (auto89669518_var < 0) { break; }
        GameOver(auto89669518_var, c_gameOverVictory, true, true);
    }
    auto4671986E_g = gv_good;
    auto4671986E_var = -1;
    while (true) {
        auto4671986E_var = PlayerGroupNextPlayer(auto4671986E_g, auto4671986E_var);
        if (auto4671986E_var < 0) { break; }
        GameOver(auto4671986E_var, c_gameOverDefeat, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatbystructuresEVILWINS_Init () {
    gt_DefeatbystructuresEVILWINS = TriggerCreate("gt_DefeatbystructuresEVILWINS_Func");
    TriggerAddEventUnitDied(gt_DefeatbystructuresEVILWINS, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat by structures (GOOD WINS)
//--------------------------------------------------------------------------------------------------
bool gt_DefeatbystructuresGOODWINS_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto1D5202D8_g;
    int auto1D5202D8_var;
    playergroup autoA4A76F9D_g;
    int autoA4A76F9D_var;

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_evilStructures, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto1D5202D8_g = gv_good;
    auto1D5202D8_var = -1;
    while (true) {
        auto1D5202D8_var = PlayerGroupNextPlayer(auto1D5202D8_g, auto1D5202D8_var);
        if (auto1D5202D8_var < 0) { break; }
        GameOver(auto1D5202D8_var, c_gameOverVictory, true, true);
    }
    autoA4A76F9D_g = gv_evil;
    autoA4A76F9D_var = -1;
    while (true) {
        autoA4A76F9D_var = PlayerGroupNextPlayer(autoA4A76F9D_g, autoA4A76F9D_var);
        if (autoA4A76F9D_var < 0) { break; }
        GameOver(autoA4A76F9D_var, c_gameOverDefeat, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatbystructuresGOODWINS_Init () {
    gt_DefeatbystructuresGOODWINS = TriggerCreate("gt_DefeatbystructuresGOODWINS_Func");
    TriggerAddEventUnitDied(gt_DefeatbystructuresGOODWINS, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource managing
//--------------------------------------------------------------------------------------------------
bool gt_Resourcemanaging_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetResourceTradingAllowed(c_resourceTypeVespene, false);
    UISetResourceTradeCountdownTime(600);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Resourcemanaging_Init () {
    gt_Resourcemanaging = TriggerCreate("gt_Resourcemanaging_Func");
    TriggerAddEventMapInit(gt_Resourcemanaging);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable Ping
//--------------------------------------------------------------------------------------------------
bool gt_EnablePing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libLbty_gf_EnableDisablePingPanel(true, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnablePing_Init () {
    gt_EnablePing = TriggerCreate("gt_EnablePing_Func");
    TriggerAddEventMapInit(gt_EnablePing);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return Gas
//--------------------------------------------------------------------------------------------------
bool gt_ReturnGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUpgrade() != "SearchForTheRelicsOfBuzraDum"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "DurinTheFifth"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "InspireTheElvesOfHarlond"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "PrepareToFlee"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "FormAColation"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "MigrateFromDorwinion"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "ErectTheFortressOfDolGuldur"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "CorsairInvasion"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "GuerillaWarfare"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "FortifyOuterHoldingLastBridge"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "FortifyOuterHoldingLondDaer"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "FortifyOuterHoldingMinhiarth"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "FortifyOuterHoldingOuterRhuadur"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "FortifyOuterHoldingTharbad"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "RetreatOuterHoldingLastBridge"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "RetreatOuterHoldingLondDaer"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "RetreatOuterHoldingMinhiarth"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "RetreatOuterHoldingOuterRhuadur"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "RetreatOuterHoldingTharbad"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "Fimbretihil"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "CentralizePower"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "EldacarUnlock"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "ValandilsInsanity"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "UvarthaTheBlackHorseman"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "OathOfErech"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "OathOfErech2"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "Reconcile"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "Oppress"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "TearMorgomirAsunder"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "SummonMorgomir"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "RallyTheEasterlings"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "OrganizeTheArmy"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "LieutenantOfHoarddale"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "Orophin"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "Cirdan"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "LongLiveTheKing"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "EmpowerSauron"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "EmpowerWitchKing"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "EstablishAngmar"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "Scorba"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "VileServitude"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "Broggau"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "RiderOfMountGram"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "Bolg"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "HorselordsOfDolAmroth"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "PrinceOfDolAmroth"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "LordOfIronHills"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "OrcBreeding"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "OrcBreeding2"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "OrcBreeding22"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "OrcBreeding23"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "OrcBreeding24"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "OrcBreeding25"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "OrcBreeding26"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "OrcBreeding27"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "OrcBreeding28"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "OrcBreeding29"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "OrcBreeding210"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "OrcBreeding211"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "OrcBreeding212"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "OrcBreeding213"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "FortifyTheRiverOfAnduin"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "MarquilLeaderOfTheNorthmen"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "FightForDorwinion"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "Horamuth"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "PelargirDestroyed"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "LondDaerDestroyed"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "LefnuiDestroyed"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "HarlondDestroyed"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "CorsairEncampmentHarlond"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "CorsairEncampmentLefnui"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "CorsairEncampmentLondDaer"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "CorsairEncampmentPelargir"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "CorsairLord"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "TheCallingOfTheSouth"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "WarlordOfTheSouthrons"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "EchoesOfRhuadur"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "GuardiansOfLastBridge"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "MartimeLegacy"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "NumenorStonework"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "NomadsResilence"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "DevotionToAmdir"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "DevotionToAmroth"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "SilvanCombatantTraining"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "Thranduil"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "Genevive"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "Galadriel"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "EmpowerAdunabethTheQuiet"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "Khorakhil"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "ChiefOfDruwaithgood"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "DispersePower"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "EldacarUnlock2"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "BeastsOfNurn"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "ServantsOfMordor"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "HouseOfHealing"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "RangersOfTheWhiteMountains"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "ReinforcementsFromHarandor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene, c_playerPropOperAdd, 1);
    MinimapPing(PlayerGroupSingle(UnitGetOwner(EventUnit())), UnitGetPosition(EventUnit()), 3.0, Color(0.00, 100.00, 0.00));
    MinimapPing(gv_spectators, UnitGetPosition(EventUnit()), 3.0, Color(0.00, 100.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturnGas_Init () {
    gt_ReturnGas = TriggerCreate("gt_ReturnGas_Func");
    TriggerAddEventUnitResearchProgress(gt_ReturnGas, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Master Spy Respawn
//--------------------------------------------------------------------------------------------------
bool gt_MasterSpyRespawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_eastGondorSpy) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Observer", 0, UnitGetOwner(UnitFromId(1115911984)), PointFromId(1956332581));
        gv_eastGondorSpy = UnitLastCreated();
    }

    if ((UnitIsAlive(gv_elvesSpy) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Observer", 0, UnitGetOwner(UnitFromId(1577456443)), PointFromId(283882455));
        gv_elvesSpy = UnitLastCreated();
    }

    if ((UnitIsAlive(gv_arnorSpy) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Observer", 0, UnitGetOwner(UnitFromId(1187303155)), PointFromId(1102867604));
        gv_arnorSpy = UnitLastCreated();
    }

    if ((UnitIsAlive(gv_westGondorSpy) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Observer", 0, UnitGetOwner(UnitFromId(1255680029)), PointFromId(886977154));
        gv_westGondorSpy = UnitLastCreated();
    }

    if ((UnitIsAlive(gv_mordorSpy) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Observer", 0, UnitGetOwner(UnitFromId(682814818)), PointFromId(162865192));
        gv_mordorSpy = UnitLastCreated();
    }

    if ((UnitIsAlive(gv_evilmenSpy) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Observer", 0, UnitGetOwner(UnitFromId(591676803)), PointFromId(1980932493));
        gv_evilmenSpy = UnitLastCreated();
    }

    if ((UnitIsAlive(gv_mistySpy) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Observer", 0, UnitGetOwner(UnitFromId(1565330970)), PointFromId(1207796644));
        gv_mistySpy = UnitLastCreated();
    }

    if ((UnitIsAlive(gv_dwarvesSpy) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Observer", 0, UnitGetOwner(UnitFromId(1325281323)), PointFromId(486097910));
        gv_dwarvesSpy = UnitLastCreated();
    }

    if ((UnitIsAlive(gv_easterlingsSpy) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Observer", 0, UnitGetOwner(UnitFromId(1288358028)), PointFromId(936611018));
        gv_easterlingsSpy = UnitLastCreated();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MasterSpyRespawn_Init () {
    gt_MasterSpyRespawn = TriggerCreate("gt_MasterSpyRespawn_Func");
    TriggerAddEventTimePeriodic(gt_MasterSpyRespawn, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: East Gondor Spy
//--------------------------------------------------------------------------------------------------
bool gt_EastGondorSpy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_eastGondorSpy = UnitFromId(951451141);
    Wait(1.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EastGondorSpy_Init () {
    gt_EastGondorSpy = TriggerCreate("gt_EastGondorSpy_Func");
    TriggerAddEventTimeElapsed(gt_EastGondorSpy, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: East Gondor Spy Death
//--------------------------------------------------------------------------------------------------
bool gt_EastGondorSpyDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_eastGondorSpytimer, 90.0, false, c_timeGame);
    TriggerEnable(gt_EastGondorSpyRespawn, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EastGondorSpyDeath_Init () {
    gt_EastGondorSpyDeath = TriggerCreate("gt_EastGondorSpyDeath_Func");
    TriggerEnable(gt_EastGondorSpyDeath, false);
    TriggerAddEventUnitDied(gt_EastGondorSpyDeath, UnitRefFromVariable("gv_eastGondorSpy"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: East Gondor Spy Respawn
//--------------------------------------------------------------------------------------------------
bool gt_EastGondorSpyRespawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Observer", 0, UnitGetOwner(UnitFromId(1115911984)), PointFromId(1956332581));
    gv_eastGondorSpy = UnitLastCreated();
    TriggerEnable(gt_EastGondorSpyDeath, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EastGondorSpyRespawn_Init () {
    gt_EastGondorSpyRespawn = TriggerCreate("gt_EastGondorSpyRespawn_Func");
    TriggerEnable(gt_EastGondorSpyRespawn, false);
    TriggerAddEventTimer(gt_EastGondorSpyRespawn, gv_eastGondorSpytimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Elves Spy
//--------------------------------------------------------------------------------------------------
bool gt_ElvesSpy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_elvesSpy = UnitFromId(536790874);
    Wait(1.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ElvesSpy_Init () {
    gt_ElvesSpy = TriggerCreate("gt_ElvesSpy_Func");
    TriggerAddEventTimeElapsed(gt_ElvesSpy, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Elves Spy Death
//--------------------------------------------------------------------------------------------------
bool gt_ElvesSpyDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_elvesSpytimer, 90.0, false, c_timeGame);
    TriggerEnable(gt_ElvesSpyRespawn, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ElvesSpyDeath_Init () {
    gt_ElvesSpyDeath = TriggerCreate("gt_ElvesSpyDeath_Func");
    TriggerEnable(gt_ElvesSpyDeath, false);
    TriggerAddEventUnitDied(gt_ElvesSpyDeath, UnitRefFromVariable("gv_elvesSpy"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Elves Spy Respawn
//--------------------------------------------------------------------------------------------------
bool gt_ElvesSpyRespawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Observer", 0, UnitGetOwner(UnitFromId(1577456443)), PointFromId(283882455));
    gv_elvesSpy = UnitLastCreated();
    TriggerEnable(gt_ElvesSpyDeath, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ElvesSpyRespawn_Init () {
    gt_ElvesSpyRespawn = TriggerCreate("gt_ElvesSpyRespawn_Func");
    TriggerEnable(gt_ElvesSpyRespawn, false);
    TriggerAddEventTimer(gt_ElvesSpyRespawn, gv_elvesSpytimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Arnor Spy
//--------------------------------------------------------------------------------------------------
bool gt_ArnorSpy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_arnorSpy = UnitFromId(1768400126);
    Wait(1.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArnorSpy_Init () {
    gt_ArnorSpy = TriggerCreate("gt_ArnorSpy_Func");
    TriggerAddEventTimeElapsed(gt_ArnorSpy, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Arnor Spy Death
//--------------------------------------------------------------------------------------------------
bool gt_ArnorSpyDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_arnorSpytimer, 90.0, false, c_timeGame);
    TriggerEnable(gt_ArnorSpyRespawn, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArnorSpyDeath_Init () {
    gt_ArnorSpyDeath = TriggerCreate("gt_ArnorSpyDeath_Func");
    TriggerEnable(gt_ArnorSpyDeath, false);
    TriggerAddEventUnitDied(gt_ArnorSpyDeath, UnitRefFromVariable("gv_arnorSpy"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Arnor Spy Respawn
//--------------------------------------------------------------------------------------------------
bool gt_ArnorSpyRespawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Observer", 0, UnitGetOwner(UnitFromId(1187303155)), PointFromId(1102867604));
    gv_arnorSpy = UnitLastCreated();
    TriggerEnable(gt_ArnorSpyDeath, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArnorSpyRespawn_Init () {
    gt_ArnorSpyRespawn = TriggerCreate("gt_ArnorSpyRespawn_Func");
    TriggerEnable(gt_ArnorSpyRespawn, false);
    TriggerAddEventTimer(gt_ArnorSpyRespawn, gv_arnorSpytimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: West Gondor Spy
//--------------------------------------------------------------------------------------------------
bool gt_WestGondorSpy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_westGondorSpy = UnitFromId(71560260);
    Wait(1.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WestGondorSpy_Init () {
    gt_WestGondorSpy = TriggerCreate("gt_WestGondorSpy_Func");
    TriggerAddEventTimeElapsed(gt_WestGondorSpy, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: West Gondor Spy Death
//--------------------------------------------------------------------------------------------------
bool gt_WestGondorSpyDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_westGondortimer, 90.0, false, c_timeGame);
    TriggerEnable(gt_WestGondorSpyRespawn, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WestGondorSpyDeath_Init () {
    gt_WestGondorSpyDeath = TriggerCreate("gt_WestGondorSpyDeath_Func");
    TriggerEnable(gt_WestGondorSpyDeath, false);
    TriggerAddEventUnitDied(gt_WestGondorSpyDeath, UnitRefFromVariable("gv_westGondorSpy"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: West Gondor Spy Respawn
//--------------------------------------------------------------------------------------------------
bool gt_WestGondorSpyRespawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Observer", 0, UnitGetOwner(UnitFromId(1255680029)), PointFromId(886977154));
    gv_westGondorSpy = UnitLastCreated();
    TriggerEnable(gt_WestGondorSpyDeath, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WestGondorSpyRespawn_Init () {
    gt_WestGondorSpyRespawn = TriggerCreate("gt_WestGondorSpyRespawn_Func");
    TriggerEnable(gt_WestGondorSpyRespawn, false);
    TriggerAddEventTimer(gt_WestGondorSpyRespawn, gv_westGondortimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mordor Spy
//--------------------------------------------------------------------------------------------------
bool gt_MordorSpy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mordorSpy = UnitFromId(1071002931);
    Wait(1.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MordorSpy_Init () {
    gt_MordorSpy = TriggerCreate("gt_MordorSpy_Func");
    TriggerAddEventTimeElapsed(gt_MordorSpy, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mordor Spy Death
//--------------------------------------------------------------------------------------------------
bool gt_MordorSpyDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_mordorSpytimer, 90.0, false, c_timeGame);
    TriggerEnable(gt_MordorSpyRespawn, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MordorSpyDeath_Init () {
    gt_MordorSpyDeath = TriggerCreate("gt_MordorSpyDeath_Func");
    TriggerEnable(gt_MordorSpyDeath, false);
    TriggerAddEventUnitDied(gt_MordorSpyDeath, UnitRefFromVariable("gv_mordorSpy"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mordor Spy Respawn
//--------------------------------------------------------------------------------------------------
bool gt_MordorSpyRespawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Observer", 0, UnitGetOwner(UnitFromId(682814818)), PointFromId(162865192));
    gv_elvesSpy = UnitLastCreated();
    TriggerEnable(gt_ElvesSpyDeath, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MordorSpyRespawn_Init () {
    gt_MordorSpyRespawn = TriggerCreate("gt_MordorSpyRespawn_Func");
    TriggerEnable(gt_MordorSpyRespawn, false);
    TriggerAddEventTimer(gt_MordorSpyRespawn, gv_mordorSpytimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evil men Spy
//--------------------------------------------------------------------------------------------------
bool gt_EvilmenSpy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_evilmenSpy = UnitFromId(278807728);
    Wait(1.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EvilmenSpy_Init () {
    gt_EvilmenSpy = TriggerCreate("gt_EvilmenSpy_Func");
    TriggerAddEventTimeElapsed(gt_EvilmenSpy, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evil men Spy Death
//--------------------------------------------------------------------------------------------------
bool gt_EvilmenSpyDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_evilmenSpytimer, 90.0, false, c_timeGame);
    TriggerEnable(gt_EvilmenSpyRespawn, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EvilmenSpyDeath_Init () {
    gt_EvilmenSpyDeath = TriggerCreate("gt_EvilmenSpyDeath_Func");
    TriggerEnable(gt_EvilmenSpyDeath, false);
    TriggerAddEventUnitDied(gt_EvilmenSpyDeath, UnitRefFromVariable("gv_evilmenSpy"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evil men Spy Respawn
//--------------------------------------------------------------------------------------------------
bool gt_EvilmenSpyRespawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Observer", 0, UnitGetOwner(UnitFromId(591676803)), PointFromId(1980932493));
    gv_evilmenSpy = UnitLastCreated();
    TriggerEnable(gt_EvilmenSpyDeath, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EvilmenSpyRespawn_Init () {
    gt_EvilmenSpyRespawn = TriggerCreate("gt_EvilmenSpyRespawn_Func");
    TriggerEnable(gt_EvilmenSpyRespawn, false);
    TriggerAddEventTimer(gt_EvilmenSpyRespawn, gv_evilmenSpytimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Misty Spy
//--------------------------------------------------------------------------------------------------
bool gt_MistySpy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mistySpy = UnitFromId(925650212);
    Wait(1.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MistySpy_Init () {
    gt_MistySpy = TriggerCreate("gt_MistySpy_Func");
    TriggerAddEventTimeElapsed(gt_MistySpy, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Misty Spy Death
//--------------------------------------------------------------------------------------------------
bool gt_MistySpyDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_mistySpytimer, 90.0, false, c_timeGame);
    TriggerEnable(gt_MistySpyRespawn, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MistySpyDeath_Init () {
    gt_MistySpyDeath = TriggerCreate("gt_MistySpyDeath_Func");
    TriggerEnable(gt_MistySpyDeath, false);
    TriggerAddEventUnitDied(gt_MistySpyDeath, UnitRefFromVariable("gv_mistySpy"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Misty Spy Respawn
//--------------------------------------------------------------------------------------------------
bool gt_MistySpyRespawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Observer", 0, UnitGetOwner(UnitFromId(1565330970)), PointFromId(1207796644));
    gv_mistySpy = UnitLastCreated();
    TriggerEnable(gt_MistySpyDeath, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MistySpyRespawn_Init () {
    gt_MistySpyRespawn = TriggerCreate("gt_MistySpyRespawn_Func");
    TriggerEnable(gt_MistySpyRespawn, false);
    TriggerAddEventTimer(gt_MistySpyRespawn, gv_mistySpytimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dwarves Spy
//--------------------------------------------------------------------------------------------------
bool gt_DwarvesSpy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_dwarvesSpy = UnitFromId(949615039);
    Wait(1.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DwarvesSpy_Init () {
    gt_DwarvesSpy = TriggerCreate("gt_DwarvesSpy_Func");
    TriggerAddEventTimeElapsed(gt_DwarvesSpy, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dwarves Spy Death
//--------------------------------------------------------------------------------------------------
bool gt_DwarvesSpyDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_dwarvesSpytimer, 90.0, false, c_timeGame);
    TriggerEnable(gt_DwarvesSpyRespawn, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DwarvesSpyDeath_Init () {
    gt_DwarvesSpyDeath = TriggerCreate("gt_DwarvesSpyDeath_Func");
    TriggerEnable(gt_DwarvesSpyDeath, false);
    TriggerAddEventUnitDied(gt_DwarvesSpyDeath, UnitRefFromVariable("gv_dwarvesSpy"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dwarves Spy Respawn
//--------------------------------------------------------------------------------------------------
bool gt_DwarvesSpyRespawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Observer", 0, UnitGetOwner(UnitFromId(1325281323)), PointFromId(486097910));
    gv_dwarvesSpy = UnitLastCreated();
    TriggerEnable(gt_DwarvesSpyDeath, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DwarvesSpyRespawn_Init () {
    gt_DwarvesSpyRespawn = TriggerCreate("gt_DwarvesSpyRespawn_Func");
    TriggerEnable(gt_DwarvesSpyRespawn, false);
    TriggerAddEventTimer(gt_DwarvesSpyRespawn, gv_dwarvesSpytimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Easterlings Spy
//--------------------------------------------------------------------------------------------------
bool gt_EasterlingsSpy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_easterlingsSpy = UnitFromId(367577576);
    Wait(1.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EasterlingsSpy_Init () {
    gt_EasterlingsSpy = TriggerCreate("gt_EasterlingsSpy_Func");
    TriggerAddEventTimeElapsed(gt_EasterlingsSpy, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Easterlings Spy Death
//--------------------------------------------------------------------------------------------------
bool gt_EasterlingsSpyDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_easterlingsSpytimer, 90.0, false, c_timeGame);
    TriggerEnable(gt_EasterlingsSpyRespawn, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EasterlingsSpyDeath_Init () {
    gt_EasterlingsSpyDeath = TriggerCreate("gt_EasterlingsSpyDeath_Func");
    TriggerEnable(gt_EasterlingsSpyDeath, false);
    TriggerAddEventUnitDied(gt_EasterlingsSpyDeath, UnitRefFromVariable("gv_easterlingsSpy"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Easterlings Spy Respawn
//--------------------------------------------------------------------------------------------------
bool gt_EasterlingsSpyRespawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Observer", 0, UnitGetOwner(UnitFromId(1288358028)), PointFromId(936611018));
    gv_easterlingsSpy = UnitLastCreated();
    TriggerEnable(gt_EasterlingsSpyDeath, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EasterlingsSpyRespawn_Init () {
    gt_EasterlingsSpyRespawn = TriggerCreate("gt_EasterlingsSpyRespawn_Func");
    TriggerEnable(gt_EasterlingsSpyRespawn, false);
    TriggerAddEventTimer(gt_EasterlingsSpyRespawn, gv_easterlingsSpytimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Retreat Heroes (East Gondor)
//--------------------------------------------------------------------------------------------------
bool gt_RetreatHeroesEastGondor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_itemEastGondor) && (UnitBehaviorCount(EventUnit(), "Lessthen50") == 1) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(45)) != true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnit(), "HeroStasis", 0, 1);
    Wait(2.0, c_timeGame);
    gv_herogroup = UnitGroup(UnitGetType(EventUnit()), gv_itemEastGondor, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    AISetUnitSuicide(EventUnit(), false);
    UnitSetPosition(EventUnit(), PointFromId(886977154), false);
    TimerStart(gv_eastGondorTimer, 3.0, false, c_timeGame);
    TriggerEnable(gt_waitteleportEastGondor, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RetreatHeroesEastGondor_Init () {
    gt_RetreatHeroesEastGondor = TriggerCreate("gt_RetreatHeroesEastGondor_Func");
    TriggerEnable(gt_RetreatHeroesEastGondor, false);
    TriggerAddEventUnitDamaged(gt_RetreatHeroesEastGondor, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: wait teleport (East Gondor)
//--------------------------------------------------------------------------------------------------
bool gt_waitteleportEastGondor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_RetreatHeroesEastGondor, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_waitteleportEastGondor_Init () {
    gt_waitteleportEastGondor = TriggerCreate("gt_waitteleportEastGondor_Func");
    TriggerEnable(gt_waitteleportEastGondor, false);
    TriggerAddEventTimer(gt_waitteleportEastGondor, gv_eastGondorTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Retreat Heroes (Arnor)
//--------------------------------------------------------------------------------------------------
bool gt_RetreatHeroesArnor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_itemArnor) && (UnitBehaviorCount(EventUnit(), "Lessthen50") == 1) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(46)) != true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnit(), "HeroStasis", 0, 1);
    Wait(2.0, c_timeGame);
    gv_herogroup = UnitGroup(UnitGetType(EventUnit()), gv_itemArnor, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    AISetUnitSuicide(EventUnit(), false);
    UnitSetPosition(EventUnit(), PointFromId(1983257430), false);
    TimerStart(gv_arnorTimer, 3.0, false, c_timeGame);
    TriggerEnable(gt_waitteleportArnor, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RetreatHeroesArnor_Init () {
    gt_RetreatHeroesArnor = TriggerCreate("gt_RetreatHeroesArnor_Func");
    TriggerEnable(gt_RetreatHeroesArnor, false);
    TriggerAddEventUnitDamaged(gt_RetreatHeroesArnor, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: wait teleport (Arnor)
//--------------------------------------------------------------------------------------------------
bool gt_waitteleportArnor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_RetreatHeroesArnor, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_waitteleportArnor_Init () {
    gt_waitteleportArnor = TriggerCreate("gt_waitteleportArnor_Func");
    TriggerEnable(gt_waitteleportArnor, false);
    TriggerAddEventTimer(gt_waitteleportArnor, gv_arnorTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Retreat Heroes (Elves)
//--------------------------------------------------------------------------------------------------
bool gt_RetreatHeroesElves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_itemElves) && (UnitBehaviorCount(EventUnit(), "Lessthen50") == 1) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(46)) != true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnit(), "HeroStasis", 0, 1);
    Wait(2.0, c_timeGame);
    gv_herogroup = UnitGroup(UnitGetType(EventUnit()), gv_itemElves, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    AISetUnitSuicide(EventUnit(), false);
    UnitSetPosition(EventUnit(), PointFromId(1983257430), false);
    TimerStart(gv_elvesTimer, 3.0, false, c_timeGame);
    TriggerEnable(gt_waitteleportElves, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RetreatHeroesElves_Init () {
    gt_RetreatHeroesElves = TriggerCreate("gt_RetreatHeroesElves_Func");
    TriggerEnable(gt_RetreatHeroesElves, false);
    TriggerAddEventUnitDamaged(gt_RetreatHeroesElves, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: wait teleport (Elves)
//--------------------------------------------------------------------------------------------------
bool gt_waitteleportElves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_RetreatHeroesElves, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_waitteleportElves_Init () {
    gt_waitteleportElves = TriggerCreate("gt_waitteleportElves_Func");
    TriggerEnable(gt_waitteleportElves, false);
    TriggerAddEventTimer(gt_waitteleportElves, gv_elvesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Retreat Heroes (West Gondor)
//--------------------------------------------------------------------------------------------------
bool gt_RetreatHeroesWestGondor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_itemWestGondor) && (UnitBehaviorCount(EventUnit(), "Lessthen50") == 1) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(47)) != true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnit(), "HeroStasis", 0, 1);
    Wait(2.0, c_timeGame);
    gv_herogroup = UnitGroup(UnitGetType(EventUnit()), gv_itemWestGondor, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    AISetUnitSuicide(EventUnit(), false);
    UnitSetPosition(EventUnit(), PointFromId(1102867604), false);
    TimerStart(gv_westGondortimer, 3.0, false, c_timeGame);
    TriggerEnable(gt_waitteleportWestGondor, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RetreatHeroesWestGondor_Init () {
    gt_RetreatHeroesWestGondor = TriggerCreate("gt_RetreatHeroesWestGondor_Func");
    TriggerEnable(gt_RetreatHeroesWestGondor, false);
    TriggerAddEventUnitDamaged(gt_RetreatHeroesWestGondor, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: wait teleport (West Gondor
//--------------------------------------------------------------------------------------------------
bool gt_waitteleportWestGondor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_RetreatHeroesWestGondor, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_waitteleportWestGondor_Init () {
    gt_waitteleportWestGondor = TriggerCreate("gt_waitteleportWestGondor_Func");
    TriggerEnable(gt_waitteleportWestGondor, false);
    TriggerAddEventTimer(gt_waitteleportWestGondor, gv_westGondortimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Retreat Heroes (Dwarves)
//--------------------------------------------------------------------------------------------------
bool gt_RetreatHeroesDwarves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_itemDwarves) && (UnitBehaviorCount(EventUnit(), "Lessthen50") == 1) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(48)) != true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnit(), "HeroStasis", 0, 1);
    Wait(2.0, c_timeGame);
    gv_herogroup = UnitGroup(UnitGetType(EventUnit()), gv_itemDwarves, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    AISetUnitSuicide(EventUnit(), false);
    UnitSetPosition(EventUnit(), PointFromId(1474514000), false);
    TimerStart(gv_dwarvesTimer, 3.0, false, c_timeGame);
    TriggerEnable(gt_waitteleportDwarves, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RetreatHeroesDwarves_Init () {
    gt_RetreatHeroesDwarves = TriggerCreate("gt_RetreatHeroesDwarves_Func");
    TriggerEnable(gt_RetreatHeroesDwarves, false);
    TriggerAddEventUnitDamaged(gt_RetreatHeroesDwarves, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: wait teleport (Dwarves)
//--------------------------------------------------------------------------------------------------
bool gt_waitteleportDwarves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_RetreatHeroesDwarves, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_waitteleportDwarves_Init () {
    gt_waitteleportDwarves = TriggerCreate("gt_waitteleportDwarves_Func");
    TriggerEnable(gt_waitteleportDwarves, false);
    TriggerAddEventTimer(gt_waitteleportDwarves, gv_dwarvesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Retreat Heroes (Mordor)
//--------------------------------------------------------------------------------------------------
bool gt_RetreatHeroesMordor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_itemMordor) && (UnitBehaviorCount(EventUnit(), "Lessthen50") == 1) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(51)) != true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnit(), "HeroStasis", 0, 1);
    Wait(2.0, c_timeGame);
    gv_herogroup = UnitGroup(UnitGetType(EventUnit()), gv_itemMordor, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    AISetUnitSuicide(EventUnit(), false);
    UnitSetPosition(EventUnit(), PointFromId(1014966334), false);
    TimerStart(gv_mordorTimer, 3.0, false, c_timeGame);
    TriggerEnable(gt_waitteleportMordor, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RetreatHeroesMordor_Init () {
    gt_RetreatHeroesMordor = TriggerCreate("gt_RetreatHeroesMordor_Func");
    TriggerEnable(gt_RetreatHeroesMordor, false);
    TriggerAddEventUnitDamaged(gt_RetreatHeroesMordor, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: wait teleport (Mordor)
//--------------------------------------------------------------------------------------------------
bool gt_waitteleportMordor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_RetreatHeroesMordor, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_waitteleportMordor_Init () {
    gt_waitteleportMordor = TriggerCreate("gt_waitteleportMordor_Func");
    TriggerEnable(gt_waitteleportMordor, false);
    TriggerAddEventTimer(gt_waitteleportMordor, gv_mordorTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Retreat Heroes (Evil Men)
//--------------------------------------------------------------------------------------------------
bool gt_RetreatHeroesEvilMen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_itemEvilMen) && (UnitBehaviorCount(EventUnit(), "Lessthen50") == 1) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(49)) != true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnit(), "HeroStasis", 0, 1);
    Wait(2.0, c_timeGame);
    gv_herogroup = UnitGroup(UnitGetType(EventUnit()), gv_itemEvilMen, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    AISetUnitSuicide(EventUnit(), false);
    UnitSetPosition(EventUnit(), PointFromId(1207796644), false);
    TimerStart(gv_evilMenTimer, 3.0, false, c_timeGame);
    TriggerEnable(gt_waitteleportEvilMen, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RetreatHeroesEvilMen_Init () {
    gt_RetreatHeroesEvilMen = TriggerCreate("gt_RetreatHeroesEvilMen_Func");
    TriggerEnable(gt_RetreatHeroesEvilMen, false);
    TriggerAddEventUnitDamaged(gt_RetreatHeroesEvilMen, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: wait teleport (Evil Men)
//--------------------------------------------------------------------------------------------------
bool gt_waitteleportEvilMen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_RetreatHeroesEvilMen, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_waitteleportEvilMen_Init () {
    gt_waitteleportEvilMen = TriggerCreate("gt_waitteleportEvilMen_Func");
    TriggerEnable(gt_waitteleportEvilMen, false);
    TriggerAddEventTimer(gt_waitteleportEvilMen, gv_evilMenTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Retreat Heroes (Misty)
//--------------------------------------------------------------------------------------------------
bool gt_RetreatHeroesMisty_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_itemMistyMountains) && (UnitBehaviorCount(EventUnit(), "Lessthen50") == 1) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(49)) != true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_herogroup = UnitGroup(UnitGetType(EventUnit()), gv_itemArnor, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    AISetUnitSuicide(EventUnit(), false);
    if ((EventUnit() == gv_morgoth)) {

    }
    else {
        UnitBehaviorAddPlayer(EventUnit(), "HeroStasis", 0, 1);
        Wait(2.0, c_timeGame);
        UnitSetPosition(EventUnit(), PointFromId(1207796644), false);
    }
    TimerStart(gv_mistyTimer, 3.0, false, c_timeGame);
    TriggerEnable(gt_waitteleportMisty, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RetreatHeroesMisty_Init () {
    gt_RetreatHeroesMisty = TriggerCreate("gt_RetreatHeroesMisty_Func");
    TriggerEnable(gt_RetreatHeroesMisty, false);
    TriggerAddEventUnitDamaged(gt_RetreatHeroesMisty, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: wait teleport (Misty)
//--------------------------------------------------------------------------------------------------
bool gt_waitteleportMisty_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_RetreatHeroesMisty, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_waitteleportMisty_Init () {
    gt_waitteleportMisty = TriggerCreate("gt_waitteleportMisty_Func");
    TriggerEnable(gt_waitteleportMisty, false);
    TriggerAddEventTimer(gt_waitteleportMisty, gv_mistyTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Retreat Heroes (Easterlings)
//--------------------------------------------------------------------------------------------------
bool gt_RetreatHeroesEasterlings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_ittemEasterlings) && (UnitBehaviorCount(EventUnit(), "Lessthen50") == 1) && (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(50)) != true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnit(), "HeroStasis", 0, 1);
    Wait(2.0, c_timeGame);
    gv_herogroup = UnitGroup(UnitGetType(EventUnit()), gv_ittemEasterlings, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    AISetUnitSuicide(EventUnit(), false);
    UnitSetPosition(EventUnit(), PointFromId(1753259503), false);
    TimerStart(gv_easterlingsTimer, 3.0, false, c_timeGame);
    TriggerEnable(gt_waitteleportEasterlings, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RetreatHeroesEasterlings_Init () {
    gt_RetreatHeroesEasterlings = TriggerCreate("gt_RetreatHeroesEasterlings_Func");
    TriggerEnable(gt_RetreatHeroesEasterlings, false);
    TriggerAddEventUnitDamaged(gt_RetreatHeroesEasterlings, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: wait teleport (Easterlings)
//--------------------------------------------------------------------------------------------------
bool gt_waitteleportEasterlings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_RetreatHeroesEasterlings, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_waitteleportEasterlings_Init () {
    gt_waitteleportEasterlings = TriggerCreate("gt_waitteleportEasterlings_Func");
    TriggerEnable(gt_waitteleportEasterlings, false);
    TriggerAddEventTimer(gt_waitteleportEasterlings, gv_easterlingsTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Can Research (East Gondor)
//--------------------------------------------------------------------------------------------------
bool gt_AICanResearchEastGondor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1325808467)), "AIEastGondorBase", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1325808467)) == true))) {
        AIResearch(UnitGetOwner(UnitFromId(1325808467)), 18, -1, "AIEastGondorBase");
    }
    else {
        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1325808467)), "MinasAnorUpgradespawn6", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1325808467)) == true))) {
            AIResearch(UnitGetOwner(UnitFromId(1325808467)), 15, -1, "MinasAnorUpgradespawn6");
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1897128707)), "OsgiliathUpgradespawn4", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1897128707)) == true))) {
                AIResearch(UnitGetOwner(UnitFromId(1897128707)), 14, -1, "OsgiliathUpgradespawn4");
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(100603755)), "LamedonUpgradespawn4", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(100603755)) == true))) {
                    AIResearch(UnitGetOwner(UnitFromId(100603755)), 13, -1, "LamedonUpgradespawn4");
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1325808467)), "DorEnErnilUpgradespawn3", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1231497359)) == true))) {
                        AIResearch(UnitGetOwner(UnitFromId(1325808467)), 12, -1, "DorEnErnilUpgradespawn3");
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1325808467)), "PelargirUpgradespawn2", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(989327831)) == true))) {
                            AIResearch(UnitGetOwner(UnitFromId(1325808467)), 11, -1, "PelargirUpgradespawn2");
                        }
                        else {
                            TriggerEnable(TriggerGetCurrent(), false);
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AICanResearchEastGondor_Init () {
    gt_AICanResearchEastGondor = TriggerCreate("gt_AICanResearchEastGondor_Func");
    TriggerEnable(gt_AICanResearchEastGondor, false);
    TriggerAddEventTimePeriodic(gt_AICanResearchEastGondor, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Can Research (Elves)
//--------------------------------------------------------------------------------------------------
bool gt_AICanResearchElves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(677747402)), "AIElvesBase", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(677747402)) == true))) {
        AIResearch(UnitGetOwner(UnitFromId(677747402)), 30, -1, "AIElvesBase");
    }
    else {
        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(677747402)), "GreenwoodUpgradespawn4", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(677747402)) == true))) {
            AIResearch(UnitGetOwner(UnitFromId(677747402)), 15, -1, "GreenwoodUpgradespawn4");
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(2050115423)), "LothorienUpgradespawn4", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(2050115423)) == true))) {
                AIResearch(UnitGetOwner(UnitFromId(2050115423)), 14, -1, "LothorienUpgradespawn4");
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(649935218)), "MithlondUpgradespawn4", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(649935218)) == true))) {
                    AIResearch(UnitGetOwner(UnitFromId(649935218)), 13, -1, "MithlondUpgradespawn4");
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(969977804)), "AmonLancUpgradespawn3", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(969977804)) == true))) {
                        AIResearch(UnitGetOwner(UnitFromId(969977804)), 12, -1, "AmonLancUpgradespawn3");
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(502699174)), "HarlondUpgradeSpawn", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(502699174)) == true))) {
                            AIResearch(UnitGetOwner(UnitFromId(502699174)), 11, -1, "HarlondUpgradeSpawn");
                        }
                        else {
                            if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(14086565)), "GreenwoodhallsUpgradespawn2", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(14086565)) == true))) {
                                AIResearch(UnitGetOwner(UnitFromId(14086565)), 10, -1, "GreenwoodhallsUpgradespawn2");
                            }
                            else {
                                if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1824510748)), "GardenOfEntwivesUpgradespawn2", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1824510748)) == true))) {
                                    AIResearch(UnitGetOwner(UnitFromId(1824510748)), 9, -1, "GardenOfEntwivesUpgradespawn2");
                                }
                                else {
                                    TriggerEnable(TriggerGetCurrent(), false);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AICanResearchElves_Init () {
    gt_AICanResearchElves = TriggerCreate("gt_AICanResearchElves_Func");
    TriggerEnable(gt_AICanResearchElves, false);
    TriggerAddEventTimePeriodic(gt_AICanResearchElves, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Can Research (Arnor)
//--------------------------------------------------------------------------------------------------
bool gt_AICanResearchArnor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(439325741)), "AIArnorBase", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(439325741)) == true))) {
        AIResearch(UnitGetOwner(UnitFromId(439325741)), 30, -1, "AIArnorBase");
    }
    else {
        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(439325741)), "AnnuminasUpgradespawn4", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(439325741)) == true))) {
            AIResearch(UnitGetOwner(UnitFromId(439325741)), 15, -1, "AnnuminasUpgradespawn4");
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1213833690)), "BarrowDownsUpgradespawn3", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1213833690)) == true))) {
                AIResearch(UnitGetOwner(UnitFromId(1213833690)), 14, -1, "BarrowDownsUpgradespawn3");
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(573473263)), "EvendimUpgradespawn3", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(573473263)) == true))) {
                    AIResearch(UnitGetOwner(UnitFromId(573473263)), 13, -1, "EvendimUpgradespawn3");
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1067839632)), "FornostUpgradespawn3", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1067839632)) == true))) {
                        AIResearch(UnitGetOwner(UnitFromId(1067839632)), 12, -1, "FornostUpgradespawn3");
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(650634245)), "AmonsulUpgradespawn3", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(650634245)) == true))) {
                            AIResearch(UnitGetOwner(UnitFromId(650634245)), 11, -1, "AmonsulUpgradespawn3");
                        }
                        else {
                            if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1731438873)), "MinhiarthUpgradespawn3", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1731438873)) == true))) {
                                AIResearch(UnitGetOwner(UnitFromId(1731438873)), 10, -1, "MinhiarthUpgradespawn3");
                            }
                            else {
                                if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1087886462)), "TharbadUpgradespawn2", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1087886462)) == true))) {
                                    AIResearch(UnitGetOwner(UnitFromId(1087886462)), 9, -1, "TharbadUpgradespawn2");
                                }
                                else {
                                    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1550051897)), "LondDaerUpgradespawn2", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1550051897)) == true))) {
                                        AIResearch(UnitGetOwner(UnitFromId(1550051897)), 8, -1, "LondDaerUpgradespawn2");
                                    }
                                    else {
                                        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(953071559)), "LastBridgeUpgradespawn", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(953071559)) == true))) {
                                            AIResearch(UnitGetOwner(UnitFromId(953071559)), 7, -1, "LastBridgeUpgradespawn");
                                        }
                                        else {
                                            if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(421005958)), "OuterRhuadurUpgradespawn2", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(421005958)) == true))) {
                                                AIResearch(UnitGetOwner(UnitFromId(421005958)), 6, -1, "OuterRhuadurUpgradespawn2");
                                            }
                                            else {
                                                TriggerEnable(TriggerGetCurrent(), false);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AICanResearchArnor_Init () {
    gt_AICanResearchArnor = TriggerCreate("gt_AICanResearchArnor_Func");
    TriggerEnable(gt_AICanResearchArnor, false);
    TriggerAddEventTimePeriodic(gt_AICanResearchArnor, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Can Research (West Gondor)
//--------------------------------------------------------------------------------------------------
bool gt_AICanResearchWestGondor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(2026638653)), "AIWestGondorBase", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(2026638653)) == true))) {
        AIResearch(UnitGetOwner(UnitFromId(2026638653)), 30, -1, "AIWestGondorBase");
    }
    else {
        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(2026638653)), "DolAmrothUpgradespawn5", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(2026638653)) == true))) {
            AIResearch(UnitGetOwner(UnitFromId(2026638653)), 15, -1, "DolAmrothUpgradespawn5");
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1068266261)), "ErechUpgradespawn4", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1068266261)) == true))) {
                AIResearch(UnitGetOwner(UnitFromId(1068266261)), 14, -1, "ErechUpgradespawn4");
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1919917573)), "PinnathGaelinUpgradespawn3", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1919917573)) == true))) {
                    AIResearch(UnitGetOwner(UnitFromId(1919917573)), 13, -1, "PinnathGaelinUpgradespawn3");
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(126626611)), "AnfalasUpgradespawn2", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(126626611)) == true))) {
                        AIResearch(UnitGetOwner(UnitFromId(126626611)), 12, -1, "AnfalasUpgradespawn2");
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(490175528)), "LefnuiUpgradespawn3", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(490175528)) == true))) {
                            AIResearch(UnitGetOwner(UnitFromId(490175528)), 11, -1, "LefnuiUpgradespawn3");
                        }
                        else {
                            if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1421689034)), "OrthancUpgradespawn3", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1421689034)) == true))) {
                                AIResearch(UnitGetOwner(UnitFromId(1421689034)), 10, -1, "OrthancUpgradespawn3");
                            }
                            else {
                                TriggerEnable(TriggerGetCurrent(), false);
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AICanResearchWestGondor_Init () {
    gt_AICanResearchWestGondor = TriggerCreate("gt_AICanResearchWestGondor_Func");
    TriggerEnable(gt_AICanResearchWestGondor, false);
    TriggerAddEventTimePeriodic(gt_AICanResearchWestGondor, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Can Research (Dwarves)
//--------------------------------------------------------------------------------------------------
bool gt_AICanResearchDwarves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(221478581)), "AIDwarvesBase", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(221478581)) == true))) {
        AIResearch(UnitGetOwner(UnitFromId(221478581)), 30, -1, "AIDwarvesBase");
    }
    else {
        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(221478581)), "KhazaUpgradespawn4", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(221478581)) == true))) {
            AIResearch(UnitGetOwner(UnitFromId(221478581)), 15, -1, "KhazaUpgradespawn4");
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(974373087)), "BlueMountainsUpgradespawn4", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(974373087)) == true))) {
                AIResearch(UnitGetOwner(UnitFromId(974373087)), 14, -1, "BlueMountainsUpgradespawn4");
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(333958134)), "IronHillsUpgradespawn4", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(333958134)) == true))) {
                    AIResearch(UnitGetOwner(UnitFromId(333958134)), 13, -1, "IronHillsUpgradespawn4");
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1045690131)), "EreborUpgradespawn3", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1045690131)) == true))) {
                        AIResearch(UnitGetOwner(UnitFromId(1045690131)), 12, -1, "EreborUpgradespawn3");
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(699489457)), "DaleUpgradespawn3", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(699489457)) == true))) {
                            AIResearch(UnitGetOwner(UnitFromId(699489457)), 11, -1, "DaleUpgradespawn3");
                        }
                        else {
                            TriggerEnable(TriggerGetCurrent(), false);
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AICanResearchDwarves_Init () {
    gt_AICanResearchDwarves = TriggerCreate("gt_AICanResearchDwarves_Func");
    TriggerEnable(gt_AICanResearchDwarves, false);
    TriggerAddEventTimePeriodic(gt_AICanResearchDwarves, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Can Research (Mordor)
//--------------------------------------------------------------------------------------------------
bool gt_AICanResearchMordor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1930801371)), "AIMordorBase", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1930801371)) == true))) {
        AIResearch(UnitGetOwner(UnitFromId(1930801371)), 29, -1, "AIMordorBase");
    }
    else {
        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1930801371)), "BaradDurUpgradespawn6", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1930801371)) == true))) {
            AIResearch(UnitGetOwner(UnitFromId(1930801371)), 15, -1, "BaradDurUpgradespawn6");
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(509044797)), "NurnUpgradespawn4", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(509044797)) == true))) {
                AIResearch(UnitGetOwner(UnitFromId(509044797)), 14, -1, "NurnUpgradespawn4");
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1569959845)), "UdunUpgradespawn4", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1569959845)) == true))) {
                    AIResearch(UnitGetOwner(UnitFromId(1569959845)), 13, -1, "UdunUpgradespawn4");
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(315361432)), "MinasMorgulUpgradespawn4", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(315361432)) == true))) {
                        AIResearch(UnitGetOwner(UnitFromId(315361432)), 12, -1, "MinasMorgulUpgradespawn4");
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1641847481)), "CirthNurnUpgradespawn3", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1641847481)) == true))) {
                            AIResearch(UnitGetOwner(UnitFromId(1641847481)), 11, -1, "CirthNurnUpgradespawn3");
                        }
                        else {
                            TriggerEnable(TriggerGetCurrent(), false);
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AICanResearchMordor_Init () {
    gt_AICanResearchMordor = TriggerCreate("gt_AICanResearchMordor_Func");
    TriggerEnable(gt_AICanResearchMordor, false);
    TriggerAddEventTimePeriodic(gt_AICanResearchMordor, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Can Research (Misty Mountain)
//--------------------------------------------------------------------------------------------------
bool gt_AICanResearchMistyMountain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1989109597)), "AIMistyMountainsBase", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1989109597)) == true))) {
        AIResearch(UnitGetOwner(UnitFromId(1989109597)), 30, -1, "AIMistyMountainsBase");
    }
    else {
        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(2081578249)), "WitheredheathUpgradespawn4", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(2081578249)) == true))) {
            AIResearch(UnitGetOwner(UnitFromId(2081578249)), 15, -1, "WitheredheathUpgradespawn4");
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1989109597)), "MountGundabadUpgradespawn5", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1989109597)) == true))) {
                AIResearch(UnitGetOwner(UnitFromId(1989109597)), 14, -1, "MountGundabadUpgradespawn5");
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1492802972)), "FrozenPlainsUpgradespawn3", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1492802972)) == true))) {
                    AIResearch(UnitGetOwner(UnitFromId(1492802972)), 13, -1, "FrozenPlainsUpgradespawn3");
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(853024071)), "GoblinTownUpgradespawn3", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(853024071)) == true))) {
                        AIResearch(UnitGetOwner(UnitFromId(853024071)), 12, -1, "GoblinTownUpgradespawn3");
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1716558742)), "EttenmoorsUpgradespawn3", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1716558742)) == true))) {
                            AIResearch(UnitGetOwner(UnitFromId(1716558742)), 11, -1, "EttenmoorsUpgradespawn3");
                        }
                        else {
                            if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1040499259)), "MountGramUpgradespawn3", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1040499259)) == true))) {
                                AIResearch(UnitGetOwner(UnitFromId(1040499259)), 10, -1, "MountGramUpgradespawn3");
                            }
                            else {
                                TriggerEnable(TriggerGetCurrent(), false);
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AICanResearchMistyMountain_Init () {
    gt_AICanResearchMistyMountain = TriggerCreate("gt_AICanResearchMistyMountain_Func");
    TriggerEnable(gt_AICanResearchMistyMountain, false);
    TriggerAddEventTimePeriodic(gt_AICanResearchMistyMountain, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Can Research (Easterlings)
//--------------------------------------------------------------------------------------------------
bool gt_AICanResearchEasterlings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1782954501)), "AIEasterlingsBase", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1782954501)) == true))) {
        AIResearch(UnitGetOwner(UnitFromId(1782954501)), 30, -1, "AIEasterlingsBase");
    }
    else {
        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1782954501)), "RhunUpgradespawn5", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1782954501)) == true))) {
            AIResearch(UnitGetOwner(UnitFromId(1782954501)), 15, -1, "RhunUpgradespawn5");
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(418557182)), "RhovanionUpgradespawn4", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(418557182)) == true))) {
                AIResearch(UnitGetOwner(UnitFromId(418557182)), 14, -1, "RhovanionUpgradespawn4");
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1948731451)), "CarnenUpgradespawn3", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1948731451)) == true))) {
                    AIResearch(UnitGetOwner(UnitFromId(1948731451)), 13, -1, "CarnenUpgradespawn3");
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1353683019)), "EsgarothUpgradespawn3", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1353683019)) == true))) {
                        AIResearch(UnitGetOwner(UnitFromId(1353683019)), 12, -1, "EsgarothUpgradespawn3");
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1164482133)), "DorwinionUpgradespawn3", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1164482133)) == true))) {
                            AIResearch(UnitGetOwner(UnitFromId(1164482133)), 11, -1, "DorwinionUpgradespawn3");
                        }
                        else {
                            if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1767098372)), "SouthernEncampmentUpgradespawn3", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1767098372)) == true))) {
                                AIResearch(UnitGetOwner(UnitFromId(1767098372)), 10, -1, "SouthernEncampmentUpgradespawn3");
                            }
                            else {
                                TriggerEnable(TriggerGetCurrent(), false);
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AICanResearchEasterlings_Init () {
    gt_AICanResearchEasterlings = TriggerCreate("gt_AICanResearchEasterlings_Func");
    TriggerEnable(gt_AICanResearchEasterlings, false);
    TriggerAddEventTimePeriodic(gt_AICanResearchEasterlings, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Can Research (Evil men)
//--------------------------------------------------------------------------------------------------
bool gt_AICanResearchEvilmen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1948361748)), "AIEvilMenBase", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1948361748)) == true))) {
        AIResearch(UnitGetOwner(UnitFromId(1948361748)), 30, -1, "AIEvilMenBase");
    }
    else {
        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1948361748)), "DruwaithUpgradeSpawn4", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1948361748)) == true))) {
            AIResearch(UnitGetOwner(UnitFromId(1948361748)), 19, -1, "DruwaithUpgradeSpawn4");
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1920784909)), "HoarddaleUpgradeSpawn4", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1920784909)) == true))) {
                AIResearch(UnitGetOwner(UnitFromId(1920784909)), 18, -1, "HoarddaleUpgradeSpawn4");
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1472757999)), "DunlandUpgradespawn3", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1472757999)) == true))) {
                    AIResearch(UnitGetOwner(UnitFromId(1472757999)), 17, -1, "DunlandUpgradespawn3");
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1330193940)), "NorthEnedwaithUpgradespawn2", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1330193940)) == true))) {
                        AIResearch(UnitGetOwner(UnitFromId(1330193940)), 16, -1, "NorthEnedwaithUpgradespawn2");
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1122522248)), "SouthEnedwaithUpgradespawn2", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1122522248)) == true))) {
                            AIResearch(UnitGetOwner(UnitFromId(1122522248)), 15, -1, "SouthEnedwaithUpgradespawn2");
                        }
                        else {
                            if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1521351733)), "TrollshawsUpgradeSpawn3", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(1521351733)) == true))) {
                                AIResearch(UnitGetOwner(UnitFromId(1521351733)), 14, -1, "TrollshawsUpgradeSpawn3");
                            }
                            else {
                                if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(761806837)), "DunharrowUpgradeSpawn3", c_techCountCompleteOnly) == 0) && ((UnitIsAlive(UnitFromId(761806837)) == true))) {
                                    AIResearch(UnitGetOwner(UnitFromId(761806837)), 13, -1, "DunharrowUpgradeSpawn3");
                                }
                                else {
                                    TriggerEnable(TriggerGetCurrent(), false);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AICanResearchEvilmen_Init () {
    gt_AICanResearchEvilmen = TriggerCreate("gt_AICanResearchEvilmen_Func");
    TriggerEnable(gt_AICanResearchEvilmen, false);
    TriggerAddEventTimePeriodic(gt_AICanResearchEvilmen, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI normal difficulty
//--------------------------------------------------------------------------------------------------
bool gt_AInormaldifficulty_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerType(gv_itemEastGondor) == c_playerTypeComputer) && (!((PlayerType(gv_itemDwarves) == c_playerTypeUser) || (PlayerType(gv_itemElves) == c_playerTypeUser) || (PlayerType(gv_itemArnor) == c_playerTypeUser) || (PlayerType(gv_itemWestGondor) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(1325808467)), 31, -1, "AIEastGondorHard");
    }

    if ((PlayerType(gv_itemElves) == c_playerTypeComputer) && (!((PlayerType(gv_itemDwarves) == c_playerTypeUser) || (PlayerType(gv_itemArnor) == c_playerTypeUser) || (PlayerType(gv_itemEastGondor) == c_playerTypeUser) || (PlayerType(gv_itemWestGondor) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(677747402)), 31, -1, "AIElvesHard");
    }

    if ((PlayerType(gv_itemArnor) == c_playerTypeComputer) && (!((PlayerType(gv_itemDwarves) == c_playerTypeUser) || (PlayerType(gv_itemEastGondor) == c_playerTypeUser) || (PlayerType(gv_itemElves) == c_playerTypeUser) || (PlayerType(gv_itemWestGondor) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(439325741)), 31, -1, "AIArnorHard");
    }

    if ((PlayerType(gv_itemWestGondor) == c_playerTypeComputer) && (!((PlayerType(gv_itemDwarves) == c_playerTypeUser) || (PlayerType(gv_itemArnor) == c_playerTypeUser) || (PlayerType(gv_itemElves) == c_playerTypeUser) || (PlayerType(gv_itemEastGondor) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(2026638653)), 31, -1, "AIWestGondorHard");
    }

    if ((PlayerType(gv_itemDwarves) == c_playerTypeComputer) && (!((PlayerType(gv_itemEastGondor) == c_playerTypeUser) || (PlayerType(gv_itemArnor) == c_playerTypeUser) || (PlayerType(gv_itemElves) == c_playerTypeUser) || (PlayerType(gv_itemWestGondor) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(221478581)), 31, -1, "AIDwarvesHard");
    }

    if ((PlayerType(gv_itemMordor) == c_playerTypeComputer) && (!((PlayerType(gv_itemEvilMen) == c_playerTypeUser) || (PlayerType(gv_itemMistyMountains) == c_playerTypeUser) || (PlayerType(gv_ittemEasterlings) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(1930801371)), 31, -1, "AIMordorNormal");
    }

    if ((PlayerType(gv_itemEvilMen) == c_playerTypeComputer) && (!((PlayerType(gv_itemMordor) == c_playerTypeUser) || (PlayerType(gv_itemMistyMountains) == c_playerTypeUser) || (PlayerType(gv_ittemEasterlings) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(1948361748)), 31, -1, "AIEvilMenNormal");
    }

    if ((PlayerType(gv_itemMistyMountains) == c_playerTypeComputer) && (!((PlayerType(gv_itemEvilMen) == c_playerTypeUser) || (PlayerType(gv_itemMordor) == c_playerTypeUser) || (PlayerType(gv_ittemEasterlings) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(1989109597)), 31, -1, "AIMistyMountainsNormal");
    }

    if ((PlayerType(gv_ittemEasterlings) == c_playerTypeComputer) && (!((PlayerType(gv_itemEvilMen) == c_playerTypeUser) || (PlayerType(gv_itemMistyMountains) == c_playerTypeUser) || (PlayerType(gv_itemMordor) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(1782954501)), 31, -1, "AIEasterlingsNormal");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AInormaldifficulty_Init () {
    gt_AInormaldifficulty = TriggerCreate("gt_AInormaldifficulty_Func");
    TriggerEnable(gt_AInormaldifficulty, false);
    TriggerAddEventTimePeriodic(gt_AInormaldifficulty, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Hard difficulty
//--------------------------------------------------------------------------------------------------
bool gt_AIHarddifficulty_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerType(gv_itemEastGondor) == c_playerTypeComputer) && (!((PlayerType(gv_itemDwarves) == c_playerTypeUser) || (PlayerType(gv_itemElves) == c_playerTypeUser) || (PlayerType(gv_itemArnor) == c_playerTypeUser) || (PlayerType(gv_itemWestGondor) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(1325808467)), 31, -1, "AIEastGondorHard");
    }

    if ((PlayerType(gv_itemElves) == c_playerTypeComputer) && (!((PlayerType(gv_itemDwarves) == c_playerTypeUser) || (PlayerType(gv_itemArnor) == c_playerTypeUser) || (PlayerType(gv_itemEastGondor) == c_playerTypeUser) || (PlayerType(gv_itemWestGondor) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(677747402)), 31, -1, "AIElvesHard");
    }

    if ((PlayerType(gv_itemArnor) == c_playerTypeComputer) && (!((PlayerType(gv_itemDwarves) == c_playerTypeUser) || (PlayerType(gv_itemEastGondor) == c_playerTypeUser) || (PlayerType(gv_itemElves) == c_playerTypeUser) || (PlayerType(gv_itemWestGondor) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(439325741)), 31, -1, "AIArnorHard");
    }

    if ((PlayerType(gv_itemWestGondor) == c_playerTypeComputer) && (!((PlayerType(gv_itemDwarves) == c_playerTypeUser) || (PlayerType(gv_itemArnor) == c_playerTypeUser) || (PlayerType(gv_itemElves) == c_playerTypeUser) || (PlayerType(gv_itemEastGondor) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(2026638653)), 31, -1, "AIWestGondorHard");
    }

    if ((PlayerType(gv_itemDwarves) == c_playerTypeComputer) && (!((PlayerType(gv_itemEastGondor) == c_playerTypeUser) || (PlayerType(gv_itemArnor) == c_playerTypeUser) || (PlayerType(gv_itemElves) == c_playerTypeUser) || (PlayerType(gv_itemWestGondor) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(221478581)), 31, -1, "AIDwarvesHard");
    }

    if ((PlayerType(gv_itemMordor) == c_playerTypeComputer) && (!((PlayerType(gv_itemEvilMen) == c_playerTypeUser) || (PlayerType(gv_itemMistyMountains) == c_playerTypeUser) || (PlayerType(gv_ittemEasterlings) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(1930801371)), 31, -1, "AIMordorHard");
    }

    if ((PlayerType(gv_itemEvilMen) == c_playerTypeComputer) && (!((PlayerType(gv_itemMordor) == c_playerTypeUser) || (PlayerType(gv_itemMistyMountains) == c_playerTypeUser) || (PlayerType(gv_ittemEasterlings) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(1948361748)), 31, -1, "AIEvilMenHard");
    }

    if ((PlayerType(gv_itemMistyMountains) == c_playerTypeComputer) && (!((PlayerType(gv_itemEvilMen) == c_playerTypeUser) || (PlayerType(gv_itemMordor) == c_playerTypeUser) || (PlayerType(gv_ittemEasterlings) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(1989109597)), 31, -1, "AIMistyMountainsHard");
    }

    if ((PlayerType(gv_ittemEasterlings) == c_playerTypeComputer) && (!((PlayerType(gv_itemEvilMen) == c_playerTypeUser) || (PlayerType(gv_itemMistyMountains) == c_playerTypeUser) || (PlayerType(gv_itemMordor) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(1782954501)), 31, -1, "AIEasterlingsHard");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIHarddifficulty_Init () {
    gt_AIHarddifficulty = TriggerCreate("gt_AIHarddifficulty_Func");
    TriggerEnable(gt_AIHarddifficulty, false);
    TriggerAddEventTimePeriodic(gt_AIHarddifficulty, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Speed Mordor
//--------------------------------------------------------------------------------------------------
bool gt_UpgradeSpeedMordor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(UnitFromId(1930801371), "TimeWarpProduction") != 1)) {
        UnitBehaviorAdd(UnitFromId(1930801371), "TimeWarpProduction", UnitFromId(1288358028), 1);
        UnitBehaviorAdd(UnitFromId(1569959845), "TimeWarpProduction", UnitFromId(1288358028), 1);
        UnitBehaviorAdd(UnitFromId(315361432), "TimeWarpProduction", UnitFromId(1288358028), 1);
        UnitBehaviorAdd(UnitFromId(509044797), "TimeWarpProduction", UnitFromId(1288358028), 1);
        UnitBehaviorAdd(UnitFromId(1641847481), "TimeWarpProduction", UnitFromId(1288358028), 1);
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradeSpeedMordor_Init () {
    gt_UpgradeSpeedMordor = TriggerCreate("gt_UpgradeSpeedMordor_Func");
    TriggerEnable(gt_UpgradeSpeedMordor, false);
    TriggerAddEventTimePeriodic(gt_UpgradeSpeedMordor, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Uprade Speed Misty mountains
//--------------------------------------------------------------------------------------------------
bool gt_UpradeSpeedMistymountains_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(UnitFromId(1989109597), "TimeWarpProduction") != 1)) {
        UnitBehaviorAdd(UnitFromId(1989109597), "TimeWarpProduction", UnitFromId(1288358028), 1);
        UnitBehaviorAdd(UnitFromId(853024071), "TimeWarpProduction", UnitFromId(1288358028), 1);
        UnitBehaviorAdd(UnitFromId(2081578249), "TimeWarpProduction", UnitFromId(1288358028), 1);
        UnitBehaviorAdd(UnitFromId(1716558742), "TimeWarpProduction", UnitFromId(1288358028), 1);
        UnitBehaviorAdd(UnitFromId(1492802972), "TimeWarpProduction", UnitFromId(1288358028), 1);
        UnitBehaviorAdd(UnitFromId(1040499259), "TimeWarpProduction", UnitFromId(1288358028), 1);
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpradeSpeedMistymountains_Init () {
    gt_UpradeSpeedMistymountains = TriggerCreate("gt_UpradeSpeedMistymountains_Func");
    TriggerEnable(gt_UpradeSpeedMistymountains, false);
    TriggerAddEventTimePeriodic(gt_UpradeSpeedMistymountains, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Speed Easterlings
//--------------------------------------------------------------------------------------------------
bool gt_UpgradeSpeedEasterlings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(UnitFromId(1782954501), "TimeWarpProduction") != 1)) {
        UnitBehaviorAdd(UnitFromId(1782954501), "TimeWarpProduction", UnitFromId(1288358028), 1);
        UnitBehaviorAdd(UnitFromId(418557182), "TimeWarpProduction", UnitFromId(1288358028), 1);
        UnitBehaviorAdd(UnitFromId(1164482133), "TimeWarpProduction", UnitFromId(1288358028), 1);
        UnitBehaviorAdd(UnitFromId(1353683019), "TimeWarpProduction", UnitFromId(1288358028), 1);
        UnitBehaviorAdd(UnitFromId(1767098372), "TimeWarpProduction", UnitFromId(1288358028), 1);
        UnitBehaviorAdd(UnitFromId(1948731451), "TimeWarpProduction", UnitFromId(1288358028), 1);
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradeSpeedEasterlings_Init () {
    gt_UpgradeSpeedEasterlings = TriggerCreate("gt_UpgradeSpeedEasterlings_Func");
    TriggerEnable(gt_UpgradeSpeedEasterlings, false);
    TriggerAddEventTimePeriodic(gt_UpgradeSpeedEasterlings, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Speed Evil Men
//--------------------------------------------------------------------------------------------------
bool gt_UpgradeSpeedEvilMen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(UnitFromId(1948361748), "TimeWarpProduction") != 1)) {
        UnitBehaviorAdd(UnitFromId(1948361748), "TimeWarpProduction", UnitFromId(1288358028), 1);
        UnitBehaviorAdd(UnitFromId(1122522248), "TimeWarpProduction", UnitFromId(1288358028), 1);
        UnitBehaviorAdd(UnitFromId(761806837), "TimeWarpProduction", UnitFromId(1288358028), 1);
        UnitBehaviorAdd(UnitFromId(1330193940), "TimeWarpProduction", UnitFromId(1288358028), 1);
        UnitBehaviorAdd(UnitFromId(1472757999), "TimeWarpProduction", UnitFromId(1288358028), 1);
        UnitBehaviorAdd(UnitFromId(1521351733), "TimeWarpProduction", UnitFromId(1288358028), 1);
        UnitBehaviorAdd(UnitFromId(1920784909), "TimeWarpProduction", UnitFromId(1288358028), 1);
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradeSpeedEvilMen_Init () {
    gt_UpgradeSpeedEvilMen = TriggerCreate("gt_UpgradeSpeedEvilMen_Func");
    TriggerEnable(gt_UpgradeSpeedEvilMen, false);
    TriggerAddEventTimePeriodic(gt_UpgradeSpeedEvilMen, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Brutal Difficulty
//--------------------------------------------------------------------------------------------------
bool gt_AIBrutalDifficulty_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerType(gv_itemEastGondor) == c_playerTypeComputer) && (!((PlayerType(gv_itemDwarves) == c_playerTypeUser) || (PlayerType(gv_itemElves) == c_playerTypeUser) || (PlayerType(gv_itemArnor) == c_playerTypeUser) || (PlayerType(gv_itemWestGondor) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(1325808467)), 32, -1, "AIEastGondorHard");
    }

    if ((PlayerType(gv_itemElves) == c_playerTypeComputer) && (!((PlayerType(gv_itemDwarves) == c_playerTypeUser) || (PlayerType(gv_itemArnor) == c_playerTypeUser) || (PlayerType(gv_itemEastGondor) == c_playerTypeUser) || (PlayerType(gv_itemWestGondor) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(677747402)), 32, -1, "AIElvesHard");
    }

    if ((PlayerType(gv_itemArnor) == c_playerTypeComputer) && (!((PlayerType(gv_itemDwarves) == c_playerTypeUser) || (PlayerType(gv_itemEastGondor) == c_playerTypeUser) || (PlayerType(gv_itemElves) == c_playerTypeUser) || (PlayerType(gv_itemWestGondor) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(439325741)), 32, -1, "AIArnorHard");
    }

    if ((PlayerType(gv_itemWestGondor) == c_playerTypeComputer) && (!((PlayerType(gv_itemDwarves) == c_playerTypeUser) || (PlayerType(gv_itemArnor) == c_playerTypeUser) || (PlayerType(gv_itemElves) == c_playerTypeUser) || (PlayerType(gv_itemEastGondor) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(2026638653)), 32, -1, "AIWestGondorHard");
    }

    if ((PlayerType(gv_itemDwarves) == c_playerTypeComputer) && (!((PlayerType(gv_itemEastGondor) == c_playerTypeUser) || (PlayerType(gv_itemArnor) == c_playerTypeUser) || (PlayerType(gv_itemElves) == c_playerTypeUser) || (PlayerType(gv_itemWestGondor) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(221478581)), 32, -1, "AIDwarvesHard");
    }

    if ((PlayerType(gv_itemMordor) == c_playerTypeComputer) && (!((PlayerType(gv_itemEvilMen) == c_playerTypeUser) || (PlayerType(gv_ittemEasterlings) == c_playerTypeUser) || (PlayerType(gv_itemMistyMountains) == c_playerTypeUser)))) {
        TriggerEnable(gt_UpgradeSpeedMordor, true);
        AIResearch(UnitGetOwner(UnitFromId(1930801371)), 32, -1, "AIMordorBrutal");
    }

    if ((PlayerType(gv_itemEvilMen) == c_playerTypeComputer) && (!((PlayerType(gv_itemMordor) == c_playerTypeUser) || (PlayerType(gv_itemMistyMountains) == c_playerTypeUser) || (PlayerType(gv_ittemEasterlings) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(1948361748)), 32, -1, "AIEvilMenBrutal");
        TriggerEnable(gt_UpgradeSpeedEvilMen, true);
    }

    if ((PlayerType(gv_itemMistyMountains) == c_playerTypeComputer) && (!((PlayerType(gv_itemEvilMen) == c_playerTypeUser) || (PlayerType(gv_itemMordor) == c_playerTypeUser) || (PlayerType(gv_ittemEasterlings) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(1989109597)), 32, -1, "AIMistyMountainsBrutal");
        TriggerEnable(gt_UpradeSpeedMistymountains, true);
    }

    if ((PlayerType(gv_ittemEasterlings) == c_playerTypeComputer) && (!((PlayerType(gv_itemEvilMen) == c_playerTypeUser) || (PlayerType(gv_itemMistyMountains) == c_playerTypeUser) || (PlayerType(gv_itemMordor) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(1782954501)), 32, -1, "AIEasterlingsBrutal");
        TriggerEnable(gt_UpgradeSpeedEasterlings, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIBrutalDifficulty_Init () {
    gt_AIBrutalDifficulty = TriggerCreate("gt_AIBrutalDifficulty_Func");
    TriggerEnable(gt_AIBrutalDifficulty, false);
    TriggerAddEventTimePeriodic(gt_AIBrutalDifficulty, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable Tulkas
//--------------------------------------------------------------------------------------------------
bool gt_EnableTulkas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ActivateTulkas, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableTulkas_Init () {
    gt_EnableTulkas = TriggerCreate("gt_EnableTulkas_Func");
    TriggerEnable(gt_EnableTulkas, false);
    TriggerAddEventTimeElapsed(gt_EnableTulkas, 600.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Tulkas
//--------------------------------------------------------------------------------------------------
bool gt_ActivateTulkas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 0))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(53)) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "RaynorCommando") || (UnitGetType(EventUnit()) == "HERC")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TychusChaingun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1956332581));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6638B186"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_tulkasBeacon);
    TriggerEnable(gt_TulkasDeath, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateTulkas_Init () {
    gt_ActivateTulkas = TriggerCreate("gt_ActivateTulkas_Func");
    TriggerEnable(gt_ActivateTulkas, false);
    TriggerAddEventUnitBehaviorChange(gt_ActivateTulkas, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable Aule
//--------------------------------------------------------------------------------------------------
bool gt_EnableAule_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ActivateAule, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableAule_Init () {
    gt_EnableAule = TriggerCreate("gt_EnableAule_Func");
    TriggerEnable(gt_EnableAule, false);
    TriggerAddEventTimeElapsed(gt_EnableAule, 900.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Aule
//--------------------------------------------------------------------------------------------------
bool gt_ActivateAule_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 0))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(54)) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "FenixChampion") || (UnitGetType(EventUnit()) == "Warbot")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "StoneZealot", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(486097910));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/DBB66D1D"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_auleBeacon);
    TriggerEnable(gt_AuleDeath, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateAule_Init () {
    gt_ActivateAule = TriggerCreate("gt_ActivateAule_Func");
    TriggerEnable(gt_ActivateAule, false);
    TriggerAddEventUnitBehaviorChange(gt_ActivateAule, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable Ulmo
//--------------------------------------------------------------------------------------------------
bool gt_EnableUlmo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ActivateUlmo, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableUlmo_Init () {
    gt_EnableUlmo = TriggerCreate("gt_EnableUlmo_Func");
    TriggerEnable(gt_EnableUlmo, false);
    TriggerAddEventTimeElapsed(gt_EnableUlmo, 1200.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Ulmo
//--------------------------------------------------------------------------------------------------
bool gt_ActivateUlmo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 0))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(56)) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Raven") || (UnitGetType(EventUnit()) == "Tosh")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Raynor", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(886977154));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/EDBDF71D"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_ulmoBeacon);
    TriggerEnable(gt_UlmoDeath, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateUlmo_Init () {
    gt_ActivateUlmo = TriggerCreate("gt_ActivateUlmo_Func");
    TriggerEnable(gt_ActivateUlmo, false);
    TriggerAddEventUnitBehaviorChange(gt_ActivateUlmo, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable Manwe
//--------------------------------------------------------------------------------------------------
bool gt_EnableManwe_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ActivateManwe, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableManwe_Init () {
    gt_EnableManwe = TriggerCreate("gt_EnableManwe_Func");
    TriggerEnable(gt_EnableManwe, false);
    TriggerAddEventTimeElapsed(gt_EnableManwe, 1200.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Manwe
//--------------------------------------------------------------------------------------------------
bool gt_ActivateManwe_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 0))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(55)) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "MengskGoliath") || (UnitGetType(EventUnit()) == "SentryPurifier")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MengskThor", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1102867604));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/9E6C0CCE"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_manweBeacon);
    TriggerEnable(gt_Manwedeath, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateManwe_Init () {
    gt_ActivateManwe = TriggerCreate("gt_ActivateManwe_Func");
    TriggerEnable(gt_ActivateManwe, false);
    TriggerAddEventUnitBehaviorChange(gt_ActivateManwe, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable Yavanna
//--------------------------------------------------------------------------------------------------
bool gt_EnableYavanna_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ActivateYavanna, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableYavanna_Init () {
    gt_EnableYavanna = TriggerCreate("gt_EnableYavanna_Func");
    TriggerEnable(gt_EnableYavanna, false);
    TriggerAddEventTimeElapsed(gt_EnableYavanna, 1620.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Yavanna
//--------------------------------------------------------------------------------------------------
bool gt_ActivateYavanna_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 0))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(57)) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Zeratul") || (UnitGetType(EventUnit()) == "Urun")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganEpilogue03", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1983257430));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D8032BB0"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitBehaviorRemove(gv_morgoth, "EclipseOfHope2", 1);
    GameSetLighting("ProtossBaseDay", 5.0);
    UnitKill(gv_yavannaBeacon);
    gv_morgothCanDie = true;
    TriggerExecute(gt_ValarSoundtrack, true, false);
    TriggerEnable(gt_YavannaDeath, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateYavanna_Init () {
    gt_ActivateYavanna = TriggerCreate("gt_ActivateYavanna_Func");
    TriggerEnable(gt_ActivateYavanna, false);
    TriggerAddEventUnitBehaviorChange(gt_ActivateYavanna, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yavanna Timer
//--------------------------------------------------------------------------------------------------
bool gt_YavannaTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_yavannatimer, 1620.0, false, c_timeGame);
    TimerWindowCreate(gv_yavannatimer, StringExternal("Param/Value/41F02477"), false, false);
    gv_yavannatimerwindow = TimerWindowLastCreated();
    TimerWindowSetStyle(gv_yavannatimerwindow, c_timerWindowStyleHorizontalTitleTime, false);
    TimerWindowShow(gv_yavannatimerwindow, PlayerGroupAll(), true);
    TimerWindowShowBorder(gv_yavannatimerwindow, true);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1620.0, c_timeGame);
    TimerWindowDestroy(gv_yavannatimerwindow);
    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganEpilogue03", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1983257430));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/18743AF6"));
    UnitBehaviorRemove(gv_morgoth, "EclipseOfHope2", 1);
    GameSetLighting("ProtossBaseDay", 5.0);
    UnitKill(gv_yavannaBeacon);
    gv_morgothCanDie = true;
    TriggerExecute(gt_ValarSoundtrack, true, false);
    TriggerEnable(gt_YavannaDeath, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YavannaTimer_Init () {
    gt_YavannaTimer = TriggerCreate("gt_YavannaTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Morgoth Soundtrack
//--------------------------------------------------------------------------------------------------
bool gt_MorgothSoundtrack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, true);
    Wait(0.5, c_timeGame);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "MorgothSoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MorgothSoundtrack_Init () {
    gt_MorgothSoundtrack = TriggerCreate("gt_MorgothSoundtrack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Valar Soundtrack
//--------------------------------------------------------------------------------------------------
bool gt_ValarSoundtrack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, true);
    Wait(0.5, c_timeGame);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ValarSoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ValarSoundtrack_Init () {
    gt_ValarSoundtrack = TriggerCreate("gt_ValarSoundtrack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Morgoth intiilizatation
//--------------------------------------------------------------------------------------------------
bool gt_Morgothintiilizatation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerType(gv_itemMistyMountains) == c_playerTypeComputer) && (!((PlayerType(gv_itemEvilMen) == c_playerTypeUser) || (PlayerType(gv_itemMordor) == c_playerTypeUser) || (PlayerType(gv_ittemEasterlings) == c_playerTypeUser)))) {
        VisRevealArea(UnitGetOwner(gv_morgoth), RegionPlayableMap(), 7200.0, true);
        AISetDifficulty(gv_itemMistyMountains, c_diffNormalVision, false);
        SoundPlayForPlayer(SoundLink("Thereisnolifeinthevoid", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        gf_Createunit(1, "HybridBehemoth", UnitFromId(1040499259), PointFromId(1207796644));
        gv_morgoth = UnitLastCreated();
        gf_Createunit(1, "Tulkas", UnitFromId(856187551), PointFromId(1956332581));
        gv_tulkasBeacon = UnitLastCreated();
        gf_Createunit(1, "Aule", UnitFromId(856187551), PointFromId(486097910));
        gv_auleBeacon = UnitLastCreated();
        gf_Createunit(1, "Ulmo", UnitFromId(856187551), PointFromId(886977154));
        gv_ulmoBeacon = UnitLastCreated();
        gf_Createunit(1, "Manwe", UnitFromId(856187551), PointFromId(1102867604));
        gv_manweBeacon = UnitLastCreated();
        GameSetLighting("AiurNight", 5.0);
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_RetreatHeroesMorgoth, true);
        TriggerEnable(gt_moveTeleportMorgoth, true);
        TriggerEnable(gt_EnableTulkas, true);
        TriggerEnable(gt_EnableAule, true);
        TriggerEnable(gt_EnableUlmo, true);
        TriggerEnable(gt_EnableManwe, true);
        TriggerEnable(gt_MorgothDeath, true);
        TriggerExecute(gt_YavannaTimer, true, false);
        UnitGroupAdd(gv_evilStructures, gv_morgoth);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Morgothintiilizatation_Init () {
    gt_Morgothintiilizatation = TriggerCreate("gt_Morgothintiilizatation_Func");
    TriggerEnable(gt_Morgothintiilizatation, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Nightmare Difficulty
//--------------------------------------------------------------------------------------------------
bool gt_AINightmareDifficulty_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerType(gv_itemEastGondor) == c_playerTypeComputer) && (!((PlayerType(gv_itemDwarves) == c_playerTypeUser) || (PlayerType(gv_itemElves) == c_playerTypeUser) || (PlayerType(gv_itemArnor) == c_playerTypeUser) || (PlayerType(gv_itemWestGondor) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(1325808467)), 32, -1, "AIEastGondorHard");
    }

    if ((PlayerType(gv_itemElves) == c_playerTypeComputer) && (!((PlayerType(gv_itemDwarves) == c_playerTypeUser) || (PlayerType(gv_itemArnor) == c_playerTypeUser) || (PlayerType(gv_itemEastGondor) == c_playerTypeUser) || (PlayerType(gv_itemWestGondor) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(677747402)), 32, -1, "AIElvesHard");
    }

    if ((PlayerType(gv_itemArnor) == c_playerTypeComputer) && (!((PlayerType(gv_itemDwarves) == c_playerTypeUser) || (PlayerType(gv_itemEastGondor) == c_playerTypeUser) || (PlayerType(gv_itemElves) == c_playerTypeUser) || (PlayerType(gv_itemWestGondor) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(439325741)), 32, -1, "AIArnorHard");
    }

    if ((PlayerType(gv_itemWestGondor) == c_playerTypeComputer) && (!((PlayerType(gv_itemDwarves) == c_playerTypeUser) || (PlayerType(gv_itemArnor) == c_playerTypeUser) || (PlayerType(gv_itemElves) == c_playerTypeUser) || (PlayerType(gv_itemEastGondor) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(2026638653)), 32, -1, "AIWestGondorHard");
    }

    if ((PlayerType(gv_itemDwarves) == c_playerTypeComputer) && (!((PlayerType(gv_itemEastGondor) == c_playerTypeUser) || (PlayerType(gv_itemArnor) == c_playerTypeUser) || (PlayerType(gv_itemElves) == c_playerTypeUser) || (PlayerType(gv_itemWestGondor) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(221478581)), 32, -1, "AIDwarvesHard");
    }

    if ((PlayerType(gv_itemMordor) == c_playerTypeComputer) && (!((PlayerType(gv_itemEvilMen) == c_playerTypeUser) || (PlayerType(gv_ittemEasterlings) == c_playerTypeUser) || (PlayerType(gv_itemMistyMountains) == c_playerTypeUser)))) {
        TriggerEnable(gt_UpgradeSpeedMordor, true);
        AIResearch(UnitGetOwner(UnitFromId(1930801371)), 32, -1, "AIMordorBrutal");
    }

    if ((PlayerType(gv_itemEvilMen) == c_playerTypeComputer) && (!((PlayerType(gv_itemMordor) == c_playerTypeUser) || (PlayerType(gv_itemMistyMountains) == c_playerTypeUser) || (PlayerType(gv_ittemEasterlings) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(1948361748)), 32, -1, "AIEvilMenBrutal");
        TriggerEnable(gt_UpgradeSpeedEvilMen, true);
    }

    if ((PlayerType(gv_itemMistyMountains) == c_playerTypeComputer) && (!((PlayerType(gv_itemEvilMen) == c_playerTypeUser) || (PlayerType(gv_itemMordor) == c_playerTypeUser) || (PlayerType(gv_ittemEasterlings) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(1989109597)), 32, -1, "AIMistyMountainsBrutal");
        TriggerEnable(gt_UpradeSpeedMistymountains, true);
    }

    if ((PlayerType(gv_ittemEasterlings) == c_playerTypeComputer) && (!((PlayerType(gv_itemEvilMen) == c_playerTypeUser) || (PlayerType(gv_itemMistyMountains) == c_playerTypeUser) || (PlayerType(gv_itemMordor) == c_playerTypeUser)))) {
        AIResearch(UnitGetOwner(UnitFromId(1782954501)), 32, -1, "AIEasterlingsBrutal");
        TriggerEnable(gt_UpgradeSpeedEasterlings, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AINightmareDifficulty_Init () {
    gt_AINightmareDifficulty = TriggerCreate("gt_AINightmareDifficulty_Func");
    TriggerEnable(gt_AINightmareDifficulty, false);
    TriggerAddEventTimePeriodic(gt_AINightmareDifficulty, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Retreat Heroes (Morgoth)
//--------------------------------------------------------------------------------------------------
bool gt_RetreatHeroesMorgoth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!(((EventUnit() == gv_morgoth) && (UnitGetOwner(EventUnit()) == gv_itemMistyMountains) && (UnitBehaviorCount(EventUnit(), "Lessthen50") == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_herogroup = UnitGroup(UnitGetType(EventUnit()), gv_itemArnor, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    AISetUnitSuicide(EventUnit(), false);
    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(49)) != true) && (gv_morgothteleport == false)) {
        UnitBehaviorAddPlayer(EventUnit(), "HeroStasis", 0, 1);
        Wait(2.0, c_timeGame);
        UnitSetPosition(EventUnit(), PointFromId(1207796644), false);
    }
    else if ((gv_morgothteleport == true) && (gv_morgothCanDie == false)) {
        UnitBehaviorAddPlayer(EventUnit(), "HeroStasis", 0, 1);
        Wait(2.0, c_timeGame);
        UnitSetPosition(EventUnit(), PointFromId(162865192), false);
    }
    else if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(51)) != true) && (gv_morgothteleport == true) && (gv_morgothCanDie == true)) {
        UnitBehaviorAddPlayer(EventUnit(), "HeroStasis", 0, 1);
        Wait(2.0, c_timeGame);
        UnitSetPosition(EventUnit(), PointFromId(162865192), false);
    }
    TimerStart(gv_morgothTimer, 3.0, false, c_timeGame);
    TriggerEnable(gt_waitteleportMorgoth, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RetreatHeroesMorgoth_Init () {
    gt_RetreatHeroesMorgoth = TriggerCreate("gt_RetreatHeroesMorgoth_Func");
    TriggerEnable(gt_RetreatHeroesMorgoth, false);
    TriggerAddEventUnitDamaged(gt_RetreatHeroesMorgoth, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: wait teleport (Morgoth)
//--------------------------------------------------------------------------------------------------
bool gt_waitteleportMorgoth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_RetreatHeroesMorgoth, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_waitteleportMorgoth_Init () {
    gt_waitteleportMorgoth = TriggerCreate("gt_waitteleportMorgoth_Func");
    TriggerEnable(gt_waitteleportMorgoth, false);
    TriggerAddEventTimer(gt_waitteleportMorgoth, gv_morgothTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: moveTeleport (Morgoth)
//--------------------------------------------------------------------------------------------------
bool gt_moveTeleportMorgoth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_itemWestGondor) || (UnitGetOwner(EventUnit()) == gv_itemElves) || (UnitGetOwner(EventUnit()) == gv_itemDwarves) || (UnitGetOwner(EventUnit()) == gv_itemArnor) || (UnitGetOwner(EventUnit()) == gv_itemEastGondor)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_morgothteleport = true;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_moveTeleportMorgoth_Init () {
    gt_moveTeleportMorgoth = TriggerCreate("gt_moveTeleportMorgoth_Func");
    TriggerEnable(gt_moveTeleportMorgoth, false);
    TriggerAddEventUnitRegion(gt_moveTeleportMorgoth, null, RegionFromId(52), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Retreat Heroes (Mordor) (old)
//--------------------------------------------------------------------------------------------------
bool gt_RetreatHeroesMordorold_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_itemMordor) && (UnitBehaviorCount(EventUnit(), "Lessthen50") == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnit(), "HeroStasis", 0, 1);
    UnitSetPosition(EventUnit(), PointFromId(1014966334), false);
    TimerStart(gv_mordorTimeoldr, 3.0, false, c_timeGame);
    libNtve_gf_AICast(EventUnit(), Order(AbilityCommand("PsionicShockwave", 0)));
    if ((AIIsSuicideUnit(EventUnit()) != true)) {
        Wait(2.0, c_timeGame);
        AISetUnitSuicide(EventUnit(), true);
    }
    else {
        Wait(2.0, c_timeGame);
        AISetUnitSuicide(EventUnit(), true);
    }
    AIAttackWaveUseUnit(gv_itemMordor, EventUnit());
    TriggerEnable(gt_waitteleportMordorold, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RetreatHeroesMordorold_Init () {
    gt_RetreatHeroesMordorold = TriggerCreate("gt_RetreatHeroesMordorold_Func");
    TriggerEnable(gt_RetreatHeroesMordorold, false);
    TriggerAddEventUnitDamaged(gt_RetreatHeroesMordorold, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: wait teleport (Mordor) (old)
//--------------------------------------------------------------------------------------------------
bool gt_waitteleportMordorold_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_RetreatHeroesMordorold, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_waitteleportMordorold_Init () {
    gt_waitteleportMordorold = TriggerCreate("gt_waitteleportMordorold_Func");
    TriggerEnable(gt_waitteleportMordorold, false);
    TriggerAddEventTimer(gt_waitteleportMordorold, gv_mordorTimeoldr);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI intialization
//--------------------------------------------------------------------------------------------------
bool gt_AIintialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_aIBoolean == true)) {
        MeleeInitAI();
        TriggerEnable(gt_Attackwaves, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIintialization_Init () {
    gt_AIintialization = TriggerCreate("gt_AIintialization_Func");
    TriggerAddEventTimeElapsed(gt_AIintialization, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ai checker
//--------------------------------------------------------------------------------------------------
bool gt_Aichecker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerType(UnitGetOwner(UnitFromId(1115911984))) == c_playerTypeComputer)) {
        TriggerEnable(gt_AICanResearchEastGondor, true);
        gv_playernumber -= 1;
    }

    if ((PlayerType(UnitGetOwner(UnitFromId(1577456443))) == c_playerTypeComputer)) {
        TriggerEnable(gt_AICanResearchElves, true);
        gv_playernumber -= 1;
    }

    if ((PlayerType(UnitGetOwner(UnitFromId(1187303155))) == c_playerTypeComputer)) {
        TriggerEnable(gt_AICanResearchArnor, true);
        gv_playernumber -= 1;
    }

    if ((PlayerType(UnitGetOwner(UnitFromId(1255680029))) == c_playerTypeComputer)) {
        TriggerEnable(gt_AICanResearchWestGondor, true);
        gv_playernumber -= 1;
    }

    if ((PlayerType(UnitGetOwner(UnitFromId(682814818))) == c_playerTypeComputer)) {
        TriggerEnable(gt_AICanResearchMordor, true);
        gv_playernumber -= 1;
    }

    if ((PlayerType(UnitGetOwner(UnitFromId(591676803))) == c_playerTypeComputer)) {
        TriggerEnable(gt_AICanResearchEvilmen, true);
        gv_playernumber -= 1;
    }

    if ((PlayerType(UnitGetOwner(UnitFromId(1565330970))) == c_playerTypeComputer)) {
        TriggerEnable(gt_AICanResearchMistyMountain, true);
        gv_playernumber -= 1;
    }

    if ((PlayerType(UnitGetOwner(UnitFromId(1325281323))) == c_playerTypeComputer)) {
        TriggerEnable(gt_AICanResearchDwarves, true);
        gv_playernumber -= 1;
    }

    if ((PlayerType(UnitGetOwner(UnitFromId(1288358028))) == c_playerTypeComputer)) {
        TriggerEnable(gt_AICanResearchEasterlings, true);
        gv_playernumber -= 1;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Aichecker_Init () {
    gt_Aichecker = TriggerCreate("gt_Aichecker_Func");
    TriggerAddEventMapInit(gt_Aichecker);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI enable teleport
//--------------------------------------------------------------------------------------------------
bool gt_AIenableteleport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerType(UnitGetOwner(UnitFromId(1115911984))) == c_playerTypeComputer)) {
        TriggerEnable(gt_RetreatHeroesEastGondor, true);
    }

    if ((PlayerType(UnitGetOwner(UnitFromId(1577456443))) == c_playerTypeComputer)) {
        TriggerEnable(gt_RetreatHeroesElves, true);
    }

    if ((PlayerType(UnitGetOwner(UnitFromId(1187303155))) == c_playerTypeComputer)) {
        TriggerEnable(gt_RetreatHeroesArnor, true);
    }

    if ((PlayerType(UnitGetOwner(UnitFromId(1255680029))) == c_playerTypeComputer)) {
        TriggerEnable(gt_RetreatHeroesWestGondor, true);
    }

    if ((PlayerType(UnitGetOwner(UnitFromId(682814818))) == c_playerTypeComputer)) {
        TriggerEnable(gt_RetreatHeroesMordor, true);
    }

    if ((PlayerType(UnitGetOwner(UnitFromId(591676803))) == c_playerTypeComputer)) {
        TriggerEnable(gt_RetreatHeroesEvilMen, true);
    }

    if ((PlayerType(UnitGetOwner(UnitFromId(1565330970))) == c_playerTypeComputer)) {
        TriggerEnable(gt_RetreatHeroesMisty, true);
    }

    if ((PlayerType(UnitGetOwner(UnitFromId(1325281323))) == c_playerTypeComputer)) {
        TriggerEnable(gt_RetreatHeroesDwarves, true);
    }

    if ((PlayerType(UnitGetOwner(UnitFromId(1288358028))) == c_playerTypeComputer)) {
        TriggerEnable(gt_RetreatHeroesEasterlings, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIenableteleport_Init () {
    gt_AIenableteleport = TriggerCreate("gt_AIenableteleport_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attackwaves
//--------------------------------------------------------------------------------------------------
bool gt_Attackwaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIGlobalSuicide(gv_itemWestGondor);
    AIGlobalSuicide(gv_itemDwarves);
    AIGlobalSuicide(gv_itemEastGondor);
    AIGlobalSuicide(gv_itemArnor);
    AIGlobalSuicide(gv_itemElves);
    AIGlobalSuicide(gv_itemEvilMen);
    AIGlobalSuicide(gv_itemMordor);
    AIGlobalSuicide(gv_itemMistyMountains);
    AIGlobalSuicide(gv_ittemEasterlings);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Attackwaves_Init () {
    gt_Attackwaves = TriggerCreate("gt_Attackwaves_Func");
    TriggerEnable(gt_Attackwaves, false);
    TriggerAddEventTimePeriodic(gt_Attackwaves, 180.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn recurring difficulty off
//--------------------------------------------------------------------------------------------------
bool gt_Turnrecurringdifficultyoff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_AInormaldifficulty, false);
    TriggerEnable(gt_Normalchat, false);
    TriggerEnable(gt_AIHarddifficulty, false);
    TriggerEnable(gt_Hardchat, false);
    TriggerEnable(gt_AIBrutalDifficulty, false);
    TriggerEnable(gt_Brutalchat, false);
    TriggerEnable(gt_Nightmarechat, false);
    TriggerEnable(gt_AINightmareDifficulty, false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Turnrecurringdifficultyoff_Init () {
    gt_Turnrecurringdifficultyoff = TriggerCreate("gt_Turnrecurringdifficultyoff_Func");
    TriggerAddEventTimeElapsed(gt_Turnrecurringdifficultyoff, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: spawn layout
//--------------------------------------------------------------------------------------------------
bool gt_spawnlayout_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawner;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawner = UnitFromId(2026638653);
    lv_point = PointFromId(886977154);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_spawner) == true))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesMade)))) {
            return false;
        }

        if (!((UnitGetOwner(lv_spawner) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "MountGundabadUpgradespawn5", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "Marine", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "MountGundabadUpgradespawn5", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "Marine", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "MountGundabadUpgradespawn5", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "Marine", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "MountGundabadUpgradespawn5", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "Marine", lv_spawner, lv_point);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_spawnlayout_Init () {
    gt_spawnlayout = TriggerCreate("gt_spawnlayout_Func");
    TriggerEnable(gt_spawnlayout, false);
    TriggerAddEventTimePeriodic(gt_spawnlayout, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: spawn layout 2
//--------------------------------------------------------------------------------------------------
bool gt_spawnlayout2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawn;
    point lv_point;

    // Automatic Variable Declarations
    int autoC628AE24_val;

    // Variable Initialization
    lv_spawn = UnitFromId(2026638653);
    lv_point = PointFromId(886977154);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_spawn) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_spawn), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_spawn), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_spawn) != 0)) {
        autoC628AE24_val = TechTreeUpgradeCount(gv_itemWestGondor, EventUpgradeName(), c_techCountCompleteOnly);
        if (autoC628AE24_val == TechTreeUpgradeCount(gv_itemWestGondor, "DolAmrothUpgradespawn", c_techCountCompleteOnly)) {
            gf_Createunit(3, "StukovInfestedTerran", lv_spawn, lv_point);
        }
        else {
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_spawnlayout2_Init () {
    gt_spawnlayout2 = TriggerCreate("gt_spawnlayout2_Func");
    TriggerEnable(gt_spawnlayout2, false);
    TriggerAddEventTimePeriodic(gt_spawnlayout2, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: spawn layout 3
//--------------------------------------------------------------------------------------------------
bool gt_spawnlayout3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_triggeringspawn;
    point lv_triggeringpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggeringspawn = UnitFromId(2026638653);
    lv_triggeringpoint = PointFromId(886977154);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_triggeringspawn) == true))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(UnitGetOwner(lv_triggeringspawn), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_triggeringspawn), c_playerPropSuppliesMade)))) {
            return false;
        }

        if (!((UnitGetOwner(lv_triggeringspawn) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((TechTreeUpgradeCount(UnitGetOwner(lv_triggeringspawn), "MountGundabadUpgradespawn5", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(3, "Zergling", lv_triggeringspawn, lv_triggeringpoint);
    }
    else if ((TechTreeUpgradeCount(UnitGetOwner(lv_triggeringspawn), "MountGundabadUpgradespawn5", c_techCountCompleteOnly) == 1)) {
    }
    else if ((TechTreeUpgradeCount(UnitGetOwner(lv_triggeringspawn), "MountGundabadUpgradespawn5", c_techCountCompleteOnly) == 1)) {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_spawnlayout3_Init () {
    gt_spawnlayout3 = TriggerCreate("gt_spawnlayout3_Func");
    TriggerEnable(gt_spawnlayout3, false);
    TriggerAddEventTimePeriodic(gt_spawnlayout3, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mount Gram
//--------------------------------------------------------------------------------------------------
bool gt_MountGram_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mountGram;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mountGram = UnitFromId(1040499259);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_mountGram) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_mountGram), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_mountGram), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_mountGram) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_mountGram), "MountGramUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "PrimalRoach", 0, UnitGetOwner(lv_mountGram), PointFromId(457187521));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Roach", 0, UnitGetOwner(lv_mountGram), PointFromId(457187521));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, UnitGetOwner(lv_mountGram), PointFromId(457187521));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "HydraliskImpaler", 0, UnitGetOwner(lv_mountGram), PointFromId(457187521));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Hydralisk", 0, UnitGetOwner(lv_mountGram), PointFromId(457187521));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "StukovInfestedTerran", 0, UnitGetOwner(lv_mountGram), PointFromId(457187521));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_mountGram), "MountGramUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(6, "PrimalRoach", 0, UnitGetOwner(lv_mountGram), PointFromId(457187521));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Roach", 0, UnitGetOwner(lv_mountGram), PointFromId(457187521));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, UnitGetOwner(lv_mountGram), PointFromId(457187521));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "StukovInfestedTerran", 0, UnitGetOwner(lv_mountGram), PointFromId(457187521));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_mountGram), "MountGramUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "PrimalRoach", 0, UnitGetOwner(lv_mountGram), PointFromId(457187521));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Roach", 0, UnitGetOwner(lv_mountGram), PointFromId(457187521));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, UnitGetOwner(lv_mountGram), PointFromId(457187521));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "StukovInfestedTerran", 0, UnitGetOwner(lv_mountGram), PointFromId(457187521));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_mountGram), "MountGramUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoach", 0, UnitGetOwner(lv_mountGram), PointFromId(457187521));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", 0, UnitGetOwner(lv_mountGram), PointFromId(457187521));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, UnitGetOwner(lv_mountGram), PointFromId(457187521));
                    }

                }
            }
        }
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_mountGram), "RiderOfMountGram", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "PrimalRoach", 0, UnitGetOwner(lv_mountGram), PointFromId(457187521));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Roach", 0, UnitGetOwner(lv_mountGram), PointFromId(457187521));
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MountGram_Init () {
    gt_MountGram = TriggerCreate("gt_MountGram_Func");
    TriggerAddEventTimePeriodic(gt_MountGram, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mount Gram Income
//--------------------------------------------------------------------------------------------------
bool gt_MountGramIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mountGram;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mountGram = UnitFromId(1040499259);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_mountGram) == true) && (UnitGetOwner(lv_mountGram) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_mountGram), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MountGramIncome_Init () {
    gt_MountGramIncome = TriggerCreate("gt_MountGramIncome_Func");
    TriggerAddEventTimePeriodic(gt_MountGramIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Frozen Plains
//--------------------------------------------------------------------------------------------------
bool gt_FrozenPlains_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_frozenPlains;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_frozenPlains = UnitFromId(1492802972);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_frozenPlains) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_frozenPlains), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_frozenPlains), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_frozenPlains) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_frozenPlains), "FrozenPlainsUpgradespawn34", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ultralisk", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "HighTemplarTaldarim", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Werewolf", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Lyote", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ImmortalTaldarim", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NovaInfestedBanshee", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Zergling", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "StukovInfestedTerran", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoach", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Hydralisk", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "HydraliskImpaler", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_frozenPlains), "FrozenPlainsUpgradespawn33", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "HighTemplarTaldarim", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Werewolf", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Lyote", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ImmortalTaldarim", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NovaInfestedBanshee", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Zergling", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "StukovInfestedTerran", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoach", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Hydralisk", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "HydraliskImpaler", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_frozenPlains), "FrozenPlainsUpgradespawn32", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ImmortalTaldarim", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NovaInfestedBanshee", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Zergling", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "StukovInfestedTerran", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoach", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Hydralisk", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "HydraliskImpaler", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_frozenPlains), "FrozenPlainsUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NovaInfestedBanshee", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "StukovInfestedTerran", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoach", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Hydralisk", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                        libNtve_gf_CreateUnitsWithDefaultFacing(3, "HydraliskImpaler", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(lv_frozenPlains), "FrozenPlainsUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                            libNtve_gf_CreateUnitsWithDefaultFacing(2, "StukovInfestedTerran", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoach", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Hydralisk", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                            libNtve_gf_CreateUnitsWithDefaultFacing(2, "HydraliskImpaler", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                        }
                        else {
                            if ((TechTreeUpgradeCount(UnitGetOwner(lv_frozenPlains), "FrozenPlainsUpgradespawn", c_techCountCompleteOnly) == 1)) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "StukovInfestedTerran", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoach", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Hydralisk", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                            }
                            else {
                                if ((TechTreeUpgradeCount(UnitGetOwner(lv_frozenPlains), "FrozenPlainsUpgradespawn", c_techCountCompleteOnly) == 0)) {
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "StukovInfestedTerran", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoach", 0, UnitGetOwner(lv_frozenPlains), PointFromId(1220482627));
                                }

                            }
                        }
                    }
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FrozenPlains_Init () {
    gt_FrozenPlains = TriggerCreate("gt_FrozenPlains_Func");
    TriggerAddEventTimePeriodic(gt_FrozenPlains, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Frozen Plains income
//--------------------------------------------------------------------------------------------------
bool gt_FrozenPlainsincome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_frozenPlains;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_frozenPlains = UnitFromId(1492802972);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_frozenPlains) == true) && (UnitGetOwner(lv_frozenPlains) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_frozenPlains), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FrozenPlainsincome_Init () {
    gt_FrozenPlainsincome = TriggerCreate("gt_FrozenPlainsincome_Func");
    TriggerAddEventTimePeriodic(gt_FrozenPlainsincome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mount Gundabad
//--------------------------------------------------------------------------------------------------
bool gt_MountGundabad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawner;
    point lv_point;
    unit lv_mountGundabad;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawner = UnitFromId(1989109597);
    lv_point = PointFromId(1207796644);
    lv_mountGundabad = UnitFromId(1989109597);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_mountGundabad) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_mountGundabad), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_mountGundabad), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_mountGundabad) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_mountGundabad), "MountGundabadUpgradespawn5", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "HydraliskImpaler", 0, UnitGetOwner(lv_mountGundabad), PointFromId(1207796644));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, UnitGetOwner(lv_mountGundabad), PointFromId(1207796644));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ultralisk", 0, UnitGetOwner(lv_mountGundabad), PointFromId(1207796644));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "StukovInfestedTerran", 0, UnitGetOwner(lv_mountGundabad), PointFromId(1207796644));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Ursadon", 0, UnitGetOwner(lv_mountGundabad), PointFromId(1207796644));
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "Zergling", 0, UnitGetOwner(lv_mountGundabad), PointFromId(1207796644));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_mountGundabad), "MountGundabadUpgradespawn4", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "HydraliskImpaler", 0, UnitGetOwner(lv_mountGundabad), PointFromId(1207796644));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, UnitGetOwner(lv_mountGundabad), PointFromId(1207796644));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "StukovInfestedTerran", 0, UnitGetOwner(lv_mountGundabad), PointFromId(1207796644));
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "Ursadon", 0, UnitGetOwner(lv_mountGundabad), PointFromId(1207796644));
                libNtve_gf_CreateUnitsWithDefaultFacing(6, "Zergling", 0, UnitGetOwner(lv_mountGundabad), PointFromId(1207796644));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_mountGundabad), "MountGundabadUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "HydraliskImpaler", 0, UnitGetOwner(lv_mountGundabad), PointFromId(1207796644));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, UnitGetOwner(lv_mountGundabad), PointFromId(1207796644));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "StukovInfestedTerran", 0, UnitGetOwner(lv_mountGundabad), PointFromId(1207796644));
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Ursadon", 0, UnitGetOwner(lv_mountGundabad), PointFromId(1207796644));
                    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zergling", 0, UnitGetOwner(lv_mountGundabad), PointFromId(1207796644));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_mountGundabad), "MountGundabadUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "HydraliskImpaler", 0, UnitGetOwner(lv_mountGundabad), PointFromId(1207796644));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, UnitGetOwner(lv_mountGundabad), PointFromId(1207796644));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "StukovInfestedTerran", 0, UnitGetOwner(lv_mountGundabad), PointFromId(1207796644));
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Ursadon", 0, UnitGetOwner(lv_mountGundabad), PointFromId(1207796644));
                        libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zergling", 0, UnitGetOwner(lv_mountGundabad), PointFromId(1207796644));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(lv_mountGundabad), "MountGundabadUpgradespawn", c_techCountCompleteOnly) == 1)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "StukovInfestedTerran", 0, UnitGetOwner(lv_mountGundabad), PointFromId(1207796644));
                            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Ursadon", 0, UnitGetOwner(lv_mountGundabad), PointFromId(1207796644));
                            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zergling", 0, UnitGetOwner(lv_mountGundabad), PointFromId(1207796644));
                        }
                        else {
                            if ((TechTreeUpgradeCount(UnitGetOwner(lv_mountGundabad), "MountGundabadUpgradespawn", c_techCountCompleteOnly) == 0)) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "StukovInfestedTerran", 0, UnitGetOwner(lv_mountGundabad), PointFromId(1207796644));
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ursadon", 0, UnitGetOwner(lv_mountGundabad), PointFromId(1207796644));
                                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", 0, UnitGetOwner(lv_mountGundabad), PointFromId(1207796644));
                            }

                        }
                    }
                }
            }
        }
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "FrozenPlainsUpgradespawn3", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "EstablishAngmar", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "HydraliskImpaler", lv_spawner, lv_point);
            gf_Createunit(1, "NovaInfestedBanshee", lv_spawner, lv_point);
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "FrozenPlainsUpgradespawn2", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "EstablishAngmar", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "StukovInfestedTerran", lv_spawner, lv_point);
            gf_Createunit(2, "HydraliskImpaler", lv_spawner, lv_point);
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "FrozenPlainsUpgradespawn", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "EstablishAngmar", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(2, "Hydralisk", lv_spawner, lv_point);
            gf_Createunit(1, "Zergling", lv_spawner, lv_point);
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "EstablishAngmar", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "StukovInfestedTerran", lv_spawner, lv_point);
            gf_Createunit(1, "Zergling", lv_spawner, lv_point);
            gf_Createunit(1, "PrimalRoach", lv_spawner, lv_point);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MountGundabad_Init () {
    gt_MountGundabad = TriggerCreate("gt_MountGundabad_Func");
    TriggerAddEventTimePeriodic(gt_MountGundabad, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mount Gundabad Income
//--------------------------------------------------------------------------------------------------
bool gt_MountGundabadIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mountGundabad;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mountGundabad = UnitFromId(1989109597);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_mountGundabad) == true) && (UnitGetOwner(lv_mountGundabad) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_mountGundabad), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MountGundabadIncome_Init () {
    gt_MountGundabadIncome = TriggerCreate("gt_MountGundabadIncome_Func");
    TriggerAddEventTimePeriodic(gt_MountGundabadIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Goblin Town
//--------------------------------------------------------------------------------------------------
bool gt_GoblinTown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_goblinTown;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_goblinTown = UnitFromId(853024071);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_goblinTown) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_goblinTown), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_goblinTown), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_goblinTown) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_goblinTown), "GoblinTownUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Hydralisk", 0, UnitGetOwner(lv_goblinTown), PointFromId(1845075807));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "HydraliskImpaler", 0, UnitGetOwner(lv_goblinTown), PointFromId(1845075807));
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "StukovInfestedTerran", 0, UnitGetOwner(lv_goblinTown), PointFromId(1845075807));
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "Zergling", 0, UnitGetOwner(lv_goblinTown), PointFromId(1845075807));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_goblinTown), "GoblinTownUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(6, "StukovInfestedTerran", 0, UnitGetOwner(lv_goblinTown), PointFromId(1845075807));
                libNtve_gf_CreateUnitsWithDefaultFacing(6, "Zergling", 0, UnitGetOwner(lv_goblinTown), PointFromId(1845075807));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_goblinTown), "GoblinTownUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(4, "StukovInfestedTerran", 0, UnitGetOwner(lv_goblinTown), PointFromId(1845075807));
                    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zergling", 0, UnitGetOwner(lv_goblinTown), PointFromId(1845075807));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_goblinTown), "GoblinTownUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "StukovInfestedTerran", 0, UnitGetOwner(lv_goblinTown), PointFromId(1845075807));
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", 0, UnitGetOwner(lv_goblinTown), PointFromId(1845075807));
                    }

                }
            }
        }
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_goblinTown), "GoblinTownUpgradespawn3", c_techCountCompleteOnly) == 1) && ((TechTreeUpgradeCount(UnitGetOwner(lv_goblinTown), "VileServitude", c_techCountCompleteOnly) == 1))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "StukovInfestedTerran", 0, UnitGetOwner(lv_goblinTown), PointFromId(1845075807));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Zergling", 0, UnitGetOwner(lv_goblinTown), PointFromId(1845075807));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_goblinTown), "GoblinTownUpgradespawn2", c_techCountCompleteOnly) == 1) && ((TechTreeUpgradeCount(UnitGetOwner(lv_goblinTown), "VileServitude", c_techCountCompleteOnly) == 1))) {
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "StukovInfestedTerran", 0, UnitGetOwner(lv_goblinTown), PointFromId(1845075807));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", 0, UnitGetOwner(lv_goblinTown), PointFromId(1845075807));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_goblinTown), "GoblinTownUpgradespawn", c_techCountCompleteOnly) == 1) && ((TechTreeUpgradeCount(UnitGetOwner(lv_goblinTown), "VileServitude", c_techCountCompleteOnly) == 1))) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "StukovInfestedTerran", 0, UnitGetOwner(lv_goblinTown), PointFromId(1845075807));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, UnitGetOwner(lv_goblinTown), PointFromId(1845075807));
                }

            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GoblinTown_Init () {
    gt_GoblinTown = TriggerCreate("gt_GoblinTown_Func");
    TriggerAddEventTimePeriodic(gt_GoblinTown, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Goblin Town Income
//--------------------------------------------------------------------------------------------------
bool gt_GoblinTownIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_goblinTown;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_goblinTown = UnitFromId(853024071);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_goblinTown) == true) && (UnitGetOwner(lv_goblinTown) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_goblinTown), c_playerPropMinerals, c_playerPropOperAdd, 50);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GoblinTownIncome_Init () {
    gt_GoblinTownIncome = TriggerCreate("gt_GoblinTownIncome_Func");
    TriggerAddEventTimePeriodic(gt_GoblinTownIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ettenmoors
//--------------------------------------------------------------------------------------------------
bool gt_Ettenmoors_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ettenmoors;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ettenmoors = UnitFromId(1716558742);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_ettenmoors) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_ettenmoors), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_ettenmoors), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_ettenmoors) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_ettenmoors), "EttenmoorsUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HunterKiller", 0, UnitGetOwner(lv_ettenmoors), PointFromId(430392034));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scourge", 0, UnitGetOwner(lv_ettenmoors), PointFromId(430392034));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoach", 0, UnitGetOwner(lv_ettenmoors), PointFromId(430392034));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", 0, UnitGetOwner(lv_ettenmoors), PointFromId(430392034));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, UnitGetOwner(lv_ettenmoors), PointFromId(430392034));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "HydraliskImpaler", 0, UnitGetOwner(lv_ettenmoors), PointFromId(430392034));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", 0, UnitGetOwner(lv_ettenmoors), PointFromId(430392034));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "StukovInfestedTerran", 0, UnitGetOwner(lv_ettenmoors), PointFromId(430392034));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_ettenmoors), "EttenmoorsUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoach", 0, UnitGetOwner(lv_ettenmoors), PointFromId(430392034));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", 0, UnitGetOwner(lv_ettenmoors), PointFromId(430392034));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, UnitGetOwner(lv_ettenmoors), PointFromId(430392034));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "HydraliskImpaler", 0, UnitGetOwner(lv_ettenmoors), PointFromId(430392034));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", 0, UnitGetOwner(lv_ettenmoors), PointFromId(430392034));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "StukovInfestedTerran", 0, UnitGetOwner(lv_ettenmoors), PointFromId(430392034));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_ettenmoors), "EttenmoorsUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", 0, UnitGetOwner(lv_ettenmoors), PointFromId(430392034));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, UnitGetOwner(lv_ettenmoors), PointFromId(430392034));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskImpaler", 0, UnitGetOwner(lv_ettenmoors), PointFromId(430392034));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, UnitGetOwner(lv_ettenmoors), PointFromId(430392034));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "StukovInfestedTerran", 0, UnitGetOwner(lv_ettenmoors), PointFromId(430392034));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_ettenmoors), "EttenmoorsUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, UnitGetOwner(lv_ettenmoors), PointFromId(430392034));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "StukovInfestedTerran", 0, UnitGetOwner(lv_ettenmoors), PointFromId(430392034));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ettenmoors_Init () {
    gt_Ettenmoors = TriggerCreate("gt_Ettenmoors_Func");
    TriggerAddEventTimePeriodic(gt_Ettenmoors, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ettenmoors Income
//--------------------------------------------------------------------------------------------------
bool gt_EttenmoorsIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ettenmoors;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ettenmoors = UnitFromId(1716558742);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_ettenmoors) == true) && (UnitGetOwner(lv_ettenmoors) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_ettenmoors), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EttenmoorsIncome_Init () {
    gt_EttenmoorsIncome = TriggerCreate("gt_EttenmoorsIncome_Func");
    TriggerAddEventTimePeriodic(gt_EttenmoorsIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Withered Heath
//--------------------------------------------------------------------------------------------------
bool gt_WitheredHeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_witheredheath;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_witheredheath = UnitFromId(2081578249);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_witheredheath) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_witheredheath), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_witheredheath), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_witheredheath) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_witheredheath), "WitheredheathUpgradespawn4", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, UnitGetOwner(lv_witheredheath), PointFromId(1903119900));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "SpaceCowSmall", 0, UnitGetOwner(lv_witheredheath), PointFromId(1903119900));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "MitosaurusC", 0, UnitGetOwner(lv_witheredheath), PointFromId(1903119900));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Locust2", 0, UnitGetOwner(lv_witheredheath), PointFromId(1903119900));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Locust", 0, UnitGetOwner(lv_witheredheath), PointFromId(1903119900));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_witheredheath), "WitheredheathUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "SpaceCowSmall", 0, UnitGetOwner(lv_witheredheath), PointFromId(1903119900));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "MitosaurusC", 0, UnitGetOwner(lv_witheredheath), PointFromId(1903119900));
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "Locust2", 0, UnitGetOwner(lv_witheredheath), PointFromId(1903119900));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Locust", 0, UnitGetOwner(lv_witheredheath), PointFromId(1903119900));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_witheredheath), "WitheredheathUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpaceCowSmall", 0, UnitGetOwner(lv_witheredheath), PointFromId(1903119900));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "MitosaurusC", 0, UnitGetOwner(lv_witheredheath), PointFromId(1903119900));
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Locust2", 0, UnitGetOwner(lv_witheredheath), PointFromId(1903119900));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Locust", 0, UnitGetOwner(lv_witheredheath), PointFromId(1903119900));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_witheredheath), "WitheredheathUpgradespawn", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MitosaurusC", 0, UnitGetOwner(lv_witheredheath), PointFromId(1903119900));
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Locust2", 0, UnitGetOwner(lv_witheredheath), PointFromId(1903119900));
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Locust", 0, UnitGetOwner(lv_witheredheath), PointFromId(1903119900));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(lv_witheredheath), "WitheredheathUpgradespawn", c_techCountCompleteOnly) == 0)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Locust2", 0, UnitGetOwner(lv_witheredheath), PointFromId(1903119900));
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Locust", 0, UnitGetOwner(lv_witheredheath), PointFromId(1903119900));
                        }

                    }
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WitheredHeath_Init () {
    gt_WitheredHeath = TriggerCreate("gt_WitheredHeath_Func");
    TriggerAddEventTimePeriodic(gt_WitheredHeath, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dol Amroth
//--------------------------------------------------------------------------------------------------
bool gt_DolAmroth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dolAmroth;
    unit lv_spawner;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dolAmroth = UnitFromId(2026638653);
    lv_spawner = UnitFromId(2026638653);
    lv_point = PointFromId(886977154);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_dolAmroth) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_dolAmroth), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_dolAmroth), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_dolAmroth) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_dolAmroth), "DolAmrothUpgradespawn5", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Vulture", 0, UnitGetOwner(lv_dolAmroth), PointFromId(886977154));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(lv_dolAmroth), PointFromId(886977154));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Spectre", 0, UnitGetOwner(lv_dolAmroth), PointFromId(886977154));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Diamondback", 0, UnitGetOwner(lv_dolAmroth), PointFromId(886977154));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(lv_dolAmroth), PointFromId(886977154));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Banshee", 0, UnitGetOwner(lv_dolAmroth), PointFromId(886977154));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_dolAmroth), "DolAmrothUpgradespawn4", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Vulture", 0, UnitGetOwner(lv_dolAmroth), PointFromId(886977154));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(lv_dolAmroth), PointFromId(886977154));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Spectre", 0, UnitGetOwner(lv_dolAmroth), PointFromId(886977154));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Diamondback", 0, UnitGetOwner(lv_dolAmroth), PointFromId(886977154));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_dolAmroth), PointFromId(886977154));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_dolAmroth), "DolAmrothUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Vulture", 0, UnitGetOwner(lv_dolAmroth), PointFromId(886977154));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(lv_dolAmroth), PointFromId(886977154));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Spectre", 0, UnitGetOwner(lv_dolAmroth), PointFromId(886977154));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Diamondback", 0, UnitGetOwner(lv_dolAmroth), PointFromId(886977154));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_dolAmroth), "DolAmrothUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Vulture", 0, UnitGetOwner(lv_dolAmroth), PointFromId(886977154));
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(lv_dolAmroth), PointFromId(886977154));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spectre", 0, UnitGetOwner(lv_dolAmroth), PointFromId(886977154));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(lv_dolAmroth), "DolAmrothUpgradespawn", c_techCountCompleteOnly) == 1)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Vulture", 0, UnitGetOwner(lv_dolAmroth), PointFromId(886977154));
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_dolAmroth), PointFromId(886977154));
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spectre", 0, UnitGetOwner(lv_dolAmroth), PointFromId(886977154));
                        }
                        else {
                            if ((TechTreeUpgradeCount(UnitGetOwner(lv_dolAmroth), "DolAmrothUpgradespawn", c_techCountCompleteOnly) == 0)) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Vulture", 0, UnitGetOwner(lv_dolAmroth), PointFromId(886977154));
                            }

                        }
                    }
                }
            }
        }
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "DolAmrothUpgradespawn5", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "HorselordsOfDolAmroth", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "Diamondback", lv_spawner, lv_point);
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "DolAmrothUpgradespawn4", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "HorselordsOfDolAmroth", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "Diamondback", lv_spawner, lv_point);
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "DolAmrothUpgradespawn3", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "HorselordsOfDolAmroth", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "Vulture", lv_spawner, lv_point);
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "DolAmrothUpgradespawn2", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "HorselordsOfDolAmroth", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "Vulture", lv_spawner, lv_point);
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "DolAmrothUpgradespawn", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "HorselordsOfDolAmroth", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "Vulture", lv_spawner, lv_point);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DolAmroth_Init () {
    gt_DolAmroth = TriggerCreate("gt_DolAmroth_Func");
    TriggerAddEventTimePeriodic(gt_DolAmroth, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dol Amroth Income
//--------------------------------------------------------------------------------------------------
bool gt_DolAmrothIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dolAmroth;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dolAmroth = UnitFromId(2026638653);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_dolAmroth) == true) && (UnitGetOwner(lv_dolAmroth) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_dolAmroth), c_playerPropMinerals, c_playerPropOperAdd, 50);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DolAmrothIncome_Init () {
    gt_DolAmrothIncome = TriggerCreate("gt_DolAmrothIncome_Func");
    TriggerAddEventTimePeriodic(gt_DolAmrothIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Erech
//--------------------------------------------------------------------------------------------------
bool gt_Erech_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_erech;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_erech = UnitFromId(1068266261);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_erech) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_erech), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_erech), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_erech) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_erech), "ErechUpgradespawn42", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "PreserverA", 0, UnitGetOwner(lv_erech), PointFromId(2035205192));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_erech), PointFromId(2035205192));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Spectre", 0, UnitGetOwner(lv_erech), PointFromId(2035205192));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "PreserverC", 0, UnitGetOwner(lv_erech), PointFromId(2035205192));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_erech), "ErechUpgradespawn4", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "PreserverA", 0, UnitGetOwner(lv_erech), PointFromId(2035205192));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_erech), PointFromId(2035205192));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Spectre", 0, UnitGetOwner(lv_erech), PointFromId(2035205192));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "PreserverC", 0, UnitGetOwner(lv_erech), PointFromId(2035205192));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_erech), "ErechUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "PreserverA", 0, UnitGetOwner(lv_erech), PointFromId(2035205192));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_erech), PointFromId(2035205192));
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Spectre", 0, UnitGetOwner(lv_erech), PointFromId(2035205192));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_erech), "ErechUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(3, "PreserverA", 0, UnitGetOwner(lv_erech), PointFromId(2035205192));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_erech), PointFromId(2035205192));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spectre", 0, UnitGetOwner(lv_erech), PointFromId(2035205192));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(lv_erech), "ErechUpgradespawn", c_techCountCompleteOnly) == 1)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(3, "PreserverA", 0, UnitGetOwner(lv_erech), PointFromId(2035205192));
                        }
                        else {
                            if ((TechTreeUpgradeCount(UnitGetOwner(lv_erech), "ErechUpgradespawn", c_techCountCompleteOnly) == 0)) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "PreserverA", 0, UnitGetOwner(lv_erech), PointFromId(2035205192));
                            }

                        }
                    }
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Erech_Init () {
    gt_Erech = TriggerCreate("gt_Erech_Func");
    TriggerAddEventTimePeriodic(gt_Erech, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Erech Income
//--------------------------------------------------------------------------------------------------
bool gt_ErechIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_erech;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_erech = UnitFromId(1068266261);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_erech) == true) && (UnitGetOwner(lv_erech) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_erech), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ErechIncome_Init () {
    gt_ErechIncome = TriggerCreate("gt_ErechIncome_Func");
    TriggerAddEventTimePeriodic(gt_ErechIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pinnath Gaelin
//--------------------------------------------------------------------------------------------------
bool gt_PinnathGaelin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pinnathGaelin;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pinnathGaelin = UnitFromId(1919917573);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_pinnathGaelin) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_pinnathGaelin), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_pinnathGaelin), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_pinnathGaelin) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_pinnathGaelin), "PinnathGaelinUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Zealot", 0, UnitGetOwner(lv_pinnathGaelin), PointFromId(316080415));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_pinnathGaelin), PointFromId(316080415));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Spectre", 0, UnitGetOwner(lv_pinnathGaelin), PointFromId(316080415));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeTank", 0, UnitGetOwner(lv_pinnathGaelin), PointFromId(316080415));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_pinnathGaelin), "PinnathGaelinUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Zealot", 0, UnitGetOwner(lv_pinnathGaelin), PointFromId(316080415));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_pinnathGaelin), PointFromId(316080415));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spectre", 0, UnitGetOwner(lv_pinnathGaelin), PointFromId(316080415));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_pinnathGaelin), "PinnathGaelinUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Zealot", 0, UnitGetOwner(lv_pinnathGaelin), PointFromId(316080415));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_pinnathGaelin), "PinnathGaelinUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_pinnathGaelin), PointFromId(316080415));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PinnathGaelin_Init () {
    gt_PinnathGaelin = TriggerCreate("gt_PinnathGaelin_Func");
    TriggerAddEventTimePeriodic(gt_PinnathGaelin, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pinnath Gaelin Income
//--------------------------------------------------------------------------------------------------
bool gt_PinnathGaelinIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pinnathGaelin;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pinnathGaelin = UnitFromId(1919917573);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_pinnathGaelin) == true) && (UnitGetOwner(lv_pinnathGaelin) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_pinnathGaelin), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PinnathGaelinIncome_Init () {
    gt_PinnathGaelinIncome = TriggerCreate("gt_PinnathGaelinIncome_Func");
    TriggerAddEventTimePeriodic(gt_PinnathGaelinIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lefnui
//--------------------------------------------------------------------------------------------------
bool gt_Lefnui_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lefnui;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lefnui = UnitFromId(490175528);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_lefnui) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_lefnui), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_lefnui), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_lefnui) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_lefnui), "LefnuiUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HighTemplar", 0, UnitGetOwner(lv_lefnui), PointFromId(1011198778));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "PreserverA", 0, UnitGetOwner(lv_lefnui), PointFromId(1011198778));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PreserverB", 0, UnitGetOwner(lv_lefnui), PointFromId(1011198778));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(lv_lefnui), PointFromId(1011198778));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_lefnui), "LefnuiUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "PreserverA", 0, UnitGetOwner(lv_lefnui), PointFromId(1011198778));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "PreserverB", 0, UnitGetOwner(lv_lefnui), PointFromId(1011198778));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(lv_lefnui), PointFromId(1011198778));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_lefnui), "LefnuiUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PreserverA", 0, UnitGetOwner(lv_lefnui), PointFromId(1011198778));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(lv_lefnui), PointFromId(1011198778));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_lefnui), "LefnuiUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_lefnui), PointFromId(1011198778));
                    }

                }
            }
        }
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_lefnui), "Oppress", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Spectre", 0, UnitGetOwner(lv_lefnui), PointFromId(1011198778));
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_lefnui), "Reconcile", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "PreserverA", 0, UnitGetOwner(lv_lefnui), PointFromId(1011198778));
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Lefnui_Init () {
    gt_Lefnui = TriggerCreate("gt_Lefnui_Func");
    TriggerAddEventTimePeriodic(gt_Lefnui, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lefnui Income
//--------------------------------------------------------------------------------------------------
bool gt_LefnuiIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lefnui;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lefnui = UnitFromId(490175528);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_lefnui) == true) && (UnitGetOwner(lv_lefnui) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_lefnui), c_playerPropMinerals, c_playerPropOperAdd, 50);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LefnuiIncome_Init () {
    gt_LefnuiIncome = TriggerCreate("gt_LefnuiIncome_Func");
    TriggerAddEventTimePeriodic(gt_LefnuiIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orthanc
//--------------------------------------------------------------------------------------------------
bool gt_Orthanc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_orthanc;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_orthanc = UnitFromId(1421689034);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_orthanc) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_orthanc), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_orthanc), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_orthanc) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_orthanc), "OrthancUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marine", 0, UnitGetOwner(lv_orthanc), PointFromId(1356171968));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(lv_orthanc), PointFromId(1356171968));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Spectre", 0, UnitGetOwner(lv_orthanc), PointFromId(1356171968));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HighTemplar", 0, UnitGetOwner(lv_orthanc), PointFromId(1356171968));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_orthanc), "OrthancUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marine", 0, UnitGetOwner(lv_orthanc), PointFromId(1356171968));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(lv_orthanc), PointFromId(1356171968));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Spectre", 0, UnitGetOwner(lv_orthanc), PointFromId(1356171968));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_orthanc), "OrthancUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marine", 0, UnitGetOwner(lv_orthanc), PointFromId(1356171968));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(lv_orthanc), PointFromId(1356171968));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_orthanc), "OrthancUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_orthanc), PointFromId(1356171968));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_orthanc), PointFromId(1356171968));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Orthanc_Init () {
    gt_Orthanc = TriggerCreate("gt_Orthanc_Func");
    TriggerAddEventTimePeriodic(gt_Orthanc, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Anfalas
//--------------------------------------------------------------------------------------------------
bool gt_Anfalas_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_anfalas;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_anfalas = UnitFromId(126626611);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_anfalas) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_anfalas), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_anfalas), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_anfalas) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_anfalas), "AnfalasUpgradespawn2", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Marine", 0, UnitGetOwner(lv_anfalas), PointFromId(1632910664));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Spectre", 0, UnitGetOwner(lv_anfalas), PointFromId(1632910664));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_anfalas), "AnfalasUpgradespawn", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(lv_anfalas), PointFromId(1632910664));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Spectre", 0, UnitGetOwner(lv_anfalas), PointFromId(1632910664));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_anfalas), "AnfalasUpgradespawn", c_techCountCompleteOnly) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(lv_anfalas), PointFromId(1632910664));
                }

            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Anfalas_Init () {
    gt_Anfalas = TriggerCreate("gt_Anfalas_Func");
    TriggerAddEventTimePeriodic(gt_Anfalas, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hoarddale
//--------------------------------------------------------------------------------------------------
bool gt_Hoarddale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hoarddale;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hoarddale = UnitFromId(1920784909);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_hoarddale) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_hoarddale), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_hoarddale), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_hoarddale) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_hoarddale), "HoarddaleUpgradeSpawn4", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(7, "Marine", 0, UnitGetOwner(lv_hoarddale), PointFromId(1259028994));
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "Zealot", 0, UnitGetOwner(lv_hoarddale), PointFromId(1259028994));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeTank", 0, UnitGetOwner(lv_hoarddale), PointFromId(1259028994));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Ursadon", 0, UnitGetOwner(lv_hoarddale), PointFromId(1259028994));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, UnitGetOwner(lv_hoarddale), PointFromId(1259028994));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HunterKiller", 0, UnitGetOwner(lv_hoarddale), PointFromId(1259028994));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_hoarddale), "HoarddaleUpgradeSpawn3", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(6, "Marine", 0, UnitGetOwner(lv_hoarddale), PointFromId(1259028994));
                libNtve_gf_CreateUnitsWithDefaultFacing(5, "Zealot", 0, UnitGetOwner(lv_hoarddale), PointFromId(1259028994));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeTank", 0, UnitGetOwner(lv_hoarddale), PointFromId(1259028994));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ursadon", 0, UnitGetOwner(lv_hoarddale), PointFromId(1259028994));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, UnitGetOwner(lv_hoarddale), PointFromId(1259028994));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_hoarddale), "HoarddaleUpgradeSpawn2", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Marine", 0, UnitGetOwner(lv_hoarddale), PointFromId(1259028994));
                    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zealot", 0, UnitGetOwner(lv_hoarddale), PointFromId(1259028994));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeTank", 0, UnitGetOwner(lv_hoarddale), PointFromId(1259028994));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_hoarddale), "HoarddaleUpgradeSpawn", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(5, "Marine", 0, UnitGetOwner(lv_hoarddale), PointFromId(1259028994));
                        libNtve_gf_CreateUnitsWithDefaultFacing(3, "Zealot", 0, UnitGetOwner(lv_hoarddale), PointFromId(1259028994));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(lv_hoarddale), "HoarddaleUpgradeSpawn", c_techCountCompleteOnly) == 0)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marine", 0, UnitGetOwner(lv_hoarddale), PointFromId(1259028994));
                            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(lv_hoarddale), PointFromId(1259028994));
                        }

                    }
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hoarddale_Init () {
    gt_Hoarddale = TriggerCreate("gt_Hoarddale_Func");
    TriggerAddEventTimePeriodic(gt_Hoarddale, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hoarddale Income
//--------------------------------------------------------------------------------------------------
bool gt_HoarddaleIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_trollshaws;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_trollshaws = UnitFromId(1521351733);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_trollshaws) == true) && (UnitGetOwner(lv_trollshaws) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_trollshaws), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HoarddaleIncome_Init () {
    gt_HoarddaleIncome = TriggerCreate("gt_HoarddaleIncome_Func");
    TriggerAddEventTimePeriodic(gt_HoarddaleIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Trollshaws
//--------------------------------------------------------------------------------------------------
bool gt_Trollshaws_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_trollshaws;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_trollshaws = UnitFromId(1521351733);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_trollshaws) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_trollshaws), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_trollshaws), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_trollshaws) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_trollshaws), "TrollshawsUpgradeSpawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "InfestedAbomination", 0, UnitGetOwner(lv_trollshaws), PointFromId(513821936));
            libNtve_gf_CreateUnitsWithDefaultFacing(7, "StukovInfestedTerran", 0, UnitGetOwner(lv_trollshaws), PointFromId(513821936));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Zergling", 0, UnitGetOwner(lv_trollshaws), PointFromId(513821936));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_trollshaws), "TrollshawsUpgradeSpawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "InfestedAbomination", 0, UnitGetOwner(lv_trollshaws), PointFromId(513821936));
                libNtve_gf_CreateUnitsWithDefaultFacing(5, "StukovInfestedTerran", 0, UnitGetOwner(lv_trollshaws), PointFromId(513821936));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", 0, UnitGetOwner(lv_trollshaws), PointFromId(513821936));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_trollshaws), "TrollshawsUpgradeSpawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "InfestedAbomination", 0, UnitGetOwner(lv_trollshaws), PointFromId(513821936));
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "StukovInfestedTerran", 0, UnitGetOwner(lv_trollshaws), PointFromId(513821936));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, UnitGetOwner(lv_trollshaws), PointFromId(513821936));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_trollshaws), "TrollshawsUpgradeSpawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, UnitGetOwner(lv_trollshaws), PointFromId(513821936));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "StukovInfestedTerran", 0, UnitGetOwner(lv_trollshaws), PointFromId(513821936));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Trollshaws_Init () {
    gt_Trollshaws = TriggerCreate("gt_Trollshaws_Func");
    TriggerAddEventTimePeriodic(gt_Trollshaws, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Trollshaws Income
//--------------------------------------------------------------------------------------------------
bool gt_TrollshawsIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_trollshaws;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_trollshaws = UnitFromId(1521351733);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_trollshaws) == true) && (UnitGetOwner(lv_trollshaws) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_trollshaws), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrollshawsIncome_Init () {
    gt_TrollshawsIncome = TriggerCreate("gt_TrollshawsIncome_Func");
    TriggerAddEventTimePeriodic(gt_TrollshawsIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dunland
//--------------------------------------------------------------------------------------------------
bool gt_Dunland_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dunland;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dunland = UnitFromId(1472757999);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_dunland) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_dunland), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_dunland), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_dunland) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_dunland), "DunlandUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "Dunlending", 0, UnitGetOwner(lv_dunland), PointFromId(798804380));
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "PrisonZealot", 0, UnitGetOwner(lv_dunland), PointFromId(798804380));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Cyclone", 0, UnitGetOwner(lv_dunland), PointFromId(798804380));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Corruptor3", 0, UnitGetOwner(lv_dunland), PointFromId(798804380));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_dunland), "DunlandUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "Dunlending", 0, UnitGetOwner(lv_dunland), PointFromId(798804380));
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "PrisonZealot", 0, UnitGetOwner(lv_dunland), PointFromId(798804380));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Cyclone", 0, UnitGetOwner(lv_dunland), PointFromId(798804380));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_dunland), "DunlandUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Dunlending", 0, UnitGetOwner(lv_dunland), PointFromId(798804380));
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "PrisonZealot", 0, UnitGetOwner(lv_dunland), PointFromId(798804380));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_dunland), "DunlandUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(3, "Dunlending", 0, UnitGetOwner(lv_dunland), PointFromId(798804380));
                    }

                }
            }
        }
        if ((gv_evilOrthancGotten == true) && (UnitIsAlive(gv_evilOrthanc) == false)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine2", 0, UnitGetOwner(lv_dunland), PointFromId(798804380));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrisonZealot", 0, UnitGetOwner(lv_dunland), PointFromId(798804380));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Cyclone", 0, UnitGetOwner(lv_dunland), PointFromId(798804380));
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Dunland_Init () {
    gt_Dunland = TriggerCreate("gt_Dunland_Func");
    TriggerAddEventTimePeriodic(gt_Dunland, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dunland Income
//--------------------------------------------------------------------------------------------------
bool gt_DunlandIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dunland;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dunland = UnitFromId(1472757999);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_dunland) == true) && (UnitGetOwner(lv_dunland) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_dunland), c_playerPropMinerals, c_playerPropOperAdd, 50);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DunlandIncome_Init () {
    gt_DunlandIncome = TriggerCreate("gt_DunlandIncome_Func");
    TriggerAddEventTimePeriodic(gt_DunlandIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Druwaith
//--------------------------------------------------------------------------------------------------
bool gt_Druwaith_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_druwaith;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_druwaith = UnitFromId(1948361748);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_druwaith) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_druwaith), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_druwaith), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_druwaith) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_druwaith), "DruwaithUpgradeSpawn4", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(9, "PreserverA", 0, UnitGetOwner(lv_druwaith), PointFromId(730090713));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "PreserverB", 0, UnitGetOwner(lv_druwaith), PointFromId(730090713));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PreserverC", 0, UnitGetOwner(lv_druwaith), PointFromId(730090713));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PortJunker", 0, UnitGetOwner(lv_druwaith), PointFromId(730090713));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_druwaith), "DruwaithUpgradeSpawn3", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(8, "PreserverA", 0, UnitGetOwner(lv_druwaith), PointFromId(730090713));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "PreserverB", 0, UnitGetOwner(lv_druwaith), PointFromId(730090713));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "PreserverC", 0, UnitGetOwner(lv_druwaith), PointFromId(730090713));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_druwaith), "DruwaithUpgradeSpawn2", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(7, "PreserverA", 0, UnitGetOwner(lv_druwaith), PointFromId(730090713));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PreserverB", 0, UnitGetOwner(lv_druwaith), PointFromId(730090713));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_druwaith), "DruwaithUpgradeSpawn", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(5, "PreserverA", 0, UnitGetOwner(lv_druwaith), PointFromId(730090713));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(lv_druwaith), "DruwaithUpgradeSpawn", c_techCountCompleteOnly) == 0)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(3, "PreserverA", 0, UnitGetOwner(lv_druwaith), PointFromId(730090713));
                        }

                    }
                }
            }
        }
    }

    if ((gv_evilLefnuiGotten == true) && (UnitIsAlive(gv_evilLefnui) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(3, "PreserverA", 0, UnitGetOwner(lv_druwaith), PointFromId(730090713));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Druwaith_Init () {
    gt_Druwaith = TriggerCreate("gt_Druwaith_Func");
    TriggerAddEventTimePeriodic(gt_Druwaith, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Druwaith Income
//--------------------------------------------------------------------------------------------------
bool gt_DruwaithIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_druwaithLaur;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_druwaithLaur = UnitFromId(1948361748);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_druwaithLaur) == true) && (UnitGetOwner(lv_druwaithLaur) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_druwaithLaur), c_playerPropMinerals, c_playerPropOperAdd, 50);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DruwaithIncome_Init () {
    gt_DruwaithIncome = TriggerCreate("gt_DruwaithIncome_Func");
    TriggerAddEventTimePeriodic(gt_DruwaithIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dunharrow
//--------------------------------------------------------------------------------------------------
bool gt_Dunharrow_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dunharrow;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dunharrow = UnitFromId(761806837);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_dunharrow) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_dunharrow), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_dunharrow), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_dunharrow) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_dunharrow), "DunharrowUpgradeSpawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "PreserverA", 0, UnitGetOwner(lv_dunharrow), PointFromId(675482289));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "PrisonZealot", 0, UnitGetOwner(lv_dunharrow), PointFromId(675482289));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "PreserverB", 0, UnitGetOwner(lv_dunharrow), PointFromId(675482289));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ImmortalTaldarim", 0, UnitGetOwner(lv_dunharrow), PointFromId(675482289));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PreserverC", 0, UnitGetOwner(lv_dunharrow), PointFromId(675482289));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_dunharrow), "DunharrowUpgradeSpawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(5, "PreserverA", 0, UnitGetOwner(lv_dunharrow), PointFromId(675482289));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "PrisonZealot", 0, UnitGetOwner(lv_dunharrow), PointFromId(675482289));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "PreserverB", 0, UnitGetOwner(lv_dunharrow), PointFromId(675482289));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_dunharrow), "DunharrowUpgradeSpawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(4, "PreserverA", 0, UnitGetOwner(lv_dunharrow), PointFromId(675482289));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "PrisonZealot", 0, UnitGetOwner(lv_dunharrow), PointFromId(675482289));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_dunharrow), "DunharrowUpgradeSpawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "PreserverA", 0, UnitGetOwner(lv_dunharrow), PointFromId(675482289));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrisonZealot", 0, UnitGetOwner(lv_dunharrow), PointFromId(675482289));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Dunharrow_Init () {
    gt_Dunharrow = TriggerCreate("gt_Dunharrow_Func");
    TriggerAddEventTimePeriodic(gt_Dunharrow, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dunharrow Income
//--------------------------------------------------------------------------------------------------
bool gt_DunharrowIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dunharrow;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dunharrow = UnitFromId(761806837);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_dunharrow) == true) && (UnitGetOwner(lv_dunharrow) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_dunharrow), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DunharrowIncome_Init () {
    gt_DunharrowIncome = TriggerCreate("gt_DunharrowIncome_Func");
    TriggerAddEventTimePeriodic(gt_DunharrowIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: South Enedwaith
//--------------------------------------------------------------------------------------------------
bool gt_SouthEnedwaith_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_southEnedwaith;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_southEnedwaith = UnitFromId(1122522248);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_southEnedwaith) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_southEnedwaith), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_southEnedwaith), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_southEnedwaith) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_southEnedwaith), "SouthEnedwaithUpgradespawn2", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Separatist", 0, UnitGetOwner(lv_southEnedwaith), PointFromId(995328471));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marine2", 0, UnitGetOwner(lv_southEnedwaith), PointFromId(995328471));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "PrisonZealot", 0, UnitGetOwner(lv_southEnedwaith), PointFromId(995328471));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_southEnedwaith), "SouthEnedwaithUpgradespawn", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Separatist", 0, UnitGetOwner(lv_southEnedwaith), PointFromId(995328471));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marine2", 0, UnitGetOwner(lv_southEnedwaith), PointFromId(995328471));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "PrisonZealot", 0, UnitGetOwner(lv_southEnedwaith), PointFromId(995328471));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_southEnedwaith), "SouthEnedwaithUpgradespawn", c_techCountCompleteOnly) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine2", 0, UnitGetOwner(lv_southEnedwaith), PointFromId(995328471));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrisonZealot", 0, UnitGetOwner(lv_southEnedwaith), PointFromId(995328471));
                }

            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SouthEnedwaith_Init () {
    gt_SouthEnedwaith = TriggerCreate("gt_SouthEnedwaith_Func");
    TriggerAddEventTimePeriodic(gt_SouthEnedwaith, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: South Enedwaith Income
//--------------------------------------------------------------------------------------------------
bool gt_SouthEnedwaithIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_southEnedwaith;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_southEnedwaith = UnitFromId(1122522248);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_southEnedwaith) == true) && (UnitGetOwner(lv_southEnedwaith) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_southEnedwaith), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SouthEnedwaithIncome_Init () {
    gt_SouthEnedwaithIncome = TriggerCreate("gt_SouthEnedwaithIncome_Func");
    TriggerAddEventTimePeriodic(gt_SouthEnedwaithIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: North Enedwaith
//--------------------------------------------------------------------------------------------------
bool gt_NorthEnedwaith_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_northEnedwaith;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_northEnedwaith = UnitFromId(1330193940);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_northEnedwaith) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_northEnedwaith), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_northEnedwaith), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_northEnedwaith) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_northEnedwaith), "NorthEnedwaithUpgradespawn2", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marine2", 0, UnitGetOwner(lv_northEnedwaith), PointFromId(1980932493));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Separatist", 0, UnitGetOwner(lv_northEnedwaith), PointFromId(1980932493));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "PrisonZealot", 0, UnitGetOwner(lv_northEnedwaith), PointFromId(1980932493));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_northEnedwaith), "NorthEnedwaithUpgradespawn", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marine2", 0, UnitGetOwner(lv_northEnedwaith), PointFromId(1980932493));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "PrisonZealot", 0, UnitGetOwner(lv_northEnedwaith), PointFromId(1980932493));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_northEnedwaith), "NorthEnedwaithUpgradespawn", c_techCountCompleteOnly) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine2", 0, UnitGetOwner(lv_northEnedwaith), PointFromId(1980932493));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "PrisonZealot", 0, UnitGetOwner(lv_northEnedwaith), PointFromId(1980932493));
                }

            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NorthEnedwaith_Init () {
    gt_NorthEnedwaith = TriggerCreate("gt_NorthEnedwaith_Func");
    TriggerAddEventTimePeriodic(gt_NorthEnedwaith, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: North Enedwaith Income
//--------------------------------------------------------------------------------------------------
bool gt_NorthEnedwaithIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_northEnedwaith;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_northEnedwaith = UnitFromId(1330193940);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_northEnedwaith) == true) && (UnitGetOwner(lv_northEnedwaith) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_northEnedwaith), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NorthEnedwaithIncome_Init () {
    gt_NorthEnedwaithIncome = TriggerCreate("gt_NorthEnedwaithIncome_Func");
    TriggerAddEventTimePeriodic(gt_NorthEnedwaithIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lothorien
//--------------------------------------------------------------------------------------------------
bool gt_Lothorien_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lothorien;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lothorien = UnitFromId(2050115423);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_lothorien) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_lothorien), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_lothorien), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_lothorien) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_lothorien), "LothorienUpgradespawn4", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Adept", 0, UnitGetOwner(lv_lothorien), PointFromId(283882455));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Ghost", 0, UnitGetOwner(lv_lothorien), PointFromId(283882455));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotPurifier", 0, UnitGetOwner(lv_lothorien), PointFromId(283882455));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "DarkTemplar", 0, UnitGetOwner(lv_lothorien), PointFromId(283882455));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_lothorien), "LothorienUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Adept", 0, UnitGetOwner(lv_lothorien), PointFromId(283882455));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Ghost", 0, UnitGetOwner(lv_lothorien), PointFromId(283882455));
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "DarkTemplar", 0, UnitGetOwner(lv_lothorien), PointFromId(283882455));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_lothorien), "LothorienUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Adept", 0, UnitGetOwner(lv_lothorien), PointFromId(283882455));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Ghost", 0, UnitGetOwner(lv_lothorien), PointFromId(283882455));
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "DarkTemplar", 0, UnitGetOwner(lv_lothorien), PointFromId(283882455));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_lothorien), "LothorienUpgradespawn", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Adept", 0, UnitGetOwner(lv_lothorien), PointFromId(283882455));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ghost", 0, UnitGetOwner(lv_lothorien), PointFromId(283882455));
                        libNtve_gf_CreateUnitsWithDefaultFacing(3, "DarkTemplar", 0, UnitGetOwner(lv_lothorien), PointFromId(283882455));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(lv_lothorien), "LothorienUpgradespawn", c_techCountCompleteOnly) == 0)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ghost", 0, UnitGetOwner(lv_lothorien), PointFromId(283882455));
                            libNtve_gf_CreateUnitsWithDefaultFacing(2, "DarkTemplar", 0, UnitGetOwner(lv_lothorien), PointFromId(283882455));
                        }

                    }
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Lothorien_Init () {
    gt_Lothorien = TriggerCreate("gt_Lothorien_Func");
    TriggerAddEventTimePeriodic(gt_Lothorien, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lothorien Income
//--------------------------------------------------------------------------------------------------
bool gt_LothorienIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lothorien;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lothorien = UnitFromId(2050115423);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_lothorien) == true) && (UnitGetOwner(lv_lothorien) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_lothorien), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LothorienIncome_Init () {
    gt_LothorienIncome = TriggerCreate("gt_LothorienIncome_Func");
    TriggerAddEventTimePeriodic(gt_LothorienIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Greenwood Halls
//--------------------------------------------------------------------------------------------------
bool gt_GreenwoodHalls_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_greenwoodHalls;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_greenwoodHalls = UnitFromId(14086565);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_greenwoodHalls) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_greenwoodHalls), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_greenwoodHalls), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_greenwoodHalls) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_greenwoodHalls), "GreenwoodhallsUpgradespawn2", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "Reaper", 0, UnitGetOwner(lv_greenwoodHalls), PointFromId(1209939092));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, UnitGetOwner(lv_greenwoodHalls), PointFromId(1209939092));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_greenwoodHalls), "GreenwoodhallsUpgradespawn", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "Reaper", 0, UnitGetOwner(lv_greenwoodHalls), PointFromId(1209939092));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_greenwoodHalls), "GreenwoodhallsUpgradespawn", c_techCountCompleteOnly) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Reaper", 0, UnitGetOwner(lv_greenwoodHalls), PointFromId(1209939092));
                }

            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GreenwoodHalls_Init () {
    gt_GreenwoodHalls = TriggerCreate("gt_GreenwoodHalls_Func");
    TriggerAddEventTimePeriodic(gt_GreenwoodHalls, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Greenwood Halls Income
//--------------------------------------------------------------------------------------------------
bool gt_GreenwoodHallsIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_greenwoodHalls;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_greenwoodHalls = UnitFromId(14086565);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_greenwoodHalls) == true) && (UnitGetOwner(lv_greenwoodHalls) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_greenwoodHalls), c_playerPropMinerals, c_playerPropOperAdd, 50);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GreenwoodHallsIncome_Init () {
    gt_GreenwoodHallsIncome = TriggerCreate("gt_GreenwoodHallsIncome_Func");
    TriggerAddEventTimePeriodic(gt_GreenwoodHallsIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Harlond
//--------------------------------------------------------------------------------------------------
bool gt_Harlond_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_harlond;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_harlond = UnitFromId(502699174);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_harlond) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_harlond), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_harlond), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_harlond) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_harlond), "HarlondUpgradeSpawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "NoldorWarrior", 0, UnitGetOwner(lv_harlond), PointFromId(2015296570));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "NoldorArcher", 0, UnitGetOwner(lv_harlond), PointFromId(2015296570));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Stalker", 0, UnitGetOwner(lv_harlond), PointFromId(2015296570));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_harlond), "HarlondUpgradeSpawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "NoldorWarrior", 0, UnitGetOwner(lv_harlond), PointFromId(2015296570));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "NoldorArcher", 0, UnitGetOwner(lv_harlond), PointFromId(2015296570));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Stalker", 0, UnitGetOwner(lv_harlond), PointFromId(2015296570));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_harlond), "HarlondUpgradeSpawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NoldorWarrior", 0, UnitGetOwner(lv_harlond), PointFromId(2015296570));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NoldorArcher", 0, UnitGetOwner(lv_harlond), PointFromId(2015296570));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Stalker", 0, UnitGetOwner(lv_harlond), PointFromId(2015296570));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_harlond), "HarlondUpgradeSpawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NoldorWarrior", 0, UnitGetOwner(lv_harlond), PointFromId(2015296570));
                    }

                }
            }
        }
        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(502699174)), "FormAColation", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NoldorWarrior", 0, UnitGetOwner(gv_forlond), PointFromId(1983257430));
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Harlond_Init () {
    gt_Harlond = TriggerCreate("gt_Harlond_Func");
    TriggerAddEventTimePeriodic(gt_Harlond, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Harlond Income
//--------------------------------------------------------------------------------------------------
bool gt_HarlondIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_harlond;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_harlond = UnitFromId(502699174);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_harlond) == true) && (UnitGetOwner(lv_harlond) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_harlond), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HarlondIncome_Init () {
    gt_HarlondIncome = TriggerCreate("gt_HarlondIncome_Func");
    TriggerAddEventTimePeriodic(gt_HarlondIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Garden of The Entwives
//--------------------------------------------------------------------------------------------------
bool gt_GardenofTheEntwives_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_gardenOfTheEntwives;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_gardenOfTheEntwives = UnitFromId(1824510748);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_gardenOfTheEntwives) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_gardenOfTheEntwives), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_gardenOfTheEntwives), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_gardenOfTheEntwives) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_gardenOfTheEntwives), "GardenOfEntwivesUpgradespawn2", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "PrimalTownHallUprooted", 0, UnitGetOwner(lv_gardenOfTheEntwives), PointFromId(1962911935));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Colossus", 0, UnitGetOwner(lv_gardenOfTheEntwives), PointFromId(1962911935));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Reaper", 0, UnitGetOwner(lv_gardenOfTheEntwives), PointFromId(1962911935));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_gardenOfTheEntwives), "GardenOfEntwivesUpgradespawn", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "PrimalTownHallUprooted", 0, UnitGetOwner(lv_gardenOfTheEntwives), PointFromId(1962911935));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Reaper", 0, UnitGetOwner(lv_gardenOfTheEntwives), PointFromId(1962911935));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_gardenOfTheEntwives), "GardenOfEntwivesUpgradespawn", c_techCountCompleteOnly) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Reaper", 0, UnitGetOwner(lv_gardenOfTheEntwives), PointFromId(1962911935));
                }

            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GardenofTheEntwives_Init () {
    gt_GardenofTheEntwives = TriggerCreate("gt_GardenofTheEntwives_Func");
    TriggerAddEventTimePeriodic(gt_GardenofTheEntwives, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mithlond
//--------------------------------------------------------------------------------------------------
bool gt_Mithlond_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mithlond;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mithlond = UnitFromId(649935218);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_mithlond) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_mithlond), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_mithlond), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_mithlond) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_mithlond), "MithlondUpgradespawn4", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "Stalker", 0, UnitGetOwner(lv_mithlond), PointFromId(1983257430));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "NoldorWarrior", 0, UnitGetOwner(lv_mithlond), PointFromId(1983257430));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dragoon", 0, UnitGetOwner(lv_mithlond), PointFromId(1983257430));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_mithlond), "MithlondUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "Stalker", 0, UnitGetOwner(lv_mithlond), PointFromId(1983257430));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "NoldorWarrior", 0, UnitGetOwner(lv_mithlond), PointFromId(1983257430));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_mithlond), "MithlondUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Stalker", 0, UnitGetOwner(lv_mithlond), PointFromId(1983257430));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "NoldorWarrior", 0, UnitGetOwner(lv_mithlond), PointFromId(1983257430));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_mithlond), "MithlondUpgradespawn", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Stalker", 0, UnitGetOwner(lv_mithlond), PointFromId(1983257430));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NoldorWarrior", 0, UnitGetOwner(lv_mithlond), PointFromId(1983257430));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(lv_mithlond), "MithlondUpgradespawn", c_techCountCompleteOnly) == 0)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Stalker", 0, UnitGetOwner(lv_mithlond), PointFromId(1983257430));
                        }

                    }
                }
            }
        }
        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(649935218)), "FormAColation", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NoldorWarrior", 0, UnitGetOwner(gv_forlond), PointFromId(1983257430));
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Mithlond_Init () {
    gt_Mithlond = TriggerCreate("gt_Mithlond_Func");
    TriggerAddEventTimePeriodic(gt_Mithlond, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mithlond Income
//--------------------------------------------------------------------------------------------------
bool gt_MithlondIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mithlond;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mithlond = UnitFromId(649935218);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_mithlond) == true) && (UnitGetOwner(lv_mithlond) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_mithlond), c_playerPropMinerals, c_playerPropOperAdd, 50);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MithlondIncome_Init () {
    gt_MithlondIncome = TriggerCreate("gt_MithlondIncome_Func");
    TriggerAddEventTimePeriodic(gt_MithlondIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Greenwood
//--------------------------------------------------------------------------------------------------
bool gt_Greenwood_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_greenwood;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_greenwood = UnitFromId(677747402);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_greenwood) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_greenwood), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_greenwood), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_greenwood) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_greenwood), "GreenwoodUpgradespawn4", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Reaper", 0, UnitGetOwner(lv_greenwood), PointFromId(927171715));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Scout", 0, UnitGetOwner(lv_greenwood), PointFromId(927171715));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "DarkTemplar", 0, UnitGetOwner(lv_greenwood), PointFromId(927171715));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Immortal", 0, UnitGetOwner(lv_greenwood), PointFromId(927171715));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_greenwood), "GreenwoodUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "Reaper", 0, UnitGetOwner(lv_greenwood), PointFromId(927171715));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Scout", 0, UnitGetOwner(lv_greenwood), PointFromId(927171715));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "DarkTemplar", 0, UnitGetOwner(lv_greenwood), PointFromId(927171715));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_greenwood), "GreenwoodUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Reaper", 0, UnitGetOwner(lv_greenwood), PointFromId(927171715));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, UnitGetOwner(lv_greenwood), PointFromId(927171715));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DarkTemplar", 0, UnitGetOwner(lv_greenwood), PointFromId(927171715));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_greenwood), "GreenwoodUpgradespawn", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(4, "Reaper", 0, UnitGetOwner(lv_greenwood), PointFromId(927171715));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(lv_greenwood), "GreenwoodUpgradespawn", c_techCountCompleteOnly) == 0)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Reaper", 0, UnitGetOwner(lv_greenwood), PointFromId(927171715));
                        }

                    }
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Greenwood_Init () {
    gt_Greenwood = TriggerCreate("gt_Greenwood_Func");
    TriggerAddEventTimePeriodic(gt_Greenwood, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amon Lanc
//--------------------------------------------------------------------------------------------------
bool gt_AmonLanc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_amonLanc;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_amonLanc = UnitFromId(969977804);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_amonLanc) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_amonLanc), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_amonLanc), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_amonLanc) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_amonLanc), "AmonLancUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "Ghost", 0, UnitGetOwner(lv_amonLanc), PointFromId(864034612));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "DarkTemplar", 0, UnitGetOwner(lv_amonLanc), PointFromId(864034612));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_amonLanc), "AmonLancUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "Ghost", 0, UnitGetOwner(lv_amonLanc), PointFromId(864034612));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "DarkTemplar", 0, UnitGetOwner(lv_amonLanc), PointFromId(864034612));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_amonLanc), "AmonLancUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Ghost", 0, UnitGetOwner(lv_amonLanc), PointFromId(864034612));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "DarkTemplar", 0, UnitGetOwner(lv_amonLanc), PointFromId(864034612));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_amonLanc), "AmonLancUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ghost", 0, UnitGetOwner(lv_amonLanc), PointFromId(864034612));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DarkTemplar", 0, UnitGetOwner(lv_amonLanc), PointFromId(864034612));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmonLanc_Init () {
    gt_AmonLanc = TriggerCreate("gt_AmonLanc_Func");
    TriggerAddEventTimePeriodic(gt_AmonLanc, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Erebor
//--------------------------------------------------------------------------------------------------
bool gt_Erebor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_erebor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_erebor = UnitFromId(1045690131);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_erebor) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_erebor), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_erebor), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_erebor) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_erebor), "EreborUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Firebat", 0, UnitGetOwner(lv_erebor), PointFromId(1490365178));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marauder", 0, UnitGetOwner(lv_erebor), PointFromId(1490365178));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Hellion", 0, UnitGetOwner(lv_erebor), PointFromId(1490365178));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ThorAP", 0, UnitGetOwner(lv_erebor), PointFromId(1490365178));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_erebor), "EreborUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Firebat", 0, UnitGetOwner(lv_erebor), PointFromId(1490365178));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marauder", 0, UnitGetOwner(lv_erebor), PointFromId(1490365178));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Hellion", 0, UnitGetOwner(lv_erebor), PointFromId(1490365178));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_erebor), "EreborUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Firebat", 0, UnitGetOwner(lv_erebor), PointFromId(1490365178));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marauder", 0, UnitGetOwner(lv_erebor), PointFromId(1490365178));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hellion", 0, UnitGetOwner(lv_erebor), PointFromId(1490365178));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_erebor), "EreborUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Firebat", 0, UnitGetOwner(lv_erebor), PointFromId(1490365178));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Erebor_Init () {
    gt_Erebor = TriggerCreate("gt_Erebor_Func");
    TriggerAddEventTimePeriodic(gt_Erebor, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Erebor Income
//--------------------------------------------------------------------------------------------------
bool gt_EreborIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_erebor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_erebor = UnitFromId(1045690131);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_erebor) == true) && (UnitGetOwner(lv_erebor) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_erebor), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EreborIncome_Init () {
    gt_EreborIncome = TriggerCreate("gt_EreborIncome_Func");
    TriggerAddEventTimePeriodic(gt_EreborIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Erebor Income (mining)
//--------------------------------------------------------------------------------------------------
bool gt_EreborIncomemining_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_erebor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_erebor = UnitFromId(1045690131);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_erebor) == true) && (UnitGetOwner(lv_erebor) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_erebor), "EreborGold", c_techCountCompleteOnly) == 1)) {
            PlayerModifyPropertyInt(UnitGetOwner(lv_erebor), c_playerPropMinerals, c_playerPropOperAdd, 100);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EreborIncomemining_Init () {
    gt_EreborIncomemining = TriggerCreate("gt_EreborIncomemining_Func");
    TriggerAddEventTimePeriodic(gt_EreborIncomemining, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Khaza dum
//--------------------------------------------------------------------------------------------------
bool gt_Khazadum_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_khazaDum;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_khazaDum = UnitFromId(221478581);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_khazaDum) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_khazaDum), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_khazaDum), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_khazaDum) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_khazaDum), "KhazaUpgradespawn4", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DominionKillTeam", 0, UnitGetOwner(lv_khazaDum), PointFromId(486097910));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "VikingAssault", 0, UnitGetOwner(lv_khazaDum), PointFromId(486097910));
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "Marauder", 0, UnitGetOwner(lv_khazaDum), PointFromId(486097910));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Firebat", 0, UnitGetOwner(lv_khazaDum), PointFromId(486097910));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_khazaDum), "KhazaUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "VikingAssault", 0, UnitGetOwner(lv_khazaDum), PointFromId(486097910));
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "Marauder", 0, UnitGetOwner(lv_khazaDum), PointFromId(486097910));
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "Firebat", 0, UnitGetOwner(lv_khazaDum), PointFromId(486097910));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_khazaDum), "KhazaUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "VikingAssault", 0, UnitGetOwner(lv_khazaDum), PointFromId(486097910));
                    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Marauder", 0, UnitGetOwner(lv_khazaDum), PointFromId(486097910));
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Firebat", 0, UnitGetOwner(lv_khazaDum), PointFromId(486097910));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_khazaDum), "KhazaUpgradespawn", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marauder", 0, UnitGetOwner(lv_khazaDum), PointFromId(486097910));
                        libNtve_gf_CreateUnitsWithDefaultFacing(3, "Firebat", 0, UnitGetOwner(lv_khazaDum), PointFromId(486097910));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(lv_khazaDum), "KhazaUpgradespawn", c_techCountCompleteOnly) == 0)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marauder", 0, UnitGetOwner(lv_khazaDum), PointFromId(486097910));
                            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Firebat", 0, UnitGetOwner(lv_khazaDum), PointFromId(486097910));
                        }

                    }
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Khazadum_Init () {
    gt_Khazadum = TriggerCreate("gt_Khazadum_Func");
    TriggerAddEventTimePeriodic(gt_Khazadum, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Khaza Dum Income
//--------------------------------------------------------------------------------------------------
bool gt_KhazaDumIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_khazaDum;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_khazaDum = UnitFromId(221478581);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_khazaDum) == true) && (UnitGetOwner(lv_khazaDum) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_khazaDum), c_playerPropMinerals, c_playerPropOperAdd, 50);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KhazaDumIncome_Init () {
    gt_KhazaDumIncome = TriggerCreate("gt_KhazaDumIncome_Func");
    TriggerAddEventTimePeriodic(gt_KhazaDumIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Khaza Dum Income (mining)
//--------------------------------------------------------------------------------------------------
bool gt_KhazaDumIncomemining_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_khazadum;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_khazadum = UnitFromId(221478581);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_khazadum) == true) && (UnitGetOwner(lv_khazadum) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_khazadum), "KhazaDumGold", c_techCountCompleteOnly) == 1)) {
            PlayerModifyPropertyInt(UnitGetOwner(lv_khazadum), c_playerPropMinerals, c_playerPropOperAdd, 100);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KhazaDumIncomemining_Init () {
    gt_KhazaDumIncomemining = TriggerCreate("gt_KhazaDumIncomemining_Func");
    TriggerAddEventTimePeriodic(gt_KhazaDumIncomemining, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blue Mountains
//--------------------------------------------------------------------------------------------------
bool gt_BlueMountains_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_blueMountains;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_blueMountains = UnitFromId(974373087);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_blueMountains) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_blueMountains), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_blueMountains), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_blueMountains) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_blueMountains), "BlueMountainsUpgradespawn4Zealotandcrossbowman", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pygalisk", 0, UnitGetOwner(lv_blueMountains), PointFromId(879062219));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MercReaper", 0, UnitGetOwner(lv_blueMountains), PointFromId(879062219));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DwarvenMiner", 0, UnitGetOwner(lv_blueMountains), PointFromId(879062219));
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_blueMountains), "BlueMountainsUpgradespawn41", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pygalisk", 0, UnitGetOwner(lv_blueMountains), PointFromId(879062219));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DwarvenMiner", 0, UnitGetOwner(lv_blueMountains), PointFromId(879062219));
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_blueMountains), "BlueMountainsUpgradespawn4", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Marauder", 0, UnitGetOwner(lv_blueMountains), PointFromId(879062219));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Firebat", 0, UnitGetOwner(lv_blueMountains), PointFromId(879062219));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DwarvenMiner", 0, UnitGetOwner(lv_blueMountains), PointFromId(879062219));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MercReaper", 0, UnitGetOwner(lv_blueMountains), PointFromId(879062219));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_blueMountains), "BlueMountainsUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "Marauder", 0, UnitGetOwner(lv_blueMountains), PointFromId(879062219));
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "Firebat", 0, UnitGetOwner(lv_blueMountains), PointFromId(879062219));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_blueMountains), "BlueMountainsUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marauder", 0, UnitGetOwner(lv_blueMountains), PointFromId(879062219));
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Firebat", 0, UnitGetOwner(lv_blueMountains), PointFromId(879062219));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_blueMountains), "BlueMountainsUpgradespawn", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marauder", 0, UnitGetOwner(lv_blueMountains), PointFromId(879062219));
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Firebat", 0, UnitGetOwner(lv_blueMountains), PointFromId(879062219));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(lv_blueMountains), "BlueMountainsUpgradespawn", c_techCountCompleteOnly) == 0)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Firebat", 0, UnitGetOwner(lv_blueMountains), PointFromId(879062219));
                        }

                    }
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BlueMountains_Init () {
    gt_BlueMountains = TriggerCreate("gt_BlueMountains_Func");
    TriggerAddEventTimePeriodic(gt_BlueMountains, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blue Mountains (income)
//--------------------------------------------------------------------------------------------------
bool gt_BlueMountainsincome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_blueMountains;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_blueMountains = UnitFromId(974373087);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_blueMountains) == true) && (UnitGetOwner(lv_blueMountains) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_blueMountains), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BlueMountainsincome_Init () {
    gt_BlueMountainsincome = TriggerCreate("gt_BlueMountainsincome_Func");
    TriggerAddEventTimePeriodic(gt_BlueMountainsincome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blue Mountains income (mining)
//--------------------------------------------------------------------------------------------------
bool gt_BlueMountainsincomemining_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bluemountains;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bluemountains = UnitFromId(974373087);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_bluemountains) == true) && (UnitGetOwner(lv_bluemountains) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_bluemountains), "BlueMountainsGold", c_techCountCompleteOnly) == 1)) {
            PlayerModifyPropertyInt(UnitGetOwner(lv_bluemountains), c_playerPropMinerals, c_playerPropOperAdd, 100);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BlueMountainsincomemining_Init () {
    gt_BlueMountainsincomemining = TriggerCreate("gt_BlueMountainsincomemining_Func");
    TriggerAddEventTimePeriodic(gt_BlueMountainsincomemining, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Iron Hills
//--------------------------------------------------------------------------------------------------
bool gt_IronHills_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ironHills;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ironHills = UnitFromId(333958134);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_ironHills) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_ironHills), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_ironHills), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_ironHills) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_ironHills), "IronHillsUpgradespawn4", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Hellion", 0, UnitGetOwner(lv_ironHills), PointFromId(361055542));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marauder", 0, UnitGetOwner(lv_ironHills), PointFromId(361055542));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ImmortalShakuras", 0, UnitGetOwner(lv_ironHills), PointFromId(361055542));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Firebat", 0, UnitGetOwner(lv_ironHills), PointFromId(361055542));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_ironHills), "IronHillsUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Hellion", 0, UnitGetOwner(lv_ironHills), PointFromId(361055542));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marauder", 0, UnitGetOwner(lv_ironHills), PointFromId(361055542));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Firebat", 0, UnitGetOwner(lv_ironHills), PointFromId(361055542));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_ironHills), "IronHillsUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Hellion", 0, UnitGetOwner(lv_ironHills), PointFromId(361055542));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marauder", 0, UnitGetOwner(lv_ironHills), PointFromId(361055542));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Firebat", 0, UnitGetOwner(lv_ironHills), PointFromId(361055542));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_ironHills), "IronHillsUpgradespawn", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hellion", 0, UnitGetOwner(lv_ironHills), PointFromId(361055542));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marauder", 0, UnitGetOwner(lv_ironHills), PointFromId(361055542));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Firebat", 0, UnitGetOwner(lv_ironHills), PointFromId(361055542));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(lv_ironHills), "IronHillsUpgradespawn", c_techCountCompleteOnly) == 0)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marauder", 0, UnitGetOwner(lv_ironHills), PointFromId(361055542));
                        }

                    }
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IronHills_Init () {
    gt_IronHills = TriggerCreate("gt_IronHills_Func");
    TriggerAddEventTimePeriodic(gt_IronHills, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Iron Hills (income)
//--------------------------------------------------------------------------------------------------
bool gt_IronHillsincome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ironHills;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ironHills = UnitFromId(333958134);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_ironHills) == true) && (UnitGetOwner(lv_ironHills) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_ironHills), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IronHillsincome_Init () {
    gt_IronHillsincome = TriggerCreate("gt_IronHillsincome_Func");
    TriggerAddEventTimePeriodic(gt_IronHillsincome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Iron Hills Income (mining)
//--------------------------------------------------------------------------------------------------
bool gt_IronHillsIncomemining_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ironHills;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ironHills = UnitFromId(333958134);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_ironHills) == true) && (UnitGetOwner(lv_ironHills) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_ironHills), "IronHillsGold", c_techCountCompleteOnly) == 1)) {
            PlayerModifyPropertyInt(UnitGetOwner(lv_ironHills), c_playerPropMinerals, c_playerPropOperAdd, 100);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IronHillsIncomemining_Init () {
    gt_IronHillsIncomemining = TriggerCreate("gt_IronHillsIncomemining_Func");
    TriggerAddEventTimePeriodic(gt_IronHillsIncomemining, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dale
//--------------------------------------------------------------------------------------------------
bool gt_Dale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dale;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dale = UnitFromId(699489457);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_dale) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_dale), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_dale), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_dale) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_dale), "DaleUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Vulture", 0, UnitGetOwner(lv_dale), PointFromId(1299199257));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(lv_dale), PointFromId(1299199257));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_dale), PointFromId(1299199257));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeTank", 0, UnitGetOwner(lv_dale), PointFromId(1299199257));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_dale), "DaleUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Vulture", 0, UnitGetOwner(lv_dale), PointFromId(1299199257));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(lv_dale), PointFromId(1299199257));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_dale), PointFromId(1299199257));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_dale), "DaleUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Vulture", 0, UnitGetOwner(lv_dale), PointFromId(1299199257));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_dale), PointFromId(1299199257));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_dale), PointFromId(1299199257));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_dale), "DaleUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_dale), PointFromId(1299199257));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Dale_Init () {
    gt_Dale = TriggerCreate("gt_Dale_Func");
    TriggerAddEventTimePeriodic(gt_Dale, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dale Income
//--------------------------------------------------------------------------------------------------
bool gt_DaleIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dale;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dale = UnitFromId(699489457);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_dale) == true) && (UnitGetOwner(lv_dale) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_dale), c_playerPropMinerals, c_playerPropOperAdd, 50);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DaleIncome_Init () {
    gt_DaleIncome = TriggerCreate("gt_DaleIncome_Func");
    TriggerAddEventTimePeriodic(gt_DaleIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rhun
//--------------------------------------------------------------------------------------------------
bool gt_Rhun_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_rhun;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rhun = UnitFromId(1782954501);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_rhun) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_rhun), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_rhun), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_rhun) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_rhun), "RhunUpgradespawn5", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Predator", 0, UnitGetOwner(lv_rhun), PointFromId(936611018));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ImmortalTaldarim", 0, UnitGetOwner(lv_rhun), PointFromId(936611018));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HighTemplarTaldarim", 0, UnitGetOwner(lv_rhun), PointFromId(936611018));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "MengskMarine", 0, UnitGetOwner(lv_rhun), PointFromId(936611018));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "DarkTemplarTaldarim", 0, UnitGetOwner(lv_rhun), PointFromId(936611018));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotShakuras", 0, UnitGetOwner(lv_rhun), PointFromId(936611018));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ColossusTaldarim", 0, UnitGetOwner(lv_rhun), PointFromId(936611018));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_rhun), "RhunUpgradespawn4", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Predator", 0, UnitGetOwner(lv_rhun), PointFromId(936611018));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ImmortalTaldarim", 0, UnitGetOwner(lv_rhun), PointFromId(936611018));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "HighTemplarTaldarim", 0, UnitGetOwner(lv_rhun), PointFromId(936611018));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "MengskMarine", 0, UnitGetOwner(lv_rhun), PointFromId(936611018));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "DarkTemplarTaldarim", 0, UnitGetOwner(lv_rhun), PointFromId(936611018));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotShakuras", 0, UnitGetOwner(lv_rhun), PointFromId(936611018));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_rhun), "RhunUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Predator", 0, UnitGetOwner(lv_rhun), PointFromId(936611018));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HighTemplarTaldarim", 0, UnitGetOwner(lv_rhun), PointFromId(936611018));
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "MengskMarine", 0, UnitGetOwner(lv_rhun), PointFromId(936611018));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "DarkTemplarTaldarim", 0, UnitGetOwner(lv_rhun), PointFromId(936611018));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotShakuras", 0, UnitGetOwner(lv_rhun), PointFromId(936611018));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_rhun), "RhunUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Predator", 0, UnitGetOwner(lv_rhun), PointFromId(936611018));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HighTemplarTaldarim", 0, UnitGetOwner(lv_rhun), PointFromId(936611018));
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "MengskMarine", 0, UnitGetOwner(lv_rhun), PointFromId(936611018));
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "DarkTemplarTaldarim", 0, UnitGetOwner(lv_rhun), PointFromId(936611018));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(lv_rhun), "RhunUpgradespawn", c_techCountCompleteOnly) == 1)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(2, "MengskMarine", 0, UnitGetOwner(lv_rhun), PointFromId(936611018));
                            libNtve_gf_CreateUnitsWithDefaultFacing(2, "DarkTemplarTaldarim", 0, UnitGetOwner(lv_rhun), PointFromId(936611018));
                        }
                        else {
                            if ((TechTreeUpgradeCount(UnitGetOwner(lv_rhun), "RhunUpgradespawn", c_techCountCompleteOnly) == 0)) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "MengskMarine", 0, UnitGetOwner(lv_rhun), PointFromId(936611018));
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "DarkTemplarTaldarim", 0, UnitGetOwner(lv_rhun), PointFromId(936611018));
                            }

                        }
                    }
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Rhun_Init () {
    gt_Rhun = TriggerCreate("gt_Rhun_Func");
    TriggerAddEventTimePeriodic(gt_Rhun, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rhun Income
//--------------------------------------------------------------------------------------------------
bool gt_RhunIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dorwinion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dorwinion = UnitFromId(1164482133);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_dorwinion) == true) && (UnitGetOwner(lv_dorwinion) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_dorwinion), c_playerPropMinerals, c_playerPropOperAdd, 50);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RhunIncome_Init () {
    gt_RhunIncome = TriggerCreate("gt_RhunIncome_Func");
    TriggerAddEventTimePeriodic(gt_RhunIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dorwinion
//--------------------------------------------------------------------------------------------------
bool gt_Dorwinion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dorwinion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dorwinion = UnitFromId(1164482133);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_dorwinion) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_dorwinion), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_dorwinion), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_dorwinion) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_dorwinion), "DorwinionUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Goliath", 0, UnitGetOwner(lv_dorwinion), PointFromId(1143397629));
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "DarkTemplarTaldarim", 0, UnitGetOwner(lv_dorwinion), PointFromId(1143397629));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "MengskMarine", 0, UnitGetOwner(lv_dorwinion), PointFromId(1143397629));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Predator", 0, UnitGetOwner(lv_dorwinion), PointFromId(1143397629));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_dorwinion), "DorwinionUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "DarkTemplarTaldarim", 0, UnitGetOwner(lv_dorwinion), PointFromId(1143397629));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "MengskMarine", 0, UnitGetOwner(lv_dorwinion), PointFromId(1143397629));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Predator", 0, UnitGetOwner(lv_dorwinion), PointFromId(1143397629));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_dorwinion), "DorwinionUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DarkTemplarTaldarim", 0, UnitGetOwner(lv_dorwinion), PointFromId(1143397629));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MengskMarine", 0, UnitGetOwner(lv_dorwinion), PointFromId(1143397629));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Predator", 0, UnitGetOwner(lv_dorwinion), PointFromId(1143397629));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_dorwinion), "DorwinionUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DarkTemplarTaldarim", 0, UnitGetOwner(lv_dorwinion), PointFromId(1143397629));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MengskMarine", 0, UnitGetOwner(lv_dorwinion), PointFromId(1143397629));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Dorwinion_Init () {
    gt_Dorwinion = TriggerCreate("gt_Dorwinion_Func");
    TriggerAddEventTimePeriodic(gt_Dorwinion, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dorwinion Income
//--------------------------------------------------------------------------------------------------
bool gt_DorwinionIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dorwinion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dorwinion = UnitFromId(1164482133);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_dorwinion) == true) && (UnitGetOwner(lv_dorwinion) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_dorwinion), c_playerPropMinerals, c_playerPropOperAdd, 50);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DorwinionIncome_Init () {
    gt_DorwinionIncome = TriggerCreate("gt_DorwinionIncome_Func");
    TriggerAddEventTimePeriodic(gt_DorwinionIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rhovanion
//--------------------------------------------------------------------------------------------------
bool gt_Rhovanion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_rhovanion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rhovanion = UnitFromId(418557182);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_rhovanion) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_rhovanion), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_rhovanion), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_rhovanion) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_rhovanion), "RhovanionUpgradespawn4", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ZealotShakuras", 0, UnitGetOwner(UnitFromId(418557182)), PointFromId(941355735));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ColonistTransport", 0, UnitGetOwner(UnitFromId(418557182)), PointFromId(941355735));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "DarkTemplarTaldarim", 0, UnitGetOwner(UnitFromId(418557182)), PointFromId(941355735));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "MengskMarine", 0, UnitGetOwner(UnitFromId(418557182)), PointFromId(941355735));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Goliath", 0, UnitGetOwner(UnitFromId(418557182)), PointFromId(941355735));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_rhovanion), "RhovanionUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotShakuras", 0, UnitGetOwner(UnitFromId(418557182)), PointFromId(941355735));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "DarkTemplarTaldarim", 0, UnitGetOwner(UnitFromId(418557182)), PointFromId(941355735));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "MengskMarine", 0, UnitGetOwner(UnitFromId(418557182)), PointFromId(941355735));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Goliath", 0, UnitGetOwner(UnitFromId(418557182)), PointFromId(941355735));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_rhovanion), "RhovanionUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DarkTemplarTaldarim", 0, UnitGetOwner(UnitFromId(418557182)), PointFromId(941355735));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "MengskMarine", 0, UnitGetOwner(UnitFromId(418557182)), PointFromId(941355735));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Goliath", 0, UnitGetOwner(UnitFromId(418557182)), PointFromId(941355735));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_rhovanion), "RhovanionUpgradespawn", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DarkTemplarTaldarim", 0, UnitGetOwner(UnitFromId(418557182)), PointFromId(941355735));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MengskMarine", 0, UnitGetOwner(UnitFromId(418557182)), PointFromId(941355735));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Goliath", 0, UnitGetOwner(UnitFromId(418557182)), PointFromId(941355735));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(lv_rhovanion), "RhovanionUpgradespawn", c_techCountCompleteOnly) == 0)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Goliath", 0, UnitGetOwner(UnitFromId(418557182)), PointFromId(941355735));
                        }

                    }
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Rhovanion_Init () {
    gt_Rhovanion = TriggerCreate("gt_Rhovanion_Func");
    TriggerAddEventTimePeriodic(gt_Rhovanion, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rhovanion Income
//--------------------------------------------------------------------------------------------------
bool gt_RhovanionIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_rhovanion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rhovanion = UnitFromId(418557182);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_rhovanion) == true) && (UnitGetOwner(lv_rhovanion) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_rhovanion), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RhovanionIncome_Init () {
    gt_RhovanionIncome = TriggerCreate("gt_RhovanionIncome_Func");
    TriggerAddEventTimePeriodic(gt_RhovanionIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Carnen
//--------------------------------------------------------------------------------------------------
bool gt_Carnen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_carnen;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_carnen = UnitFromId(1948731451);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_carnen) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_carnen), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_carnen), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_carnen) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_carnen), "CarnenUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "DarkTemplarTaldarim", 0, UnitGetOwner(lv_carnen), PointFromId(1613628227));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "DarkTemplarTaldarim", 0, UnitGetOwner(lv_carnen), PointFromId(1613628227));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ImmortalTaldarim", 0, UnitGetOwner(lv_carnen), PointFromId(1613628227));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Goliath", 0, UnitGetOwner(lv_carnen), PointFromId(1613628227));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotShakuras", 0, UnitGetOwner(lv_carnen), PointFromId(1613628227));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_carnen), "CarnenUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "DarkTemplarTaldarim", 0, UnitGetOwner(lv_carnen), PointFromId(1613628227));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "DarkTemplarTaldarim", 0, UnitGetOwner(lv_carnen), PointFromId(1613628227));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ImmortalTaldarim", 0, UnitGetOwner(lv_carnen), PointFromId(1613628227));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Goliath", 0, UnitGetOwner(lv_carnen), PointFromId(1613628227));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_carnen), "CarnenUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "DarkTemplarTaldarim", 0, UnitGetOwner(lv_carnen), PointFromId(1613628227));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "DarkTemplarTaldarim", 0, UnitGetOwner(lv_carnen), PointFromId(1613628227));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_carnen), "CarnenUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DarkTemplarTaldarim", 0, UnitGetOwner(lv_carnen), PointFromId(1613628227));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DarkTemplarTaldarim", 0, UnitGetOwner(lv_carnen), PointFromId(1613628227));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Carnen_Init () {
    gt_Carnen = TriggerCreate("gt_Carnen_Func");
    TriggerAddEventTimePeriodic(gt_Carnen, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Carnen Income
//--------------------------------------------------------------------------------------------------
bool gt_CarnenIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_carnen;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_carnen = UnitFromId(1948731451);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_carnen) == true) && (UnitGetOwner(lv_carnen) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_carnen), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CarnenIncome_Init () {
    gt_CarnenIncome = TriggerCreate("gt_CarnenIncome_Func");
    TriggerAddEventTimePeriodic(gt_CarnenIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Esgaroth
//--------------------------------------------------------------------------------------------------
bool gt_Esgaroth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_esgaroth;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_esgaroth = UnitFromId(1353683019);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_esgaroth) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_esgaroth), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_esgaroth), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_esgaroth) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_esgaroth), "EsgarothUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "MengskMarine", 0, UnitGetOwner(lv_esgaroth), PointFromId(693713752));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "MengskMarine", 0, UnitGetOwner(lv_esgaroth), PointFromId(693713752));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HighTemplarTaldarim", 0, UnitGetOwner(lv_esgaroth), PointFromId(693713752));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Predator", 0, UnitGetOwner(lv_esgaroth), PointFromId(693713752));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotShakuras", 0, UnitGetOwner(lv_esgaroth), PointFromId(693713752));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_esgaroth), "EsgarothUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "MengskMarine", 0, UnitGetOwner(lv_esgaroth), PointFromId(693713752));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "MengskMarine", 0, UnitGetOwner(lv_esgaroth), PointFromId(693713752));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "HighTemplarTaldarim", 0, UnitGetOwner(lv_esgaroth), PointFromId(693713752));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Predator", 0, UnitGetOwner(lv_esgaroth), PointFromId(693713752));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_esgaroth), "EsgarothUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "MengskMarine", 0, UnitGetOwner(lv_esgaroth), PointFromId(693713752));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "MengskMarine", 0, UnitGetOwner(lv_esgaroth), PointFromId(693713752));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_esgaroth), "EsgarothUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "MengskMarine", 0, UnitGetOwner(lv_esgaroth), PointFromId(693713752));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Esgaroth_Init () {
    gt_Esgaroth = TriggerCreate("gt_Esgaroth_Func");
    TriggerAddEventTimePeriodic(gt_Esgaroth, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Esgaroth Income
//--------------------------------------------------------------------------------------------------
bool gt_EsgarothIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_esgaroth;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_esgaroth = UnitFromId(1353683019);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_esgaroth) == true) && (UnitGetOwner(lv_esgaroth) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_esgaroth), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EsgarothIncome_Init () {
    gt_EsgarothIncome = TriggerCreate("gt_EsgarothIncome_Func");
    TriggerAddEventTimePeriodic(gt_EsgarothIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Southern Encampment
//--------------------------------------------------------------------------------------------------
bool gt_SouthernEncampment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_southernEncampment;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_southernEncampment = UnitFromId(1767098372);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_southernEncampment) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_southernEncampment), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_southernEncampment), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_southernEncampment) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_southernEncampment), "SouthernEncampmentUpgradespawn33", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(8, "StalkerPurifier", 0, UnitGetOwner(lv_southernEncampment), PointFromId(1062406593));
            libNtve_gf_CreateUnitsWithDefaultFacing(7, "DarkTemplarShakuras", 0, UnitGetOwner(lv_southernEncampment), PointFromId(1062406593));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "MengskHellion", 0, UnitGetOwner(lv_southernEncampment), PointFromId(1062406593));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "CorsairMP", 0, UnitGetOwner(lv_southernEncampment), PointFromId(1062406593));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HotSNoxious", 0, UnitGetOwner(lv_southernEncampment), PointFromId(1062406593));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_southernEncampment), "SouthernEncampmentUpgradespawn4", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(8, "StalkerPurifier", 0, UnitGetOwner(lv_southernEncampment), PointFromId(1062406593));
                libNtve_gf_CreateUnitsWithDefaultFacing(7, "DarkTemplarShakuras", 0, UnitGetOwner(lv_southernEncampment), PointFromId(1062406593));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "MengskHellion", 0, UnitGetOwner(lv_southernEncampment), PointFromId(1062406593));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "CorsairMP", 0, UnitGetOwner(lv_southernEncampment), PointFromId(1062406593));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_southernEncampment), "SouthernEncampmentUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(6, "StalkerPurifier", 0, UnitGetOwner(lv_southernEncampment), PointFromId(1062406593));
                    libNtve_gf_CreateUnitsWithDefaultFacing(5, "DarkTemplarShakuras", 0, UnitGetOwner(lv_southernEncampment), PointFromId(1062406593));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "MengskHellion", 0, UnitGetOwner(lv_southernEncampment), PointFromId(1062406593));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CorsairMP", 0, UnitGetOwner(lv_southernEncampment), PointFromId(1062406593));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_southernEncampment), "SouthernEncampmentUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(5, "StalkerPurifier", 0, UnitGetOwner(lv_southernEncampment), PointFromId(1062406593));
                        libNtve_gf_CreateUnitsWithDefaultFacing(4, "DarkTemplarShakuras", 0, UnitGetOwner(lv_southernEncampment), PointFromId(1062406593));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MengskHellion", 0, UnitGetOwner(lv_southernEncampment), PointFromId(1062406593));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(lv_southernEncampment), "SouthernEncampmentUpgradespawn", c_techCountCompleteOnly) == 1)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(3, "StalkerPurifier", 0, UnitGetOwner(lv_southernEncampment), PointFromId(1062406593));
                            libNtve_gf_CreateUnitsWithDefaultFacing(3, "DarkTemplarShakuras", 0, UnitGetOwner(lv_southernEncampment), PointFromId(1062406593));
                        }
                        else {
                            if ((TechTreeUpgradeCount(UnitGetOwner(lv_southernEncampment), "SouthernEncampmentUpgradespawn", c_techCountCompleteOnly) == 0)) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "StalkerPurifier", 0, UnitGetOwner(lv_southernEncampment), PointFromId(1062406593));
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "DarkTemplarShakuras", 0, UnitGetOwner(lv_southernEncampment), PointFromId(1062406593));
                            }

                        }
                    }
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SouthernEncampment_Init () {
    gt_SouthernEncampment = TriggerCreate("gt_SouthernEncampment_Func");
    TriggerAddEventTimePeriodic(gt_SouthernEncampment, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Southron Encampment income
//--------------------------------------------------------------------------------------------------
bool gt_SouthronEncampmentincome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_southronEncampment;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_southronEncampment = UnitFromId(1767098372);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_southronEncampment) == true) && (UnitGetOwner(lv_southronEncampment) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_southronEncampment), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SouthronEncampmentincome_Init () {
    gt_SouthronEncampmentincome = TriggerCreate("gt_SouthronEncampmentincome_Func");
    TriggerAddEventTimePeriodic(gt_SouthronEncampmentincome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Barad-Dur
//--------------------------------------------------------------------------------------------------
bool gt_BaradDur_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;
    unit lv_spawner;
    unit lv_baradDur;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_point = PointFromId(162865192);
    lv_spawner = UnitFromId(1930801371);
    lv_baradDur = UnitFromId(1930801371);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_baradDur) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_baradDur), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_baradDur), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_baradDur) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_baradDur), "BaradDurUpgradespawn6", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Queen", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "InfestedAbomination", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
            libNtve_gf_CreateUnitsWithDefaultFacing(7, "Zergling", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
            libNtve_gf_CreateUnitsWithDefaultFacing(7, "StukovInfestedTerran", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Hydralisk", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "HydraliskImpaler", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_baradDur), "BaradDurUpgradespawn5", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "InfestedAbomination", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
                libNtve_gf_CreateUnitsWithDefaultFacing(7, "Zergling", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
                libNtve_gf_CreateUnitsWithDefaultFacing(7, "StukovInfestedTerran", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Hydralisk", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "HydraliskImpaler", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_baradDur), "BaradDurUpgradespawn4", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "InfestedAbomination", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
                    libNtve_gf_CreateUnitsWithDefaultFacing(7, "Zergling", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
                    libNtve_gf_CreateUnitsWithDefaultFacing(6, "StukovInfestedTerran", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Hydralisk", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "HydraliskImpaler", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_baradDur), "BaradDurUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
                        libNtve_gf_CreateUnitsWithDefaultFacing(6, "Zergling", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
                        libNtve_gf_CreateUnitsWithDefaultFacing(6, "StukovInfestedTerran", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "HydraliskImpaler", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(lv_baradDur), "BaradDurUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
                            libNtve_gf_CreateUnitsWithDefaultFacing(6, "Zergling", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
                            libNtve_gf_CreateUnitsWithDefaultFacing(5, "StukovInfestedTerran", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
                        }
                        else {
                            if ((TechTreeUpgradeCount(UnitGetOwner(lv_baradDur), "BaradDurUpgradespawn", c_techCountCompleteOnly) == 1)) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(5, "Zergling", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
                                libNtve_gf_CreateUnitsWithDefaultFacing(5, "StukovInfestedTerran", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
                            }
                            else {
                                if ((TechTreeUpgradeCount(UnitGetOwner(lv_baradDur), "BaradDurUpgradespawn", c_techCountCompleteOnly) == 0)) {
                                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Zergling", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
                                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "StukovInfestedTerran", 0, UnitGetOwner(lv_baradDur), PointFromId(162865192));
                                }

                            }
                        }
                    }
                }
            }
        }
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "OrcBreeding", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "OrcBreeding", c_techCountQueuedOrBetter), "Zergling", lv_spawner, lv_point);
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "OrcBreeding2", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "Zergling", lv_spawner, lv_point);
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "OrcBreeding22", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "Zergling", lv_spawner, lv_point);
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "OrcBreeding23", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "Zergling", lv_spawner, lv_point);
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "OrcBreeding24", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "Zergling", lv_spawner, lv_point);
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "OrcBreeding25", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "Zergling", lv_spawner, lv_point);
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "OrcBreeding26", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "Zergling", lv_spawner, lv_point);
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "OrcBreeding27", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "Zergling", lv_spawner, lv_point);
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "OrcBreeding28", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "Zergling", lv_spawner, lv_point);
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "OrcBreeding29", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "Zergling", lv_spawner, lv_point);
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "OrcBreeding210", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "Zergling", lv_spawner, lv_point);
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "OrcBreeding211", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "Zergling", lv_spawner, lv_point);
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "OrcBreeding212", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "Zergling", lv_spawner, lv_point);
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "OrcBreeding213", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "Zergling", lv_spawner, lv_point);
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "OrcBreeding214", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "Zergling", lv_spawner, lv_point);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BaradDur_Init () {
    gt_BaradDur = TriggerCreate("gt_BaradDur_Func");
    TriggerAddEventTimePeriodic(gt_BaradDur, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Barad-Dur Income
//--------------------------------------------------------------------------------------------------
bool gt_BaradDurIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_baradDur;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_baradDur = UnitFromId(1930801371);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_baradDur) == true) && (UnitGetOwner(lv_baradDur) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_baradDur), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BaradDurIncome_Init () {
    gt_BaradDurIncome = TriggerCreate("gt_BaradDurIncome_Func");
    TriggerAddEventTimePeriodic(gt_BaradDurIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Udun
//--------------------------------------------------------------------------------------------------
bool gt_Udun_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_udun;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_udun = UnitFromId(1569959845);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_udun) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_udun), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_udun), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_udun) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_udun), "UdunUpgradespawn4", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskImpaler", 0, UnitGetOwner(lv_udun), PointFromId(1950584789));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", 0, UnitGetOwner(lv_udun), PointFromId(1950584789));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scourge", 0, UnitGetOwner(lv_udun), PointFromId(1950584789));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "InfestedAbomination", 0, UnitGetOwner(lv_udun), PointFromId(1950584789));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", 0, UnitGetOwner(lv_udun), PointFromId(1950584789));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Hydralisk", 0, UnitGetOwner(lv_udun), PointFromId(1950584789));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zergling", 0, UnitGetOwner(lv_udun), PointFromId(1950584789));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "StukovInfestedTerran", 0, UnitGetOwner(lv_udun), PointFromId(1950584789));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_udun), "UdunUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskImpaler", 0, UnitGetOwner(lv_udun), PointFromId(1950584789));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scourge", 0, UnitGetOwner(lv_udun), PointFromId(1950584789));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "InfestedAbomination", 0, UnitGetOwner(lv_udun), PointFromId(1950584789));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", 0, UnitGetOwner(lv_udun), PointFromId(1950584789));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Hydralisk", 0, UnitGetOwner(lv_udun), PointFromId(1950584789));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Zergling", 0, UnitGetOwner(lv_udun), PointFromId(1950584789));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "StukovInfestedTerran", 0, UnitGetOwner(lv_udun), PointFromId(1950584789));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_udun), "UdunUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, UnitGetOwner(lv_udun), PointFromId(1950584789));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", 0, UnitGetOwner(lv_udun), PointFromId(1950584789));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Hydralisk", 0, UnitGetOwner(lv_udun), PointFromId(1950584789));
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Zergling", 0, UnitGetOwner(lv_udun), PointFromId(1950584789));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "StukovInfestedTerran", 0, UnitGetOwner(lv_udun), PointFromId(1950584789));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_udun), "UdunUpgradespawn", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", 0, UnitGetOwner(lv_udun), PointFromId(1950584789));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, UnitGetOwner(lv_udun), PointFromId(1950584789));
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", 0, UnitGetOwner(lv_udun), PointFromId(1950584789));
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "StukovInfestedTerran", 0, UnitGetOwner(lv_udun), PointFromId(1950584789));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(lv_udun), "UdunUpgradespawn", c_techCountCompleteOnly) == 0)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", 0, UnitGetOwner(lv_udun), PointFromId(1950584789));
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "StukovInfestedTerran", 0, UnitGetOwner(lv_udun), PointFromId(1950584789));
                        }

                    }
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Udun_Init () {
    gt_Udun = TriggerCreate("gt_Udun_Func");
    TriggerAddEventTimePeriodic(gt_Udun, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Udun Income
//--------------------------------------------------------------------------------------------------
bool gt_UdunIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_udun;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_udun = UnitFromId(1569959845);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_udun) == true) && (UnitGetOwner(lv_udun) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_udun), c_playerPropMinerals, c_playerPropOperAdd, 50);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UdunIncome_Init () {
    gt_UdunIncome = TriggerCreate("gt_UdunIncome_Func");
    TriggerAddEventTimePeriodic(gt_UdunIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minas Morgul
//--------------------------------------------------------------------------------------------------
bool gt_MinasMorgul_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_minasMorgul;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minasMorgul = UnitFromId(315361432);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_minasMorgul) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_minasMorgul), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_minasMorgul), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_minasMorgul) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_minasMorgul), "MinasMorgulUpgradespawn4", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Hydralisk", 0, UnitGetOwner(lv_minasMorgul), PointFromId(784783942));
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "Zergling", 0, UnitGetOwner(lv_minasMorgul), PointFromId(784783942));
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "StukovInfestedTerran", 0, UnitGetOwner(lv_minasMorgul), PointFromId(784783942));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "HybridDestroyer", 0, UnitGetOwner(lv_minasMorgul), PointFromId(784783942));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "HydraliskImpaler", 0, UnitGetOwner(lv_minasMorgul), PointFromId(784783942));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_minasMorgul), "MinasMorgulUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Hydralisk", 0, UnitGetOwner(lv_minasMorgul), PointFromId(784783942));
                libNtve_gf_CreateUnitsWithDefaultFacing(5, "Zergling", 0, UnitGetOwner(lv_minasMorgul), PointFromId(784783942));
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "StukovInfestedTerran", 0, UnitGetOwner(lv_minasMorgul), PointFromId(784783942));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDestroyer", 0, UnitGetOwner(lv_minasMorgul), PointFromId(784783942));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "HydraliskImpaler", 0, UnitGetOwner(lv_minasMorgul), PointFromId(784783942));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_minasMorgul), "MinasMorgulUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Hydralisk", 0, UnitGetOwner(lv_minasMorgul), PointFromId(784783942));
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Zergling", 0, UnitGetOwner(lv_minasMorgul), PointFromId(784783942));
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "StukovInfestedTerran", 0, UnitGetOwner(lv_minasMorgul), PointFromId(784783942));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDestroyer", 0, UnitGetOwner(lv_minasMorgul), PointFromId(784783942));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskImpaler", 0, UnitGetOwner(lv_minasMorgul), PointFromId(784783942));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_minasMorgul), "MinasMorgulUpgradespawn", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Hydralisk", 0, UnitGetOwner(lv_minasMorgul), PointFromId(784783942));
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", 0, UnitGetOwner(lv_minasMorgul), PointFromId(784783942));
                        libNtve_gf_CreateUnitsWithDefaultFacing(3, "StukovInfestedTerran", 0, UnitGetOwner(lv_minasMorgul), PointFromId(784783942));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(315361432)), "MinasMorgulUpgradespawn", c_techCountCompleteOnly) == 0)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, UnitGetOwner(lv_minasMorgul), PointFromId(784783942));
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, UnitGetOwner(lv_minasMorgul), PointFromId(784783942));
                            libNtve_gf_CreateUnitsWithDefaultFacing(2, "StukovInfestedTerran", 0, UnitGetOwner(lv_minasMorgul), PointFromId(784783942));
                        }

                    }
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MinasMorgul_Init () {
    gt_MinasMorgul = TriggerCreate("gt_MinasMorgul_Func");
    TriggerAddEventTimePeriodic(gt_MinasMorgul, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nurn
//--------------------------------------------------------------------------------------------------
bool gt_Nurn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nurn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nurn = UnitFromId(509044797);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_nurn) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_nurn), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_nurn), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_nurn) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_nurn), "NurnUpgradespawn4", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Corruptor", 0, UnitGetOwner(lv_nurn), PointFromId(1797673811));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "HydraliskImpaler", 0, UnitGetOwner(lv_nurn), PointFromId(1797673811));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "StukovInfestedTerran", 0, UnitGetOwner(lv_nurn), PointFromId(1797673811));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zergling", 0, UnitGetOwner(lv_nurn), PointFromId(1797673811));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Scourge", 0, UnitGetOwner(lv_nurn), PointFromId(1797673811));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Roach", 0, UnitGetOwner(lv_nurn), PointFromId(1797673811));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Hydralisk", 0, UnitGetOwner(lv_nurn), PointFromId(1797673811));
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_nurn), "NurnUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "HydraliskImpaler", 0, UnitGetOwner(lv_nurn), PointFromId(1797673811));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "StukovInfestedTerran", 0, UnitGetOwner(lv_nurn), PointFromId(1797673811));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zergling", 0, UnitGetOwner(lv_nurn), PointFromId(1797673811));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Scourge", 0, UnitGetOwner(lv_nurn), PointFromId(1797673811));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Roach", 0, UnitGetOwner(lv_nurn), PointFromId(1797673811));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Hydralisk", 0, UnitGetOwner(lv_nurn), PointFromId(1797673811));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_nurn), "NurnUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "HydraliskImpaler", 0, UnitGetOwner(lv_nurn), PointFromId(1797673811));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "StukovInfestedTerran", 0, UnitGetOwner(lv_nurn), PointFromId(1797673811));
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zergling", 0, UnitGetOwner(lv_nurn), PointFromId(1797673811));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scourge", 0, UnitGetOwner(lv_nurn), PointFromId(1797673811));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Roach", 0, UnitGetOwner(lv_nurn), PointFromId(1797673811));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_nurn), "NurnUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "HydraliskImpaler", 0, UnitGetOwner(lv_nurn), PointFromId(1797673811));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "StukovInfestedTerran", 0, UnitGetOwner(lv_nurn), PointFromId(1797673811));
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Zergling", 0, UnitGetOwner(lv_nurn), PointFromId(1797673811));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scourge", 0, UnitGetOwner(lv_nurn), PointFromId(1797673811));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_nurn), "NurnUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskImpaler", 0, UnitGetOwner(lv_nurn), PointFromId(1797673811));
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "StukovInfestedTerran", 0, UnitGetOwner(lv_nurn), PointFromId(1797673811));
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", 0, UnitGetOwner(lv_nurn), PointFromId(1797673811));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Nurn_Init () {
    gt_Nurn = TriggerCreate("gt_Nurn_Func");
    TriggerAddEventTimePeriodic(gt_Nurn, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nurn Income
//--------------------------------------------------------------------------------------------------
bool gt_NurnIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nurn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nurn = UnitFromId(509044797);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_nurn) == true) && (UnitGetOwner(lv_nurn) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_nurn), c_playerPropMinerals, c_playerPropOperAdd, 50);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NurnIncome_Init () {
    gt_NurnIncome = TriggerCreate("gt_NurnIncome_Func");
    TriggerAddEventTimePeriodic(gt_NurnIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cirth-Nurn
//--------------------------------------------------------------------------------------------------
bool gt_CirthNurn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_cirthNurn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cirthNurn = UnitFromId(1641847481);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_cirthNurn) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_cirthNurn), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_cirthNurn), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_cirthNurn) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_cirthNurn), "CirthNurnUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Werewolf", 0, UnitGetOwner(lv_cirthNurn), PointFromId(318249810));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Roach", 0, UnitGetOwner(lv_cirthNurn), PointFromId(318249810));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "PrimalRoach", 0, UnitGetOwner(lv_cirthNurn), PointFromId(318249810));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Lyote", 0, UnitGetOwner(lv_cirthNurn), PointFromId(318249810));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", 0, UnitGetOwner(lv_cirthNurn), PointFromId(318249810));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_cirthNurn), "CirthNurnUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Roach", 0, UnitGetOwner(lv_cirthNurn), PointFromId(318249810));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "PrimalRoach", 0, UnitGetOwner(lv_cirthNurn), PointFromId(318249810));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Lyote", 0, UnitGetOwner(lv_cirthNurn), PointFromId(318249810));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", 0, UnitGetOwner(lv_cirthNurn), PointFromId(318249810));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_cirthNurn), "CirthNurnUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Roach", 0, UnitGetOwner(lv_cirthNurn), PointFromId(318249810));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoach", 0, UnitGetOwner(lv_cirthNurn), PointFromId(318249810));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Lyote", 0, UnitGetOwner(lv_cirthNurn), PointFromId(318249810));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", 0, UnitGetOwner(lv_cirthNurn), PointFromId(318249810));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_cirthNurn), "CirthNurnUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Roach", 0, UnitGetOwner(lv_cirthNurn), PointFromId(318249810));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, UnitGetOwner(lv_cirthNurn), PointFromId(318249810));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CirthNurn_Init () {
    gt_CirthNurn = TriggerCreate("gt_CirthNurn_Func");
    TriggerAddEventTimePeriodic(gt_CirthNurn, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cirth-Nurn Income
//--------------------------------------------------------------------------------------------------
bool gt_CirthNurnIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_cirthNurn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cirthNurn = UnitFromId(1641847481);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_cirthNurn) == true) && (UnitGetOwner(lv_cirthNurn) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_cirthNurn), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CirthNurnIncome_Init () {
    gt_CirthNurnIncome = TriggerCreate("gt_CirthNurnIncome_Func");
    TriggerAddEventTimePeriodic(gt_CirthNurnIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Last bridge
//--------------------------------------------------------------------------------------------------
bool gt_Lastbridge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lastbridge;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lastbridge = UnitFromId(953071559);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_lastbridge) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_lastbridge), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_lastbridge), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_lastbridge) != 0) && (TechTreeUpgradeCount(UnitGetOwner(lv_lastbridge), "RetreatOuterHoldingLastBridge", c_techCountCompleteOnly) == 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_lastbridge), "LastBridgeUpgradespawn2", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(UnitGetOwner(lv_lastbridge), "GuardiansOfLastBridge", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "GhostAlternate", 0, UnitGetOwner(lv_lastbridge), PointFromId(382527717));
            libNtve_gf_CreateUnitsWithDefaultFacing(7, "Spectre", 0, UnitGetOwner(lv_lastbridge), PointFromId(382527717));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_lastbridge), "LastBridgeUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(7, "Spectre", 0, UnitGetOwner(lv_lastbridge), PointFromId(382527717));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_lastbridge), "LastBridgeUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Spectre", 0, UnitGetOwner(lv_lastbridge), PointFromId(382527717));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_lastbridge), "LastBridgeUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spectre", 0, UnitGetOwner(lv_lastbridge), PointFromId(382527717));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Lastbridge_Init () {
    gt_Lastbridge = TriggerCreate("gt_Lastbridge_Func");
    TriggerAddEventTimePeriodic(gt_Lastbridge, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lond Daer
//--------------------------------------------------------------------------------------------------
bool gt_LondDaer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_londDaer;
    unit lv_spawner;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_londDaer = UnitFromId(1550051897);
    lv_spawner = UnitFromId(1550051897);
    lv_point = PointFromId(764104611);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_londDaer) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_londDaer), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_londDaer), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_londDaer) != 0) && (TechTreeUpgradeCount(UnitGetOwner(lv_londDaer), "RetreatOuterHoldingLondDaer", c_techCountCompleteOnly) == 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_londDaer), "LondDaerUpgradeSpawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marine", 0, UnitGetOwner(lv_londDaer), PointFromId(764104611));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Spectre", 0, UnitGetOwner(lv_londDaer), PointFromId(764104611));
            gf_CreateUnitSailorarnor(2, "Wraith", lv_spawner, lv_point, "Marine");
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_londDaer), "LondDaerUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marine", 0, UnitGetOwner(lv_londDaer), PointFromId(764104611));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Spectre", 0, UnitGetOwner(lv_londDaer), PointFromId(764104611));
                gf_CreateUnitSailorarnor(1, "Wraith", lv_spawner, lv_point, "Marine");
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_londDaer), "LondDaerUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_londDaer), PointFromId(764104611));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Spectre", 0, UnitGetOwner(lv_londDaer), PointFromId(764104611));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_londDaer), "LondDaerUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_londDaer), PointFromId(764104611));
                    }

                }
            }
        }
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "MartimeLegacy", c_techCountCompleteOnly) == 1)) {
        gf_CreateUnitSailorarnor(1, "Wraith", lv_spawner, lv_point, "Marine");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LondDaer_Init () {
    gt_LondDaer = TriggerCreate("gt_LondDaer_Func");
    TriggerAddEventTimePeriodic(gt_LondDaer, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lond Daer Income
//--------------------------------------------------------------------------------------------------
bool gt_LondDaerIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_londDaer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_londDaer = UnitFromId(1550051897);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_londDaer) == true) && (UnitGetOwner(lv_londDaer) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_londDaer), c_playerPropMinerals, c_playerPropOperAdd, 50);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LondDaerIncome_Init () {
    gt_LondDaerIncome = TriggerCreate("gt_LondDaerIncome_Func");
    TriggerAddEventTimePeriodic(gt_LondDaerIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tharbad
//--------------------------------------------------------------------------------------------------
bool gt_Tharbad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tharbad;
    unit lv_spawner;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tharbad = UnitFromId(1087886462);
    lv_spawner = UnitFromId(1087886462);
    lv_point = PointFromId(16726884);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_tharbad) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_tharbad), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_tharbad), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_tharbad) != 0) && (TechTreeUpgradeCount(UnitGetOwner(lv_tharbad), "RetreatOuterHoldingTharbad", c_techCountCompleteOnly) == 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_tharbad), "TharbadUpgradeSpawn3", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(UnitGetOwner(lv_tharbad), "MartimeLegacy", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zealot", 0, UnitGetOwner(lv_tharbad), PointFromId(16726884));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Marine", 0, UnitGetOwner(lv_tharbad), PointFromId(16726884));
            gf_CreateUnitSailorarnor(2, "Wraith", lv_spawner, lv_point, "Marine");
            gf_CreateUnitWarship(1, "MilitarizedColonistShipFlying", lv_spawner, lv_point, "Marine");
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_tharbad), "TharbadUpgradeSpawn3", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zealot", 0, UnitGetOwner(lv_tharbad), PointFromId(16726884));
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "Marine", 0, UnitGetOwner(lv_tharbad), PointFromId(16726884));
                gf_CreateUnitSailorarnor(2, "Wraith", lv_spawner, lv_point, "Marine");
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_tharbad), "TharbadUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                    gf_CreateUnitSailorarnor(1, "Wraith", lv_spawner, lv_point, "Marine");
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Zealot", 0, UnitGetOwner(lv_tharbad), PointFromId(16726884));
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marine", 0, UnitGetOwner(lv_tharbad), PointFromId(16726884));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_tharbad), "TharbadUpgradespawn", c_techCountCompleteOnly) == 1)) {
                        gf_CreateUnitSailorarnor(1, "Wraith", lv_spawner, lv_point, "Marine");
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_tharbad), PointFromId(16726884));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_tharbad), PointFromId(16726884));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(lv_tharbad), "TharbadUpgradespawn", c_techCountCompleteOnly) == 0)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_tharbad), PointFromId(16726884));
                        }

                    }
                }
            }
        }
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "MartimeLegacy", c_techCountCompleteOnly) == 1)) {
        gf_CreateUnitSailorarnor(1, "Wraith", lv_spawner, lv_point, "Marine");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Tharbad_Init () {
    gt_Tharbad = TriggerCreate("gt_Tharbad_Func");
    TriggerAddEventTimePeriodic(gt_Tharbad, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tharbad Income
//--------------------------------------------------------------------------------------------------
bool gt_TharbadIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tharbad;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tharbad = UnitFromId(1087886462);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_tharbad) == true) && (UnitGetOwner(lv_tharbad) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_tharbad), c_playerPropMinerals, c_playerPropOperAdd, 50);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TharbadIncome_Init () {
    gt_TharbadIncome = TriggerCreate("gt_TharbadIncome_Func");
    TriggerAddEventTimePeriodic(gt_TharbadIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Outer Rhuadur
//--------------------------------------------------------------------------------------------------
bool gt_OuterRhuadur_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_outerRhuadur;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_outerRhuadur = UnitFromId(421005958);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_outerRhuadur) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_outerRhuadur), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_outerRhuadur), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_outerRhuadur) != 0) && (TechTreeUpgradeCount(UnitGetOwner(lv_outerRhuadur), "RetreatOuterHoldingOuterRhuadur", c_techCountCompleteOnly) == 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_outerRhuadur), "OuterRhuadurUpgradespawn22", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeTank", 0, UnitGetOwner(lv_outerRhuadur), PointFromId(1960412800));
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "Marine", 0, UnitGetOwner(lv_outerRhuadur), PointFromId(1960412800));
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "Zealot", 0, UnitGetOwner(lv_outerRhuadur), PointFromId(1960412800));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_outerRhuadur), "OuterRhuadurUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "Marine", 0, UnitGetOwner(lv_outerRhuadur), PointFromId(1960412800));
                libNtve_gf_CreateUnitsWithDefaultFacing(5, "Zealot", 0, UnitGetOwner(lv_outerRhuadur), PointFromId(1960412800));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_outerRhuadur), "OuterRhuadurUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(lv_outerRhuadur), PointFromId(1960412800));
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Zealot", 0, UnitGetOwner(lv_outerRhuadur), PointFromId(1960412800));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_outerRhuadur), "OuterRhuadurUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_outerRhuadur), PointFromId(1960412800));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OuterRhuadur_Init () {
    gt_OuterRhuadur = TriggerCreate("gt_OuterRhuadur_Func");
    TriggerAddEventTimePeriodic(gt_OuterRhuadur, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minhiarth
//--------------------------------------------------------------------------------------------------
bool gt_Minhiarth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_minhiarth;
    unit lv_spawner;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minhiarth = UnitFromId(1731438873);
    lv_spawner = UnitFromId(1731438873);
    lv_point = PointFromId(1627549480);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_minhiarth) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_minhiarth), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_minhiarth), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_minhiarth) != 0) && (TechTreeUpgradeCount(UnitGetOwner(lv_minhiarth), "RetreatOuterHoldingMinhiarth", c_techCountCompleteOnly) == 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_minhiarth), "MinhiarthUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Vulture", 0, UnitGetOwner(lv_minhiarth), PointFromId(1627549480));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spectre", 0, UnitGetOwner(lv_minhiarth), PointFromId(1627549480));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_minhiarth), PointFromId(1627549480));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Diamondback", 0, UnitGetOwner(lv_minhiarth), PointFromId(1627549480));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_minhiarth), "MinhiarthUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Vulture", 0, UnitGetOwner(lv_minhiarth), PointFromId(1627549480));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spectre", 0, UnitGetOwner(lv_minhiarth), PointFromId(1627549480));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_minhiarth), PointFromId(1627549480));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Diamondback", 0, UnitGetOwner(lv_minhiarth), PointFromId(1627549480));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_minhiarth), "MinhiarthUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Vulture", 0, UnitGetOwner(lv_minhiarth), PointFromId(1627549480));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spectre", 0, UnitGetOwner(lv_minhiarth), PointFromId(1627549480));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_minhiarth), PointFromId(1627549480));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_minhiarth), "MinhiarthUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spectre", 0, UnitGetOwner(lv_minhiarth), PointFromId(1627549480));
                    }

                }
            }
        }
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "NomadsResilence", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "Diamondback", lv_spawner, lv_point);
            gf_Createunit(2, "Vulture", lv_spawner, lv_point);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Minhiarth_Init () {
    gt_Minhiarth = TriggerCreate("gt_Minhiarth_Func");
    TriggerAddEventTimePeriodic(gt_Minhiarth, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AmonSul
//--------------------------------------------------------------------------------------------------
bool gt_AmonSul_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_amonSul;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_amonSul = UnitFromId(650634245);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_amonSul) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_amonSul), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_amonSul), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_amonSul) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_amonSul), "AmonSulUpgradeSpawn4", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "WidowMine", 0, UnitGetOwner(lv_amonSul), PointFromId(2016594596));
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "Spectre", 0, UnitGetOwner(lv_amonSul), PointFromId(2016594596));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoguePurifierSupportDroneA", 0, UnitGetOwner(lv_amonSul), PointFromId(2016594596));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Predator", 0, UnitGetOwner(lv_amonSul), PointFromId(2016594596));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_amonSul), "AmonsulUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "Spectre", 0, UnitGetOwner(lv_amonSul), PointFromId(2016594596));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoguePurifierSupportDroneA", 0, UnitGetOwner(lv_amonSul), PointFromId(2016594596));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Predator", 0, UnitGetOwner(lv_amonSul), PointFromId(2016594596));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_amonSul), "AmonsulUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Spectre", 0, UnitGetOwner(lv_amonSul), PointFromId(2016594596));
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Predator", 0, UnitGetOwner(lv_amonSul), PointFromId(2016594596));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_amonSul), "AmonsulUpgradespawn", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spectre", 0, UnitGetOwner(lv_amonSul), PointFromId(2016594596));
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Predator", 0, UnitGetOwner(lv_amonSul), PointFromId(2016594596));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(lv_amonSul), "AmonsulUpgradespawn", c_techCountCompleteOnly) == 0)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Predator", 0, UnitGetOwner(lv_amonSul), PointFromId(2016594596));
                        }

                    }
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmonSul_Init () {
    gt_AmonSul = TriggerCreate("gt_AmonSul_Func");
    TriggerAddEventTimePeriodic(gt_AmonSul, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fornost
//--------------------------------------------------------------------------------------------------
bool gt_Fornost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_fornost;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fornost = UnitFromId(1067839632);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_fornost) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_fornost), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_fornost), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_fornost) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_fornost), "FornostUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_fornost), PointFromId(1116193063));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "RoguePurifierSupportDroneA", 0, UnitGetOwner(lv_fornost), PointFromId(1116193063));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Spectre", 0, UnitGetOwner(lv_fornost), PointFromId(1116193063));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_fornost), PointFromId(1116193063));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_fornost), "FornostUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_fornost), PointFromId(1116193063));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoguePurifierSupportDroneA", 0, UnitGetOwner(lv_fornost), PointFromId(1116193063));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Spectre", 0, UnitGetOwner(lv_fornost), PointFromId(1116193063));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_fornost), PointFromId(1116193063));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_fornost), "FornostUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spectre", 0, UnitGetOwner(lv_fornost), PointFromId(1116193063));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_fornost), PointFromId(1116193063));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_fornost), PointFromId(1116193063));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_fornost), "FornostUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spectre", 0, UnitGetOwner(lv_fornost), PointFromId(1116193063));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Fornost_Init () {
    gt_Fornost = TriggerCreate("gt_Fornost_Func");
    TriggerAddEventTimePeriodic(gt_Fornost, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fornost Income
//--------------------------------------------------------------------------------------------------
bool gt_FornostIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_fornost;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fornost = UnitFromId(1067839632);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_fornost) == true) && (UnitGetOwner(lv_fornost) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_fornost), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FornostIncome_Init () {
    gt_FornostIncome = TriggerCreate("gt_FornostIncome_Func");
    TriggerAddEventTimePeriodic(gt_FornostIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evendim
//--------------------------------------------------------------------------------------------------
bool gt_Evendim_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_evendim;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_evendim = UnitFromId(573473263);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_evendim) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_evendim), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_evendim), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_evendim) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_evendim), "EvendimUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_evendim), PointFromId(1342822628));
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "Spectre", 0, UnitGetOwner(lv_evendim), PointFromId(1342822628));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_evendim), "EvendimUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(5, "Spectre", 0, UnitGetOwner(lv_evendim), PointFromId(1342822628));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_evendim), "EvendimUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Spectre", 0, UnitGetOwner(lv_evendim), PointFromId(1342822628));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_evendim), "EvendimUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spectre", 0, UnitGetOwner(lv_evendim), PointFromId(1342822628));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Evendim_Init () {
    gt_Evendim = TriggerCreate("gt_Evendim_Func");
    TriggerAddEventTimePeriodic(gt_Evendim, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Barrowdowns
//--------------------------------------------------------------------------------------------------
bool gt_Barrowdowns_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_barrowDowns;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_barrowDowns = UnitFromId(1213833690);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_barrowDowns) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_barrowDowns), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_barrowDowns), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_barrowDowns) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_barrowDowns), "BarrowDownsUpgradespawn3", c_techCountCompleteOnly) == 1) && (gv_disperseDone == false)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Spectre", 0, UnitGetOwner(lv_barrowDowns), PointFromId(581331990));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Vulture", 0, UnitGetOwner(lv_barrowDowns), PointFromId(581331990));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeTank", 0, UnitGetOwner(lv_barrowDowns), PointFromId(581331990));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Diamondback", 0, UnitGetOwner(lv_barrowDowns), PointFromId(581331990));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(lv_barrowDowns), PointFromId(581331990));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_barrowDowns), "BarrowDownsUpgradespawn2", c_techCountCompleteOnly) == 1) && (gv_disperseDone == false)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Spectre", 0, UnitGetOwner(lv_barrowDowns), PointFromId(581331990));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Vulture", 0, UnitGetOwner(lv_barrowDowns), PointFromId(581331990));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(lv_barrowDowns), PointFromId(581331990));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_barrowDowns), "BarrowDownsUpgradespawn", c_techCountCompleteOnly) == 1) && (gv_disperseDone == false)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spectre", 0, UnitGetOwner(lv_barrowDowns), PointFromId(581331990));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_barrowDowns), PointFromId(581331990));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Vulture", 0, UnitGetOwner(lv_barrowDowns), PointFromId(581331990));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_barrowDowns), "BarrowDownsUpgradespawn", c_techCountCompleteOnly) == 0) && (gv_disperseDone == false)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spectre", 0, UnitGetOwner(lv_barrowDowns), PointFromId(581331990));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Barrowdowns_Init () {
    gt_Barrowdowns = TriggerCreate("gt_Barrowdowns_Func");
    TriggerAddEventTimePeriodic(gt_Barrowdowns, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Barrow Downs Income
//--------------------------------------------------------------------------------------------------
bool gt_BarrowDownsIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_barrowDowns;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_barrowDowns = UnitFromId(1213833690);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_barrowDowns) == true) && (UnitGetOwner(lv_barrowDowns) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_barrowDowns), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BarrowDownsIncome_Init () {
    gt_BarrowDownsIncome = TriggerCreate("gt_BarrowDownsIncome_Func");
    TriggerAddEventTimePeriodic(gt_BarrowDownsIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Annuminas
//--------------------------------------------------------------------------------------------------
bool gt_Annuminas_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_annuminas;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_annuminas = UnitFromId(439325741);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_annuminas) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_annuminas), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_annuminas), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_annuminas) != 0)) {
        if ((gv_disperseDone == false) && (TechTreeUpgradeCount(UnitGetOwner(lv_annuminas), "AnnuminasUpgradespawn4", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "GhostLaserLines", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "RoguePurifierSupportDroneA", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Spectre", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Vulture", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
        }
        else {
            if ((gv_disperseDone == false) && (TechTreeUpgradeCount(UnitGetOwner(lv_annuminas), "AnnuminasUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "RoguePurifierSupportDroneA", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Spectre", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Vulture", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
            }
            else {
                if ((gv_disperseDone == false) && (TechTreeUpgradeCount(UnitGetOwner(lv_annuminas), "AnnuminasUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoguePurifierSupportDroneA", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Spectre", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Vulture", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
                }
                else {
                    if ((gv_disperseDone == false) && (TechTreeUpgradeCount(UnitGetOwner(lv_annuminas), "AnnuminasUpgradespawn", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spectre", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Vulture", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
                    }
                    else {
                        if ((gv_disperseDone == false) && (TechTreeUpgradeCount(UnitGetOwner(lv_annuminas), "AnnuminasUpgradespawn", c_techCountCompleteOnly) == 0)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
                        }

                    }
                }
            }
        }
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_annuminas), "RetreatOuterHoldingLastBridge", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Spectre", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_annuminas), "RetreatOuterHoldingLondDaer", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Spectre", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_annuminas), "RetreatOuterHoldingTharbad", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Wraith", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_annuminas), "RetreatOuterHoldingOuterRhuadur", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Zealot", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_annuminas), "RetreatOuterHoldingMinhiarth", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Vulture", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spectre", 0, UnitGetOwner(lv_annuminas), PointFromId(1102867604));
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Annuminas_Init () {
    gt_Annuminas = TriggerCreate("gt_Annuminas_Func");
    TriggerAddEventTimePeriodic(gt_Annuminas, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Annuminas Income
//--------------------------------------------------------------------------------------------------
bool gt_AnnuminasIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_annuminas;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_annuminas = UnitFromId(439325741);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_annuminas) == true) && (UnitGetOwner(lv_annuminas) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_annuminas), c_playerPropMinerals, c_playerPropOperAdd, 50);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AnnuminasIncome_Init () {
    gt_AnnuminasIncome = TriggerCreate("gt_AnnuminasIncome_Func");
    TriggerAddEventTimePeriodic(gt_AnnuminasIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Free People Of Dorwinion
//--------------------------------------------------------------------------------------------------
bool gt_FreePeopleOfDorwinion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawner;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawner = UnitFromId(2112326322);
    lv_point = PointFromId(419586109);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_spawner) == true))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesMade)))) {
            return false;
        }

        if (!((UnitGetOwner(lv_spawner) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    gf_Createunit(1, "Ghost", lv_spawner, lv_point);
    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "FreePeopleOfDorwinionUpgradeSpawn3", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "Marine", lv_spawner, lv_point);
        gf_Createunit(1, "DarkTemplar", lv_spawner, lv_point);
        gf_Createunit(2, "Vulture", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "FreePeopleOfDorwinionUpgradeSpawn2", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "Reaper", lv_spawner, lv_point);
        gf_Createunit(1, "Vulture", lv_spawner, lv_point);
        gf_Createunit(2, "Zealot", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "FreePeopleOfDorwinionUpgradeSpawn", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "Ghost", lv_spawner, lv_point);
        gf_Createunit(3, "Zealot", lv_spawner, lv_point);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FreePeopleOfDorwinion_Init () {
    gt_FreePeopleOfDorwinion = TriggerCreate("gt_FreePeopleOfDorwinion_Func");
    TriggerAddEventTimePeriodic(gt_FreePeopleOfDorwinion, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Osgiliath
//--------------------------------------------------------------------------------------------------
bool gt_Osgiliath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawner;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawner = UnitFromId(1897128707);
    lv_point = PointFromId(1533790702);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_spawner) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_spawner) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "OsgiliathUpgradespawn4", c_techCountCompleteOnly) == 1)) {
            gf_CreateunitOsgiliathveteran(1, "WarPig", lv_spawner, lv_point, "Spectre");
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeTank", 0, UnitGetOwner(lv_spawner), PointFromId(1533790702));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarPig", 0, UnitGetOwner(lv_spawner), PointFromId(1533790702));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Spectre", 0, UnitGetOwner(lv_spawner), PointFromId(1533790702));
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "Zealot", 0, UnitGetOwner(lv_spawner), PointFromId(1533790702));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Marine", 0, UnitGetOwner(lv_spawner), PointFromId(1533790702));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "OsgiliathUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarPig", 0, UnitGetOwner(lv_spawner), PointFromId(1533790702));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Spectre", 0, UnitGetOwner(lv_spawner), PointFromId(1533790702));
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zealot", 0, UnitGetOwner(lv_spawner), PointFromId(1533790702));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marine", 0, UnitGetOwner(lv_spawner), PointFromId(1533790702));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "OsgiliathUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Spectre", 0, UnitGetOwner(lv_spawner), PointFromId(1533790702));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(lv_spawner), PointFromId(1533790702));
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marine", 0, UnitGetOwner(lv_spawner), PointFromId(1533790702));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "OsgiliathUpgradespawn", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(lv_spawner), PointFromId(1533790702));
                        libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marine", 0, UnitGetOwner(lv_spawner), PointFromId(1533790702));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "OsgiliathUpgradespawn", c_techCountCompleteOnly) == 0)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_spawner), PointFromId(1533790702));
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_spawner), PointFromId(1533790702));
                        }

                    }
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Osgiliath_Init () {
    gt_Osgiliath = TriggerCreate("gt_Osgiliath_Func");
    TriggerAddEventTimePeriodic(gt_Osgiliath, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Osgiliath Income
//--------------------------------------------------------------------------------------------------
bool gt_OsgiliathIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_osgiliath;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_osgiliath = UnitFromId(1897128707);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_osgiliath) == true) && (UnitGetOwner(lv_osgiliath) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_osgiliath), c_playerPropMinerals, c_playerPropOperAdd, 50);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OsgiliathIncome_Init () {
    gt_OsgiliathIncome = TriggerCreate("gt_OsgiliathIncome_Func");
    TriggerAddEventTimePeriodic(gt_OsgiliathIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minas anor
//--------------------------------------------------------------------------------------------------
bool gt_Minasanor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_minasAnor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minasAnor = UnitFromId(1325808467);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_minasAnor) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_minasAnor), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_minasAnor), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_minasAnor) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_minasAnor), "MinasAnorUpgradespawn6", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Liberator", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Diamondback", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Vulture", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Predator", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Spectre", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Zealot", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "LabBot", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_minasAnor), "MinasAnorUpgradespawn5", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Diamondback", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Vulture", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Predator", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeTank", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Spectre", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Zealot", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_minasAnor), "MinasAnorUpgradespawn4", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Vulture", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Predator", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Spectre", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Zealot", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_minasAnor), "MinasAnorUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Vulture", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Predator", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Spectre", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(lv_minasAnor), "MinasAnorUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Predator", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spectre", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
                            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
                            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
                        }
                        else {
                            if ((TechTreeUpgradeCount(UnitGetOwner(lv_minasAnor), "MinasAnorUpgradespawn", c_techCountCompleteOnly) == 1)) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spectre", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
                                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
                            }
                            else {
                                if ((TechTreeUpgradeCount(UnitGetOwner(lv_minasAnor), "MinasAnorUpgradespawn", c_techCountCompleteOnly) == 0)) {
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_minasAnor), PointFromId(1956332581));
                                }

                            }
                        }
                    }
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Minasanor_Init () {
    gt_Minasanor = TriggerCreate("gt_Minasanor_Func");
    TriggerAddEventTimePeriodic(gt_Minasanor, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minas Anor income
//--------------------------------------------------------------------------------------------------
bool gt_MinasAnorincome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_minasAnor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minasAnor = UnitFromId(1325808467);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_minasAnor) == true) && (UnitGetOwner(lv_minasAnor) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_minasAnor), c_playerPropMinerals, c_playerPropOperAdd, 100);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MinasAnorincome_Init () {
    gt_MinasAnorincome = TriggerCreate("gt_MinasAnorincome_Func");
    TriggerAddEventTimePeriodic(gt_MinasAnorincome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pelargir
//--------------------------------------------------------------------------------------------------
bool gt_Pelargir_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawner;
    point lv_point;
    unit lv_pelargir;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawner = UnitFromId(989327831);
    lv_point = PointFromId(1388273972);
    lv_pelargir = UnitFromId(989327831);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_pelargir) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_pelargir), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_pelargir), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_pelargir) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_pelargir), "BuildUpTheFleet", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Battlecruiser", 0, UnitGetOwner(lv_pelargir), PointFromId(1388273972));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Wraith", 0, UnitGetOwner(lv_pelargir), PointFromId(1388273972));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Vulture", 0, UnitGetOwner(lv_pelargir), PointFromId(1388273972));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(lv_pelargir), PointFromId(1388273972));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(lv_pelargir), PointFromId(1388273972));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "SentryAiur", 0, UnitGetOwner(lv_pelargir), PointFromId(1388273972));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_pelargir), "PelargirUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Wraith", 0, UnitGetOwner(lv_pelargir), PointFromId(1388273972));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Vulture", 0, UnitGetOwner(lv_pelargir), PointFromId(1388273972));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(lv_pelargir), PointFromId(1388273972));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(lv_pelargir), PointFromId(1388273972));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "SentryAiur", 0, UnitGetOwner(lv_pelargir), PointFromId(1388273972));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_pelargir), "PelargirUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Wraith", 0, UnitGetOwner(lv_pelargir), PointFromId(1388273972));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Vulture", 0, UnitGetOwner(lv_pelargir), PointFromId(1388273972));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(lv_pelargir), PointFromId(1388273972));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_pelargir), PointFromId(1388273972));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_pelargir), "PelargirUpgradespawn", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(lv_pelargir), PointFromId(1388273972));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_pelargir), PointFromId(1388273972));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(lv_pelargir), "PelargirUpgradespawn", c_techCountCompleteOnly) == 0)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_pelargir), PointFromId(1388273972));
                        }

                    }
                }
            }
        }
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "PelargirUpgradespawn2", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "ReinforcementsFromHarandor", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "Marine", lv_spawner, lv_point);
            gf_Createunit(1, "Zealot", lv_spawner, lv_point);
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "PelargirUpgradespawn3", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "ReinforcementsFromHarandor", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "Marine", lv_spawner, lv_point);
            gf_Createunit(1, "Zealot", lv_spawner, lv_point);
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "PelargirUpgradespawn", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "ReinforcementsFromHarandor", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "Marine", lv_spawner, lv_point);
            gf_Createunit(1, "Zealot", lv_spawner, lv_point);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Pelargir_Init () {
    gt_Pelargir = TriggerCreate("gt_Pelargir_Func");
    TriggerAddEventTimePeriodic(gt_Pelargir, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pelargir Income
//--------------------------------------------------------------------------------------------------
bool gt_PelargirIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pelargir;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pelargir = UnitFromId(989327831);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_pelargir) == true) && (UnitGetOwner(lv_pelargir) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_pelargir), c_playerPropMinerals, c_playerPropOperAdd, 50);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PelargirIncome_Init () {
    gt_PelargirIncome = TriggerCreate("gt_PelargirIncome_Func");
    TriggerAddEventTimePeriodic(gt_PelargirIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dor-En-Ernil
//--------------------------------------------------------------------------------------------------
bool gt_DorEnErnil_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dorEnErnil;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dorEnErnil = UnitFromId(1231497359);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_dorEnErnil) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_dorEnErnil), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_dorEnErnil), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_dorEnErnil) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_dorEnErnil), "DorEnErnilUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Diamondback", 0, UnitGetOwner(lv_dorEnErnil), PointFromId(2096454049));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_dorEnErnil), PointFromId(2096454049));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_dorEnErnil), PointFromId(2096454049));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Vulture", 0, UnitGetOwner(lv_dorEnErnil), PointFromId(2096454049));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Spectre", 0, UnitGetOwner(lv_dorEnErnil), PointFromId(2096454049));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_dorEnErnil), "DorEnErnilUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_dorEnErnil), PointFromId(2096454049));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_dorEnErnil), PointFromId(2096454049));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Vulture", 0, UnitGetOwner(lv_dorEnErnil), PointFromId(2096454049));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Spectre", 0, UnitGetOwner(lv_dorEnErnil), PointFromId(2096454049));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_dorEnErnil), "DorEnErnilUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_dorEnErnil), PointFromId(2096454049));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_dorEnErnil), PointFromId(2096454049));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Vulture", 0, UnitGetOwner(lv_dorEnErnil), PointFromId(2096454049));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spectre", 0, UnitGetOwner(lv_dorEnErnil), PointFromId(2096454049));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_dorEnErnil), "DorEnErnilUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_dorEnErnil), PointFromId(2096454049));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spectre", 0, UnitGetOwner(lv_dorEnErnil), PointFromId(2096454049));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DorEnErnil_Init () {
    gt_DorEnErnil = TriggerCreate("gt_DorEnErnil_Func");
    TriggerAddEventTimePeriodic(gt_DorEnErnil, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dor-En-Ernil Income
//--------------------------------------------------------------------------------------------------
bool gt_DorEnErnilIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dorEnErnil;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dorEnErnil = UnitFromId(1231497359);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_dorEnErnil) == true) && (UnitGetOwner(lv_dorEnErnil) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_dorEnErnil), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DorEnErnilIncome_Init () {
    gt_DorEnErnilIncome = TriggerCreate("gt_DorEnErnilIncome_Func");
    TriggerAddEventTimePeriodic(gt_DorEnErnilIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lamedon
//--------------------------------------------------------------------------------------------------
bool gt_Lamedon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lamedon;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lamedon = UnitFromId(100603755);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_lamedon) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_lamedon), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_lamedon), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_lamedon) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_lamedon), "LamedonUpgradespawn4", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeTank", 0, UnitGetOwner(lv_lamedon), PointFromId(2096454049));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Spectre", 0, UnitGetOwner(lv_lamedon), PointFromId(2096454049));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(lv_lamedon), PointFromId(2096454049));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(lv_lamedon), PointFromId(2096454049));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Predator", 0, UnitGetOwner(lv_lamedon), PointFromId(2096454049));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_lamedon), "LamedonUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeTank", 0, UnitGetOwner(lv_lamedon), PointFromId(2096454049));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Spectre", 0, UnitGetOwner(lv_lamedon), PointFromId(2096454049));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(lv_lamedon), PointFromId(2096454049));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(lv_lamedon), PointFromId(2096454049));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Predator", 0, UnitGetOwner(lv_lamedon), PointFromId(2096454049));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_lamedon), "LamedonUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Spectre", 0, UnitGetOwner(lv_lamedon), PointFromId(2096454049));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(lv_lamedon), PointFromId(2096454049));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_lamedon), PointFromId(2096454049));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Predator", 0, UnitGetOwner(lv_lamedon), PointFromId(2096454049));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_lamedon), "LamedonUpgradespawn", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(lv_lamedon), PointFromId(2096454049));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_lamedon), PointFromId(2096454049));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Predator", 0, UnitGetOwner(lv_lamedon), PointFromId(2096454049));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(lv_lamedon), "LamedonUpgradespawn", c_techCountCompleteOnly) == 0)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_lamedon), PointFromId(2096454049));
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_lamedon), PointFromId(2096454049));
                        }

                    }
                }
            }
        }
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_lamedon), "RangersOfTheWhiteMountains", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spectre", 0, UnitGetOwner(lv_lamedon), PointFromId(2096454049));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Predator", 0, UnitGetOwner(lv_lamedon), PointFromId(2096454049));
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Lamedon_Init () {
    gt_Lamedon = TriggerCreate("gt_Lamedon_Func");
    TriggerAddEventTimePeriodic(gt_Lamedon, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lamedon Income
//--------------------------------------------------------------------------------------------------
bool gt_LamedonIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lamedon;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lamedon = UnitFromId(100603755);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_lamedon) == true) && (UnitGetOwner(lv_lamedon) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_lamedon), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LamedonIncome_Init () {
    gt_LamedonIncome = TriggerCreate("gt_LamedonIncome_Func");
    TriggerAddEventTimePeriodic(gt_LamedonIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Eryn Vorn (Good)
//--------------------------------------------------------------------------------------------------
bool gt_ActivateErynVornGood_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 4500))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(62)) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "MengskGoliath")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 4500);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedEngBay", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(826890422));
    gv_erynVorn = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(353230642));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1957296336));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1558514703));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(415884524));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(157278799));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(156466711));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1540266161));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(961319121));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(639198562));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(622636674));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1026102872));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/01611630"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_erynVornBeacon);
    TriggerEnable(gt_ErynVorngood, true);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ErynVornEvil, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateErynVornGood_Init () {
    gt_ActivateErynVornGood = TriggerCreate("gt_ActivateErynVornGood_Func");
    TriggerAddEventUnitBehaviorChange(gt_ActivateErynVornGood, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Eryn Vorn (Evil)
//--------------------------------------------------------------------------------------------------
bool gt_ActivateErynVornEvil_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 4500))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(62)) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "TaurenSpaceMarine")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 4500);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ErynVornEvil", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(826890422));
    gv_erynVorn = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(353230642));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1957296336));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1558514703));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(415884524));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(157278799));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(156466711));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1540266161));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(961319121));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(639198562));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(622636674));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1026102872));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/4611F261"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_erynVornBeacon);
    TriggerEnable(gt_ErynVornEvil, true);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ErynVorngood, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateErynVornEvil_Init () {
    gt_ActivateErynVornEvil = TriggerCreate("gt_ActivateErynVornEvil_Func");
    TriggerAddEventUnitBehaviorChange(gt_ActivateErynVornEvil, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Eryn Vorn (good)
//--------------------------------------------------------------------------------------------------
bool gt_ErynVorngood_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawner;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawner = gv_erynVorn;
    lv_point = PointFromId(1160570545);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_spawner) == true))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesMade)))) {
            return false;
        }

        if (!((UnitGetOwner(lv_spawner) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    gf_Createunit(3, "PreserverA", lv_spawner, lv_point);
    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "ErynVornUpgradeSpawn", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(2, "PreserverA", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "ErynVornUpgradeSpawn2", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "PreserverC", lv_spawner, lv_point);
        gf_Createunit(1, "PreserverA", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "ErynVornUpgradeSpawn3", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "PortJunker", lv_spawner, lv_point);
        gf_Createunit(1, "PreserverA", lv_spawner, lv_point);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ErynVorngood_Init () {
    gt_ErynVorngood = TriggerCreate("gt_ErynVorngood_Func");
    TriggerEnable(gt_ErynVorngood, false);
    TriggerAddEventTimePeriodic(gt_ErynVorngood, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Eryn Vorn (Evil)
//--------------------------------------------------------------------------------------------------
bool gt_ErynVornEvil_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawner;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawner = gv_erynVorn;
    lv_point = PointFromId(1160570545);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_spawner) == true))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesMade)))) {
            return false;
        }

        if (!((UnitGetOwner(lv_spawner) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    gf_Createunit(3, "PreserverA", lv_spawner, lv_point);
    gf_Createunit(1, "PreserverB", lv_spawner, lv_point);
    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "ErynVornUpgradeSpawn4", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(3, "PreserverA", lv_spawner, lv_point);
        gf_Createunit(1, "PreserverB", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "ErynVornUpgradeSpawn5", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(3, "PreserverA", lv_spawner, lv_point);
        gf_Createunit(1, "PreserverC", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "ErynVornUpgradeSpawn32", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(3, "PreserverA", lv_spawner, lv_point);
        gf_Createunit(1, "PortJunker", lv_spawner, lv_point);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ErynVornEvil_Init () {
    gt_ErynVornEvil = TriggerCreate("gt_ErynVornEvil_Func");
    TriggerEnable(gt_ErynVornEvil, false);
    TriggerAddEventTimePeriodic(gt_ErynVornEvil, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Active Pallando
//--------------------------------------------------------------------------------------------------
bool gt_ActivePallando_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 7500))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(61)) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Raven") || (UnitGetType(EventUnit()) == "SentryPurifier")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 7500);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TempestPurifier", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1240238895));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/34C2077E"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_pallandoBeacon);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivePallando_Init () {
    gt_ActivePallando = TriggerCreate("gt_ActivePallando_Func");
    TriggerAddEventUnitBehaviorChange(gt_ActivePallando, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Active Alatar
//--------------------------------------------------------------------------------------------------
bool gt_ActiveAlatar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 7500))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "TychusCommando") || (UnitGetType(EventUnit()) == "RaynorCommando") || (UnitGetType(EventUnit()) == "SentryPurifier")))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(9)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 7500);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhoenixPurifier", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1240238895));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/78F0D85D"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_alatarbeacon);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActiveAlatar_Init () {
    gt_ActiveAlatar = TriggerCreate("gt_ActiveAlatar_Func");
    TriggerAddEventUnitBehaviorChange(gt_ActiveAlatar, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Bree
//--------------------------------------------------------------------------------------------------
bool gt_ActivateBree_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 5000))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(59)) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "HERC") || (UnitGetType(EventUnit()) == "MengskGoliath")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 5000);
    libNtve_gf_RescueUnit(gv_bree, UnitGetOwner(EventUnit()), true);
    UnitBehaviorRemove(gv_bree, "Invulnerable", 1);
    libNtve_gf_ShowHideUnit(gv_bree, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(440380762));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1113270755));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1410558768));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(831013088));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(771027763));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(398308918));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(505896664));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(965616737));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(2065095504));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(447396555));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1485340034));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(145507362));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F2010995"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_breebeacon);
    TriggerEnable(gt_Bree, true);
    TriggerEnable(gt_BreeIncome, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateBree_Init () {
    gt_ActivateBree = TriggerCreate("gt_ActivateBree_Func");
    TriggerAddEventUnitBehaviorChange(gt_ActivateBree, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bree
//--------------------------------------------------------------------------------------------------
bool gt_Bree_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawner;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawner = gv_bree;
    lv_point = PointFromId(136587861);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_spawner) == true))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesMade)))) {
            return false;
        }

        if (!((UnitGetOwner(lv_spawner) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    gf_Createunit(1, "Spectre", lv_spawner, lv_point);
    gf_Createunit(1, "Zealot", lv_spawner, lv_point);
    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "BreeUpgradeSpawn22", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "SiegeTank", lv_spawner, lv_point);
        gf_Createunit(1, "RoguePurifierSupportDroneA", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "BreeUpgradeSpawn2", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "Spectre", lv_spawner, lv_point);
        gf_Createunit(1, "RoguePurifierSupportDroneA", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "BreeUpgradeSpawn", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "Spectre", lv_spawner, lv_point);
        gf_Createunit(1, "Zealot", lv_spawner, lv_point);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Bree_Init () {
    gt_Bree = TriggerCreate("gt_Bree_Func");
    TriggerEnable(gt_Bree, false);
    TriggerAddEventTimePeriodic(gt_Bree, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bree Income
//--------------------------------------------------------------------------------------------------
bool gt_BreeIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bree;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bree = UnitFromId(1295235531);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_bree) == true) && (UnitGetOwner(lv_bree) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_bree), c_playerPropMinerals, c_playerPropOperAdd, 50);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BreeIncome_Init () {
    gt_BreeIncome = TriggerCreate("gt_BreeIncome_Func");
    TriggerEnable(gt_BreeIncome, false);
    TriggerAddEventTimePeriodic(gt_BreeIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activtate Aglarond
//--------------------------------------------------------------------------------------------------
bool gt_ActivtateAglarond_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 8500))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Raven") || ((UnitGetType(EventUnit()) == "Tosh") || ((UnitGetType(EventUnit()) == "FenixChampion")))))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(30)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 8500);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "LogisticsHeadquarters", c_unitCreateIgnorePlacement, gv_itemWestGondor, PointFromId(443770944));
    gv_suthburg = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RefineryPipes", c_unitCreateIgnorePlacement, gv_itemDwarves, PointFromId(1204351747));
    gv_aglarond = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(380689991));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1679402690));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(421601313));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(626886867));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(5516133));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(976641067));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1204072469));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1240462419));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(549582566));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(2130327811));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1946759794));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(772202334));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(357019741));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(668178086));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(115042508));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(2144592195));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/5A111716"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_aglarondBeacon);
    TriggerEnable(gt_Suthburg, true);
    TriggerEnable(gt_Aglarond, true);
    TriggerEnable(gt_AglarondIncome, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivtateAglarond_Init () {
    gt_ActivtateAglarond = TriggerCreate("gt_ActivtateAglarond_Func");
    TriggerAddEventUnitBehaviorChange(gt_ActivtateAglarond, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Suthburg
//--------------------------------------------------------------------------------------------------
bool gt_Suthburg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_triggeringspawn;
    point lv_triggeringpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggeringspawn = gv_suthburg;
    lv_triggeringpoint = PointFromId(1265249104);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_triggeringspawn) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_triggeringspawn), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_triggeringspawn), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_triggeringspawn) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(gv_suthburg), "SuthburgUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "Diamondback", lv_triggeringspawn, lv_triggeringpoint);
            gf_Createunit(1, "Vulture", lv_triggeringspawn, lv_triggeringpoint);
            gf_Createunit(1, "Spectre", lv_triggeringspawn, lv_triggeringpoint);
            gf_Createunit(1, "Vulture", lv_triggeringspawn, lv_triggeringpoint);
            gf_Createunit(1, "Marine", lv_triggeringspawn, lv_triggeringpoint);
            gf_Createunit(3, "Zealot", lv_triggeringspawn, lv_triggeringpoint);
        }
        else if ((TechTreeUpgradeCount(UnitGetOwner(gv_suthburg), "SuthburgUpgradespawn2", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "Vulture", lv_triggeringspawn, lv_triggeringpoint);
            gf_Createunit(1, "Spectre", lv_triggeringspawn, lv_triggeringpoint);
            gf_Createunit(1, "Vulture", lv_triggeringspawn, lv_triggeringpoint);
            gf_Createunit(1, "Marine", lv_triggeringspawn, lv_triggeringpoint);
            gf_Createunit(2, "Zealot", lv_triggeringspawn, lv_triggeringpoint);
        }
        else if ((TechTreeUpgradeCount(UnitGetOwner(gv_suthburg), "SuthburgUpgradespawn", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(1, "Spectre", lv_triggeringspawn, lv_triggeringpoint);
            gf_Createunit(1, "Vulture", lv_triggeringspawn, lv_triggeringpoint);
            gf_Createunit(1, "Marine", lv_triggeringspawn, lv_triggeringpoint);
            gf_Createunit(1, "Zealot", lv_triggeringspawn, lv_triggeringpoint);
        }
        else if ((TechTreeUpgradeCount(UnitGetOwner(gv_suthburg), "SuthburgUpgradespawn", c_techCountCompleteOnly) == 0)) {
            gf_Createunit(1, "Marine", lv_triggeringspawn, lv_triggeringpoint);
            gf_Createunit(1, "Zealot", lv_triggeringspawn, lv_triggeringpoint);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Suthburg_Init () {
    gt_Suthburg = TriggerCreate("gt_Suthburg_Func");
    TriggerEnable(gt_Suthburg, false);
    TriggerAddEventTimePeriodic(gt_Suthburg, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aglarond
//--------------------------------------------------------------------------------------------------
bool gt_Aglarond_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_triggeringspawn;
    point lv_triggeringpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggeringspawn = gv_aglarond;
    lv_triggeringpoint = PointFromId(1265249104);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_triggeringspawn) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_triggeringspawn), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_triggeringspawn), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_triggeringspawn) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(gv_suthburg), "AglarondUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(2, "Marauder", lv_triggeringspawn, lv_triggeringpoint);
            gf_Createunit(2, "Firebat", lv_triggeringspawn, lv_triggeringpoint);
            gf_Createunit(3, "VikingFighter", lv_triggeringspawn, lv_triggeringpoint);
            gf_Createunit(1, "ThorAP", lv_triggeringspawn, lv_triggeringpoint);
        }
        else if ((TechTreeUpgradeCount(UnitGetOwner(gv_suthburg), "AglarondUpgradespawn2", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(2, "Marauder", lv_triggeringspawn, lv_triggeringpoint);
            gf_Createunit(2, "Firebat", lv_triggeringspawn, lv_triggeringpoint);
            gf_Createunit(2, "VikingFighter", lv_triggeringspawn, lv_triggeringpoint);
        }
        else if ((TechTreeUpgradeCount(UnitGetOwner(gv_suthburg), "AglarondUpgradespawn", c_techCountCompleteOnly) == 1)) {
            gf_Createunit(2, "Marauder", lv_triggeringspawn, lv_triggeringpoint);
            gf_Createunit(2, "Firebat", lv_triggeringspawn, lv_triggeringpoint);
        }
        else if ((TechTreeUpgradeCount(UnitGetOwner(gv_suthburg), "AglarondUpgradespawn", c_techCountCompleteOnly) == 0)) {
            gf_Createunit(1, "Marauder", lv_triggeringspawn, lv_triggeringpoint);
            gf_Createunit(1, "Firebat", lv_triggeringspawn, lv_triggeringpoint);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Aglarond_Init () {
    gt_Aglarond = TriggerCreate("gt_Aglarond_Func");
    TriggerEnable(gt_Aglarond, false);
    TriggerAddEventTimePeriodic(gt_Aglarond, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aglarond Income
//--------------------------------------------------------------------------------------------------
bool gt_AglarondIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_aglarond;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_aglarond = gv_aglarond;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_aglarond) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_aglarond), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_aglarond), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_aglarond) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_aglarond), "AglarondGold", c_techCountCompleteOnly) == 1)) {
            PlayerModifyPropertyInt(UnitGetOwner(lv_aglarond), c_playerPropMinerals, c_playerPropOperAdd, 100);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AglarondIncome_Init () {
    gt_AglarondIncome = TriggerCreate("gt_AglarondIncome_Func");
    TriggerEnable(gt_AglarondIncome, false);
    TriggerAddEventTimePeriodic(gt_AglarondIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Refuge Of Edhelion
//--------------------------------------------------------------------------------------------------
bool gt_ActivateRefugeOfEdhelion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 3000))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Swann") || ((UnitGetType(EventUnit()) == "Zeratul"))))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(35)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 3000);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "StargateWarp", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1786739444));
    gv_refugeOfEdhelion = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1501878802));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(2142061180));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1267918800));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1106864602));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1932046421));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1173911792));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1452031511));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(2024797834));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1442685550));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(842002345));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1880568144));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1562462095));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/580F86B2"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_refugeOfEdhelionBeacon);
    TriggerEnable(gt_RefugeOfEdhelion, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateRefugeOfEdhelion_Init () {
    gt_ActivateRefugeOfEdhelion = TriggerCreate("gt_ActivateRefugeOfEdhelion_Func");
    TriggerAddEventUnitBehaviorChange(gt_ActivateRefugeOfEdhelion, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Refuge Of Edhelion
//--------------------------------------------------------------------------------------------------
bool gt_RefugeOfEdhelion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawner;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawner = gv_refugeOfEdhelion;
    lv_point = PointFromId(1106483378);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_spawner) == true))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesMade)))) {
            return false;
        }

        if (!((UnitGetOwner(lv_spawner) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    gf_Createunit(1, "Marauder", lv_spawner, lv_point);
    gf_Createunit(1, "NoldorArcher", lv_spawner, lv_point);
    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "EdhelionUpgradespawn2", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "VikingAssault", lv_spawner, lv_point);
        gf_Createunit(1, "NoldorWarrior", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "EdhelionUpgradespawn", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "Stalker", lv_spawner, lv_point);
        gf_Createunit(1, "Hellion", lv_spawner, lv_point);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RefugeOfEdhelion_Init () {
    gt_RefugeOfEdhelion = TriggerCreate("gt_RefugeOfEdhelion_Func");
    TriggerEnable(gt_RefugeOfEdhelion, false);
    TriggerAddEventTimePeriodic(gt_RefugeOfEdhelion, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Lossarnach
//--------------------------------------------------------------------------------------------------
bool gt_ActivateLossarnach_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 4000))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "HERC") || ((UnitGetType(EventUnit()) == "RaynorCommando") || (UnitGetType(EventUnit()) == "MengskSiegeTank"))))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(36)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 4000);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TechReactor", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(832570904));
    gv_lossarnach = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(779852137));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1852052730));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1784621354));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1729290614));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1199353072));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1787515528));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1831311900));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6072E2E9"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_lossarnachBeacon);
    TriggerEnable(gt_Lossarnach, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateLossarnach_Init () {
    gt_ActivateLossarnach = TriggerCreate("gt_ActivateLossarnach_Func");
    TriggerAddEventUnitBehaviorChange(gt_ActivateLossarnach, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lossarnach
//--------------------------------------------------------------------------------------------------
bool gt_Lossarnach_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawner;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawner = gv_lossarnach;
    lv_point = PointFromId(127344765);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_spawner) == true))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesMade)))) {
            return false;
        }

        if (!((UnitGetOwner(lv_spawner) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    gf_Createunit(2, "Marine", lv_spawner, lv_point);
    gf_Createunit(1, "Zealot", lv_spawner, lv_point);
    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "LossarnachUpgradespawn3", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(2, "Replicant", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "LossarnachUpgradespawn2", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(2, "Replicant", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "LossarnachUpgradespawn", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(2, "Replicant", lv_spawner, lv_point);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Lossarnach_Init () {
    gt_Lossarnach = TriggerCreate("gt_Lossarnach_Func");
    TriggerEnable(gt_Lossarnach, false);
    TriggerAddEventTimePeriodic(gt_Lossarnach, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Libnir
//--------------------------------------------------------------------------------------------------
bool gt_ActivateLibnir_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 7500))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "TychusCommando") || ((UnitGetType(EventUnit()) == "MothershipAiur06") || ((UnitGetType(EventUnit()) == "Raven")))))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(8)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 7500);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SnowRefinery_Terran_BaseRefinery", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(628445983));
    gv_libnir = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarHound", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1115712928));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(904555782));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1124142446));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1478396094));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1553478046));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(687051767));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(344181831));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(374431774));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(741212714));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1560402659));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(414082733));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1712279363));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(2018188431));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/418FA541"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_libnirBeacon);
    TriggerEnable(gt_Libnir, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateLibnir_Init () {
    gt_ActivateLibnir = TriggerCreate("gt_ActivateLibnir_Func");
    TriggerAddEventUnitBehaviorChange(gt_ActivateLibnir, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Libnir
//--------------------------------------------------------------------------------------------------
bool gt_Libnir_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(gv_libnir) == true) && (PlayerGetPropertyInt(UnitGetOwner(gv_libnir), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(gv_libnir), c_playerPropSuppliesMade)) && (UnitGetOwner(gv_libnir) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(gv_libnir), "LibnirUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeTank", 0, UnitGetOwner(gv_libnir), PointFromId(1115712928));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Diamondback", 0, UnitGetOwner(gv_libnir), PointFromId(1115712928));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Vulture", 0, UnitGetOwner(gv_libnir), PointFromId(1115712928));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Wraith", 0, UnitGetOwner(gv_libnir), PointFromId(1115712928));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Spectre", 0, UnitGetOwner(gv_libnir), PointFromId(1115712928));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "SentryAiur", 0, UnitGetOwner(gv_libnir), PointFromId(1115712928));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(gv_libnir), "LibnirUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Vulture", 0, UnitGetOwner(gv_libnir), PointFromId(1115712928));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Wraith", 0, UnitGetOwner(gv_libnir), PointFromId(1115712928));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Spectre", 0, UnitGetOwner(gv_libnir), PointFromId(1115712928));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryAiur", 0, UnitGetOwner(gv_libnir), PointFromId(1115712928));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(gv_libnir), "LibnirUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Spectre", 0, UnitGetOwner(gv_libnir), PointFromId(1115712928));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryAiur", 0, UnitGetOwner(gv_libnir), PointFromId(1115712928));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(gv_libnir), "LibnirUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spectre", 0, UnitGetOwner(gv_libnir), PointFromId(1115712928));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Libnir_Init () {
    gt_Libnir = TriggerCreate("gt_Libnir_Func");
    TriggerEnable(gt_Libnir, false);
    TriggerAddEventTimePeriodic(gt_Libnir, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lord Of Iron Hills
//--------------------------------------------------------------------------------------------------
bool gt_LordOfIronHills_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ironhills;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ironhills = UnitFromId(333958134);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_ironhills), "LordOfIronHills", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!((EventPlayer() == UnitGetOwner(lv_ironhills)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Loki", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(361055542));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/8092604C"));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LordOfIronHills_Init () {
    gt_LordOfIronHills = TriggerCreate("gt_LordOfIronHills_Func");
    TriggerAddEventUnitResearchProgress(gt_LordOfIronHills, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Red Dwarves Encampment
//--------------------------------------------------------------------------------------------------
bool gt_ActivateRedDwarvesEncampment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 4500))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Loki") || ((UnitGetType(EventUnit()) == "Warbot"))))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(34)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 4500);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedDominionHousing1", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(355241990));
    gv_redDwarvesEncampment = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1687249882));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(115964286));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(805766016));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(397945125));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(559074853));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(2077633093));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1144902028));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1154930901));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(2087397674));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(587683532));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1961676076));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1713063656));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E9AE7D21"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_redDwarvesBeacon);
    TriggerEnable(gt_RedDwarvesEncampment, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateRedDwarvesEncampment_Init () {
    gt_ActivateRedDwarvesEncampment = TriggerCreate("gt_ActivateRedDwarvesEncampment_Func");
    TriggerAddEventUnitBehaviorChange(gt_ActivateRedDwarvesEncampment, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Red Dwarves Encampment
//--------------------------------------------------------------------------------------------------
bool gt_RedDwarvesEncampment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawner;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawner = gv_redDwarvesEncampment;
    lv_point = PointFromId(769943264);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_spawner) == true))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesMade)))) {
            return false;
        }

        if (!((UnitGetOwner(lv_spawner) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    gf_Createunit(1, "Marauder", lv_spawner, lv_point);
    gf_Createunit(1, "Firebat", lv_spawner, lv_point);
    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "RedDwarvesEncampmentUpgradespawn3", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(2, "Marauder", lv_spawner, lv_point);
        gf_Createunit(1, "ImmortalShakuras", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "RedDwarvesEncampmentUpgradespawn2", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "VikingAssault", lv_spawner, lv_point);
        gf_Createunit(1, "DwarvenMiner", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "RedDwarvesEncampmentUpgradespawn", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(2, "Hellion", lv_spawner, lv_point);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RedDwarvesEncampment_Init () {
    gt_RedDwarvesEncampment = TriggerCreate("gt_RedDwarvesEncampment_Func");
    TriggerEnable(gt_RedDwarvesEncampment, false);
    TriggerAddEventTimePeriodic(gt_RedDwarvesEncampment, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flee Dale Activate
//--------------------------------------------------------------------------------------------------
bool gt_FleeDaleActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(699489457)), "PrepareToFlee", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(UnitFromId(699489457)))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Factory", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(866401256));
    gv_dale = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(353131136));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1501760506));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(23645684));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(2082489756));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1893613166));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1031056015));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1432978527));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(242894822));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/278C02BB"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    TriggerEnable(gt_Dale2, true);
    TriggerEnable(gt_Dale2Income, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FleeDaleActivate_Init () {
    gt_FleeDaleActivate = TriggerCreate("gt_FleeDaleActivate_Func");
    TriggerAddEventUnitDied(gt_FleeDaleActivate, UnitRefFromUnit(UnitFromId(699489457)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dale 2
//--------------------------------------------------------------------------------------------------
bool gt_Dale2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(gv_dale) == true) && (PlayerGetPropertyInt(UnitGetOwner(gv_dale), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(gv_dale), c_playerPropSuppliesMade)) && (UnitGetOwner(gv_dale) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(gv_dale), "DaleUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Vulture", 0, UnitGetOwner(gv_dale), PointFromId(1955257001));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(gv_dale), PointFromId(1955257001));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(gv_dale), PointFromId(1955257001));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeTank", 0, UnitGetOwner(gv_dale), PointFromId(1955257001));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(gv_dale), "DaleUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Vulture", 0, UnitGetOwner(gv_dale), PointFromId(1955257001));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(gv_dale), PointFromId(1955257001));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(gv_dale), PointFromId(1955257001));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(gv_dale), "DaleUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Vulture", 0, UnitGetOwner(gv_dale), PointFromId(1955257001));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(gv_dale), PointFromId(1955257001));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(gv_dale), PointFromId(1955257001));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(gv_dale), "DaleUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(gv_dale), PointFromId(1955257001));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Dale2_Init () {
    gt_Dale2 = TriggerCreate("gt_Dale2_Func");
    TriggerEnable(gt_Dale2, false);
    TriggerAddEventTimePeriodic(gt_Dale2, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dale 2 Income
//--------------------------------------------------------------------------------------------------
bool gt_Dale2Income_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dale;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dale = gv_dale;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_dale) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_dale), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_dale), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_dale) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_dale), c_playerPropMinerals, c_playerPropOperAdd, 50);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Dale2Income_Init () {
    gt_Dale2Income = TriggerCreate("gt_Dale2Income_Func");
    TriggerEnable(gt_Dale2Income, false);
    TriggerAddEventTimePeriodic(gt_Dale2Income, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Increase Mining Upgrades
//--------------------------------------------------------------------------------------------------
bool gt_IncreaseMiningUpgrades_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_khazaDum;

    // Automatic Variable Declarations
    int auto3DDA56C0_val;

    // Variable Initialization
    lv_khazaDum = UnitFromId(221478581);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_khazaDum), EventUpgradeName(), c_techCountCompleteOnly) == 0)) {
        auto3DDA56C0_val = TechTreeUpgradeCount(gv_itemDwarves, EventUpgradeName(), c_techCountCompleteOnly);
        if (auto3DDA56C0_val == TechTreeUpgradeCount(UnitGetOwner(lv_khazaDum), "BlueMountainsCopper", c_techCountCompleteOnly)) {
            gv_miningUpgrades += 1;
            TriggerEnable(gt_UnlockDurinTheFifth, true);

        }
        else if (auto3DDA56C0_val == TechTreeUpgradeCount(UnitGetOwner(lv_khazaDum), "BlueMountainsGold", c_techCountCompleteOnly)) {
            gv_miningUpgrades += 1;
            TriggerEnable(gt_UnlockDurinTheFifth, true);

        }
        else if (auto3DDA56C0_val == TechTreeUpgradeCount(UnitGetOwner(lv_khazaDum), "BlueMountainsIron", c_techCountCompleteOnly)) {
            gv_miningUpgrades += 1;
            TriggerEnable(gt_UnlockDurinTheFifth, true);

        }
        else if (auto3DDA56C0_val == TechTreeUpgradeCount(UnitGetOwner(lv_khazaDum), "BlueMountainsMithril", c_techCountCompleteOnly)) {
            gv_miningUpgrades += 1;
            TriggerEnable(gt_UnlockDurinTheFifth, true);

        }
        else if (auto3DDA56C0_val == TechTreeUpgradeCount(UnitGetOwner(lv_khazaDum), "BlueMountainsCopper", c_techCountCompleteOnly)) {
            gv_miningUpgrades += 1;
            TriggerEnable(gt_UnlockDurinTheFifth, true);

        }
        else if (auto3DDA56C0_val == TechTreeUpgradeCount(UnitGetOwner(lv_khazaDum), "EreborCopper", c_techCountCompleteOnly)) {
            gv_miningUpgrades += 1;
            TriggerEnable(gt_UnlockDurinTheFifth, true);

        }
        else if (auto3DDA56C0_val == TechTreeUpgradeCount(UnitGetOwner(lv_khazaDum), "EreborGold", c_techCountCompleteOnly)) {
            gv_miningUpgrades += 1;
            TriggerEnable(gt_UnlockDurinTheFifth, true);

        }
        else if (auto3DDA56C0_val == TechTreeUpgradeCount(UnitGetOwner(lv_khazaDum), "EreborIron", c_techCountCompleteOnly)) {
            gv_miningUpgrades += 1;
            TriggerEnable(gt_UnlockDurinTheFifth, true);

        }
        else if (auto3DDA56C0_val == TechTreeUpgradeCount(UnitGetOwner(lv_khazaDum), "EreborMithril", c_techCountCompleteOnly)) {
            gv_miningUpgrades += 1;
            TriggerEnable(gt_UnlockDurinTheFifth, true);

        }
        else if (auto3DDA56C0_val == TechTreeUpgradeCount(UnitGetOwner(lv_khazaDum), "IronHillsCopper", c_techCountCompleteOnly)) {
            gv_miningUpgrades += 1;
            TriggerEnable(gt_UnlockDurinTheFifth, true);

        }
        else if (auto3DDA56C0_val == TechTreeUpgradeCount(UnitGetOwner(lv_khazaDum), "IronHillsGold", c_techCountCompleteOnly)) {
            gv_miningUpgrades += 1;
            TriggerEnable(gt_UnlockDurinTheFifth, true);

        }
        else if (auto3DDA56C0_val == TechTreeUpgradeCount(UnitGetOwner(lv_khazaDum), "IronHillsIron", c_techCountCompleteOnly)) {
            gv_miningUpgrades += 1;
            TriggerEnable(gt_UnlockDurinTheFifth, true);

        }
        else if (auto3DDA56C0_val == TechTreeUpgradeCount(UnitGetOwner(lv_khazaDum), "IronHillsMithril", c_techCountCompleteOnly)) {
            gv_miningUpgrades += 1;
            TriggerEnable(gt_UnlockDurinTheFifth, true);

        }
        else if (auto3DDA56C0_val == TechTreeUpgradeCount(UnitGetOwner(lv_khazaDum), "KhazaDumCopper", c_techCountCompleteOnly)) {
            gv_miningUpgrades += 1;
            TriggerEnable(gt_UnlockDurinTheFifth, true);

        }
        else if (auto3DDA56C0_val == TechTreeUpgradeCount(UnitGetOwner(lv_khazaDum), "KhazaDumGold", c_techCountCompleteOnly)) {
            gv_miningUpgrades += 1;
            TriggerEnable(gt_UnlockDurinTheFifth, true);

        }
        else if (auto3DDA56C0_val == TechTreeUpgradeCount(UnitGetOwner(lv_khazaDum), "KhazaDumiron", c_techCountCompleteOnly)) {
            gv_miningUpgrades += 1;
            TriggerEnable(gt_UnlockDurinTheFifth, true);

        }
        else if (auto3DDA56C0_val == TechTreeUpgradeCount(UnitGetOwner(lv_khazaDum), "KhazaDumMithril", c_techCountCompleteOnly)) {
            gv_miningUpgrades += 1;
            TriggerEnable(gt_UnlockDurinTheFifth, true);

        }
        else if (auto3DDA56C0_val == TechTreeUpgradeCount(UnitGetOwner(lv_khazaDum), "BuzraDumCopper", c_techCountCompleteOnly)) {
            gv_miningUpgrades += 1;
            TriggerEnable(gt_UnlockDurinTheFifth, true);

        }
        else if (auto3DDA56C0_val == TechTreeUpgradeCount(UnitGetOwner(lv_khazaDum), "BuzraDumGold", c_techCountCompleteOnly)) {
            gv_miningUpgrades += 1;
            TriggerEnable(gt_UnlockDurinTheFifth, true);

        }
        else if (auto3DDA56C0_val == TechTreeUpgradeCount(UnitGetOwner(lv_khazaDum), "BuzraDumIron", c_techCountCompleteOnly)) {
            gv_miningUpgrades += 1;
            TriggerEnable(gt_UnlockDurinTheFifth, true);

        }
        else if (auto3DDA56C0_val == TechTreeUpgradeCount(UnitGetOwner(lv_khazaDum), "BuzraDumMithril", c_techCountCompleteOnly)) {
            gv_miningUpgrades += 1;
            TriggerEnable(gt_UnlockDurinTheFifth, true);

        }
        else {
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IncreaseMiningUpgrades_Init () {
    gt_IncreaseMiningUpgrades = TriggerCreate("gt_IncreaseMiningUpgrades_Func");
    TriggerEnable(gt_IncreaseMiningUpgrades, false);
    TriggerAddEventUnitResearchProgress(gt_IncreaseMiningUpgrades, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Increase mining upgrades (blue mountains)
//--------------------------------------------------------------------------------------------------
bool gt_Increaseminingupgradesbluemountains_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(221478581)), "BlueMountainsCopper", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(UnitFromId(221478581)), "BlueMountainsGold", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(UnitFromId(221478581)), "BlueMountainsIron", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(UnitFromId(221478581)), "BlueMountainsMithril", c_techCountCompleteOnly) == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_miningUpgrades += 1;
    TriggerEnable(gt_UnlockDurinTheFifth, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Increaseminingupgradesbluemountains_Init () {
    gt_Increaseminingupgradesbluemountains = TriggerCreate("gt_Increaseminingupgradesbluemountains_Func");
    TriggerAddEventUnitResearchProgress(gt_Increaseminingupgradesbluemountains, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Increase mining upgrades (Khaza Dum)
//--------------------------------------------------------------------------------------------------
bool gt_IncreaseminingupgradesKhazaDum_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(221478581)), "KhazaDumCopper", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(UnitFromId(221478581)), "KhazaDumGold", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(UnitFromId(221478581)), "KhazaDumiron", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(UnitFromId(221478581)), "KhazaDumMithril", c_techCountCompleteOnly) == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_miningUpgrades += 1;
    TriggerEnable(gt_UnlockDurinTheFifth, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IncreaseminingupgradesKhazaDum_Init () {
    gt_IncreaseminingupgradesKhazaDum = TriggerCreate("gt_IncreaseminingupgradesKhazaDum_Func");
    TriggerAddEventUnitResearchProgress(gt_IncreaseminingupgradesKhazaDum, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Increase mining upgrades (Erebor)
//--------------------------------------------------------------------------------------------------
bool gt_IncreaseminingupgradesErebor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(221478581)), "EreborCopper", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(UnitFromId(221478581)), "EreborGold", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(UnitFromId(221478581)), "EreborIron", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(UnitFromId(221478581)), "EreborMithril", c_techCountCompleteOnly) == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_miningUpgrades += 1;
    TriggerEnable(gt_UnlockDurinTheFifth, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IncreaseminingupgradesErebor_Init () {
    gt_IncreaseminingupgradesErebor = TriggerCreate("gt_IncreaseminingupgradesErebor_Func");
    TriggerAddEventUnitResearchProgress(gt_IncreaseminingupgradesErebor, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Increase mining upgrades (Iron Hills)
//--------------------------------------------------------------------------------------------------
bool gt_IncreaseminingupgradesIronHills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(221478581)), "IronHillsCopper", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(UnitFromId(221478581)), "IronHillsGold", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(UnitFromId(221478581)), "IronHillsIron", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(UnitFromId(221478581)), "IronHillsMithril", c_techCountCompleteOnly) == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_miningUpgrades += 1;
    TriggerEnable(gt_UnlockDurinTheFifth, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IncreaseminingupgradesIronHills_Init () {
    gt_IncreaseminingupgradesIronHills = TriggerCreate("gt_IncreaseminingupgradesIronHills_Func");
    TriggerAddEventUnitResearchProgress(gt_IncreaseminingupgradesIronHills, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Increase mining upgrades (Buzra dum)
//--------------------------------------------------------------------------------------------------
bool gt_IncreaseminingupgradesBuzradum_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(221478581)), "BuzraDumCopper", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(UnitFromId(221478581)), "BuzraDumGold", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(UnitFromId(221478581)), "BuzraDumIron", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(UnitFromId(221478581)), "BuzraDumMithril", c_techCountCompleteOnly) == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_miningUpgrades += 1;
    TriggerEnable(gt_UnlockDurinTheFifth, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IncreaseminingupgradesBuzradum_Init () {
    gt_IncreaseminingupgradesBuzradum = TriggerCreate("gt_IncreaseminingupgradesBuzradum_Func");
    TriggerAddEventUnitResearchProgress(gt_IncreaseminingupgradesBuzradum, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Increase mining upgrades (Aglarond)
//--------------------------------------------------------------------------------------------------
bool gt_IncreaseminingupgradesAglarond_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(221478581)), "AglarondCopper", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(UnitFromId(221478581)), "AglarondGold", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(UnitFromId(221478581)), "AglarondIron", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(UnitFromId(221478581)), "AglarondMithril", c_techCountCompleteOnly) == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_miningUpgrades += 1;
    TriggerEnable(gt_UnlockDurinTheFifth, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IncreaseminingupgradesAglarond_Init () {
    gt_IncreaseminingupgradesAglarond = TriggerCreate("gt_IncreaseminingupgradesAglarond_Func");
    TriggerAddEventUnitResearchProgress(gt_IncreaseminingupgradesAglarond, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unlock Durin The Fifth
//--------------------------------------------------------------------------------------------------
bool gt_UnlockDurinTheFifth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((AbsI(gv_miningUpgrades) == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(UnitFromId(221478581)), "BlockDurinThefifth", 1);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_IncreaseMiningUpgrades, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnlockDurinTheFifth_Init () {
    gt_UnlockDurinTheFifth = TriggerCreate("gt_UnlockDurinTheFifth_Func");
    TriggerEnable(gt_UnlockDurinTheFifth, false);
    TriggerAddEventUnitResearchProgress(gt_UnlockDurinTheFifth, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Buy Durin The Fifth
//--------------------------------------------------------------------------------------------------
bool gt_BuyDurinTheFifth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(221478581)), "DurinTheFifth", c_techCountCompleteOnly) == 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/64859B28"));
        MinimapPing(GameAttributePlayersForTeam(gv_itemDwarves), PointFromId(486097910), 5.0, Color(0.00, 0.00, 62.75));
        SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HammerSecurity", 0, UnitGetOwner(UnitFromId(221478581)), PointFromId(486097910));
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuyDurinTheFifth_Init () {
    gt_BuyDurinTheFifth = TriggerCreate("gt_BuyDurinTheFifth_Func");
    TriggerAddEventUnitResearchProgress(gt_BuyDurinTheFifth, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Buzra Dum
//--------------------------------------------------------------------------------------------------
bool gt_ActivateBuzraDum_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 5500))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "HammerSecurity") || (UnitGetType(EventUnit()) == "FenixChampion")))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 5500);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PsiDisruptor", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1612283108));
    gv_buzradum = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(336205277));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(279604593));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1364964945));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1656943507));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(786613130));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1311433029));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1056302275));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1160379048));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1153220247));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(728459903));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1120533199));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/4790F2E6"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_buzraDumbeacon);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BuzraDum, true);
    TriggerEnable(gt_BuzraeventIncome, true);
    TriggerEnable(gt_BuzraIncome, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateBuzraDum_Init () {
    gt_ActivateBuzraDum = TriggerCreate("gt_ActivateBuzraDum_Func");
    TriggerAddEventUnitBehaviorChange(gt_ActivateBuzraDum, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Buzra Dum
//--------------------------------------------------------------------------------------------------
bool gt_BuzraDum_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(gv_buzradum) == true) && (PlayerGetPropertyInt(UnitGetOwner(gv_buzradum), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(gv_buzradum), c_playerPropSuppliesMade)) && (UnitGetOwner(gv_buzradum) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(gv_buzradum), "BuzraDumUpgradespawn4", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marauder", 0, UnitGetOwner(gv_buzradum), PointFromId(1202814470));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Firebat", 0, UnitGetOwner(gv_buzradum), PointFromId(1202814470));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ImmortalShakuras", 0, UnitGetOwner(gv_buzradum), PointFromId(1202814470));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "VikingAssault", 0, UnitGetOwner(gv_buzradum), PointFromId(1202814470));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "HellionTank", 0, UnitGetOwner(gv_buzradum), PointFromId(1202814470));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(gv_buzradum), "BuzraDumUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marauder", 0, UnitGetOwner(gv_buzradum), PointFromId(1202814470));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Firebat", 0, UnitGetOwner(gv_buzradum), PointFromId(1202814470));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "VikingAssault", 0, UnitGetOwner(gv_buzradum), PointFromId(1202814470));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "HellionTank", 0, UnitGetOwner(gv_buzradum), PointFromId(1202814470));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(gv_buzradum), "SearchForTheRelicsOfBuzraDum", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "HellionTank", 0, UnitGetOwner(gv_buzradum), PointFromId(1202814470));
                }

                if ((TechTreeUpgradeCount(UnitGetOwner(gv_buzradum), "BuzraDumUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marauder", 0, UnitGetOwner(gv_buzradum), PointFromId(1202814470));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Firebat", 0, UnitGetOwner(gv_buzradum), PointFromId(1202814470));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HellionTank", 0, UnitGetOwner(gv_buzradum), PointFromId(1202814470));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(gv_buzradum), "BuzraDumUpgradespawn", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marauder", 0, UnitGetOwner(gv_buzradum), PointFromId(1202814470));
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Firebat", 0, UnitGetOwner(gv_buzradum), PointFromId(1202814470));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(gv_buzradum), "BuzraDumUpgradespawn", c_techCountCompleteOnly) == 0)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marauder", 0, UnitGetOwner(gv_buzradum), PointFromId(1202814470));
                        }

                    }
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuzraDum_Init () {
    gt_BuzraDum = TriggerCreate("gt_BuzraDum_Func");
    TriggerEnable(gt_BuzraDum, false);
    TriggerAddEventTimePeriodic(gt_BuzraDum, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Buzra event Income
//--------------------------------------------------------------------------------------------------
bool gt_BuzraeventIncome_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(gv_buzradum) == true) && (PlayerGetPropertyInt(UnitGetOwner(gv_buzradum), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(gv_buzradum), c_playerPropSuppliesMade)) && (UnitGetOwner(gv_buzradum) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(gv_buzradum), "SearchForTheRelicsOfBuzraDum", c_techCountCompleteOnly) == 1)) {
            PlayerModifyPropertyInt(UnitGetOwner(gv_buzradum), c_playerPropMinerals, c_playerPropOperAdd, 200);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuzraeventIncome_Init () {
    gt_BuzraeventIncome = TriggerCreate("gt_BuzraeventIncome_Func");
    TriggerEnable(gt_BuzraeventIncome, false);
    TriggerAddEventTimePeriodic(gt_BuzraeventIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Buzra Income
//--------------------------------------------------------------------------------------------------
bool gt_BuzraIncome_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(gv_buzradum) == true) && (PlayerGetPropertyInt(UnitGetOwner(gv_buzradum), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(gv_buzradum), c_playerPropSuppliesMade)) && (UnitGetOwner(gv_buzradum) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(gv_buzradum), "BuzraDumGold", c_techCountCompleteOnly) == 1)) {
            PlayerModifyPropertyInt(UnitGetOwner(gv_buzradum), c_playerPropMinerals, c_playerPropOperAdd, 100);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuzraIncome_Init () {
    gt_BuzraIncome = TriggerCreate("gt_BuzraIncome_Func");
    TriggerEnable(gt_BuzraIncome, false);
    TriggerAddEventTimePeriodic(gt_BuzraIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: House Of Healing
//--------------------------------------------------------------------------------------------------
bool gt_HouseOfHealing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_minasAnor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minasAnor = UnitFromId(1325808467);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_minasAnor), "HouseOfHealing", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!((EventPlayer() == UnitGetOwner(lv_minasAnor)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Medic", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(2143786838));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/4F5BC4C0"));
    gv_houseOfHealing = UnitLastCreated();
    TriggerEnable(gt_HouseOfHealingdestroy, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HouseOfHealing_Init () {
    gt_HouseOfHealing = TriggerCreate("gt_HouseOfHealing_Func");
    TriggerAddEventUnitResearchProgress(gt_HouseOfHealing, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: House Of Healing destroy
//--------------------------------------------------------------------------------------------------
bool gt_HouseOfHealingdestroy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_minasAnor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minasAnor = UnitFromId(1325808467);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_minasAnor), "HouseOfHealing", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(1325808467)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(gv_houseOfHealing);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/FA6B5E9E"));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HouseOfHealingdestroy_Init () {
    gt_HouseOfHealingdestroy = TriggerCreate("gt_HouseOfHealingdestroy_Func");
    TriggerEnable(gt_HouseOfHealingdestroy, false);
    TriggerAddEventUnitDied(gt_HouseOfHealingdestroy, UnitRefFromUnit(UnitFromId(1325808467)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Genevive
//--------------------------------------------------------------------------------------------------
bool gt_Genevive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_minasAnor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minasAnor = UnitFromId(1325808467);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_minasAnor), "Genevive", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_minasAnor))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "UmojanLabMicrobot", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1956332581));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/40AE7E50"));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Genevive_Init () {
    gt_Genevive = TriggerCreate("gt_Genevive_Func");
    TriggerAddEventUnitResearchProgress(gt_Genevive, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Marquil (Gladden)
//--------------------------------------------------------------------------------------------------
bool gt_MarquilGladden_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_gladdenCamp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_gladdenCamp = gv_gladdenCamp;

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_gladdenCamp), "MarquilLeaderOfTheNorthmen", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_gladdenCamp))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "VultureDOMParked", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1020621117));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/47954641"));
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_MarquilFreePeople, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarquilGladden_Init () {
    gt_MarquilGladden = TriggerCreate("gt_MarquilGladden_Func");
    TriggerAddEventUnitResearchProgress(gt_MarquilGladden, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Marquil (Free People)
//--------------------------------------------------------------------------------------------------
bool gt_MarquilFreePeople_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_freepeople;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_freepeople = UnitFromId(2112326322);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_freepeople), "MarquilLeaderOfTheNorthmen", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_freepeople))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "VultureDOMParked", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(419586109));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/9EE9E563"));
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_MarquilGladden, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarquilFreePeople_Init () {
    gt_MarquilFreePeople = TriggerCreate("gt_MarquilFreePeople_Func");
    TriggerAddEventUnitResearchProgress(gt_MarquilFreePeople, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fight For Dorwinion
//--------------------------------------------------------------------------------------------------
bool gt_FightForDorwinion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(2112326322)), "FightForDorwinion", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(UnitFromId(2112326322)))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1029575783));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1311141558));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1980925753));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1977376202));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1041389169));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(596728263));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/DFE1AAC3"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    gv_fightForDorwinionBool = true;
    TriggerExecute(gt_SpawnDorwinion, true, false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FightForDorwinion_Init () {
    gt_FightForDorwinion = TriggerCreate("gt_FightForDorwinion_Func");
    TriggerAddEventUnitResearchProgress(gt_FightForDorwinion, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Dorwinion
//--------------------------------------------------------------------------------------------------
bool gt_SpawnDorwinion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(2112326322)) == true) && (UnitIsAlive(UnitFromId(1164482133)) == false) && (TechTreeUpgradeCount(UnitGetOwner(UnitFromId(2112326322)), "FightForDorwinion", c_techCountCompleteOnly) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FreeDorwinion", 0, 0, PointFromId(1752861150));
        gv_dorwinionBeacon = UnitLastCreated();
        TriggerEnable(gt_ActivateDorwinion, true);
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnDorwinion_Init () {
    gt_SpawnDorwinion = TriggerCreate("gt_SpawnDorwinion_Func");
    TriggerAddEventUnitDied(gt_SpawnDorwinion, UnitRefFromUnit(UnitFromId(1164482133)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Dorwinion
//--------------------------------------------------------------------------------------------------
bool gt_ActivateDorwinion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1EA4D227_g;
    int auto1EA4D227_u;
    unit auto1EA4D227_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 3000))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "VultureDOMParked")))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(38)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 3000);
    auto1EA4D227_g = gv_clearDorwinion;
    auto1EA4D227_u = UnitGroupCount(auto1EA4D227_g, c_unitCountAll);
    for (;; auto1EA4D227_u -= 1) {
        auto1EA4D227_var = UnitGroupUnitFromEnd(auto1EA4D227_g, auto1EA4D227_u);
        if (auto1EA4D227_var == null) { break; }
        UnitKill(auto1EA4D227_var);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DorwinionGood", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1666893497));
    gv_goodDorwinion = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1797558182));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(555813446));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(825828377));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1328743916));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1261223319));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1088301667));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1706597978));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(631950509));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1942953342));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(813018909));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(2030251466));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1699195628));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/50FC14E9"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_dorwinionBeacon);
    TriggerEnable(gt_GoodDorwinion, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateDorwinion_Init () {
    gt_ActivateDorwinion = TriggerCreate("gt_ActivateDorwinion_Func");
    TriggerEnable(gt_ActivateDorwinion, false);
    TriggerAddEventUnitBehaviorChange(gt_ActivateDorwinion, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Good Dorwinion
//--------------------------------------------------------------------------------------------------
bool gt_GoodDorwinion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawner;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawner = gv_goodDorwinion;
    lv_point = PointFromId(687000527);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_spawner) == true))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesMade)))) {
            return false;
        }

        if (!((UnitGetOwner(lv_spawner) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    gf_Createunit(2, "Vulture", lv_spawner, lv_point);
    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "DorwinionGoodUpgradespawn22", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "Marine", lv_spawner, lv_point);
        gf_Createunit(2, "Vulture", lv_spawner, lv_point);
        gf_Createunit(1, "Reaper", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "DorwinionGoodUpgradespawn2", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "Marine", lv_spawner, lv_point);
        gf_Createunit(1, "Vulture", lv_spawner, lv_point);
        gf_Createunit(1, "Ghost", lv_spawner, lv_point);
        gf_Createunit(1, "Reaper", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "DorwinionGoodUpgradespawn", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "Marine", lv_spawner, lv_point);
        gf_Createunit(1, "Ghost", lv_spawner, lv_point);
        gf_Createunit(1, "Reaper", lv_spawner, lv_point);
        gf_Createunit(1, "DarkTemplar", lv_spawner, lv_point);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GoodDorwinion_Init () {
    gt_GoodDorwinion = TriggerCreate("gt_GoodDorwinion_Func");
    TriggerEnable(gt_GoodDorwinion, false);
    TriggerAddEventTimePeriodic(gt_GoodDorwinion, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fortify River
//--------------------------------------------------------------------------------------------------
bool gt_FortifyRiver_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_osgiliath;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_osgiliath = UnitFromId(1897128707);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_osgiliath), "FortifyTheRiverOfAnduin", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_osgiliath))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1568346367));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(225068753));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1593838205));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(478545775));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1490024927));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1363043798));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1129826549));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1917286972));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1676607226));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1767131157));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1820154724));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(43716345));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/40B24B0E"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FortifyRiver_Init () {
    gt_FortifyRiver = TriggerCreate("gt_FortifyRiver_Func");
    TriggerAddEventUnitResearchProgress(gt_FortifyRiver, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Anorien
//--------------------------------------------------------------------------------------------------
bool gt_ActivateAnorien_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 4000))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "HERC") || ((UnitGetType(EventUnit()) == "TychusCommando"))))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(37)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 4000);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AssimilatorRich", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(306798632));
    gv_anorien = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1764445773));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1234187562));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1901718649));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(29744036));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(2050375321));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(653940621));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1088985090));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(743680695));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(226379121));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1409344852));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(415819310));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(17308752));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(939219315));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1722756151));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/8FC0D2E8"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_anorienBeacon);
    TriggerEnable(gt_Anorien, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateAnorien_Init () {
    gt_ActivateAnorien = TriggerCreate("gt_ActivateAnorien_Func");
    TriggerAddEventUnitBehaviorChange(gt_ActivateAnorien, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Anorien
//--------------------------------------------------------------------------------------------------
bool gt_Anorien_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawner;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawner = gv_anorien;
    lv_point = PointFromId(1408660112);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_spawner) == true))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesMade)))) {
            return false;
        }

        if (!((UnitGetOwner(lv_spawner) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    gf_Createunit(2, "Spectre", lv_spawner, lv_point);
    gf_Createunit(1, "Zealot", lv_spawner, lv_point);
    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "AnorienUpgradespawn3", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(2, "Spectre", lv_spawner, lv_point);
        gf_Createunit(1, "Vulture", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "AnorienUpgradespawn2", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(2, "Spectre", lv_spawner, lv_point);
        gf_Createunit(1, "Vulture", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "AnorienUpgradespawn", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(2, "Spectre", lv_spawner, lv_point);
        gf_Createunit(1, "Zealot", lv_spawner, lv_point);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Anorien_Init () {
    gt_Anorien = TriggerCreate("gt_Anorien_Func");
    TriggerEnable(gt_Anorien, false);
    TriggerAddEventTimePeriodic(gt_Anorien, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gladden Migrate
//--------------------------------------------------------------------------------------------------
bool gt_GladdenMigrate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(2112326322)), "MigrateFromDorwinion", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(UnitFromId(2112326322)))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(UnitFromId(2112326322));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "GladdenCamp", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1550814034));
    gv_gladdenCamp = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1078019366));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(751439349));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1032180935));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(979006796));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1687597025));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(525139167));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(549829741));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(132767024));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1390810443));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1412195314));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(143712747));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1433954577));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/70CFD4A1"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    TriggerEnable(gt_GladdenCamp, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GladdenMigrate_Init () {
    gt_GladdenMigrate = TriggerCreate("gt_GladdenMigrate_Func");
    TriggerAddEventUnitResearchProgress(gt_GladdenMigrate, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gladden Camp
//--------------------------------------------------------------------------------------------------
bool gt_GladdenCamp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(gv_gladdenCamp) == true) && (PlayerGetPropertyInt(UnitGetOwner(gv_gladdenCamp), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(gv_gladdenCamp), c_playerPropSuppliesMade)) && (UnitGetOwner(gv_gladdenCamp) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(gv_gladdenCamp), "GladdenCampUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(gv_gladdenCamp), PointFromId(1020621117));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Marine", 0, UnitGetOwner(gv_gladdenCamp), PointFromId(1020621117));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Vulture", 0, UnitGetOwner(gv_gladdenCamp), PointFromId(1020621117));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(gv_gladdenCamp), "GladdenCampUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(gv_gladdenCamp), PointFromId(1020621117));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(gv_gladdenCamp), PointFromId(1020621117));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Vulture", 0, UnitGetOwner(gv_gladdenCamp), PointFromId(1020621117));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(gv_gladdenCamp), "GladdenCampUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(gv_gladdenCamp), PointFromId(1020621117));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Vulture", 0, UnitGetOwner(gv_gladdenCamp), PointFromId(1020621117));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(gv_gladdenCamp), "GladdenCampUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Vulture", 0, UnitGetOwner(gv_gladdenCamp), PointFromId(1020621117));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GladdenCamp_Init () {
    gt_GladdenCamp = TriggerCreate("gt_GladdenCamp_Func");
    TriggerEnable(gt_GladdenCamp, false);
    TriggerAddEventTimePeriodic(gt_GladdenCamp, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Tolfalas
//--------------------------------------------------------------------------------------------------
bool gt_ActivateTolfalas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 5000))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "HERC") || ((UnitGetType(EventUnit()) == "RaynorCommando"))))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(6)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 5000);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Obelisk", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(775545040));
    gv_tolfalas = UnitLastCreated();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/07994E8F"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_tolfalasBeacon);
    TriggerEnable(gt_Tolfalas, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateTolfalas_Init () {
    gt_ActivateTolfalas = TriggerCreate("gt_ActivateTolfalas_Func");
    TriggerAddEventUnitBehaviorChange(gt_ActivateTolfalas, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tolfalas
//--------------------------------------------------------------------------------------------------
bool gt_Tolfalas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(gv_tolfalas) == true) && (PlayerGetPropertyInt(UnitGetOwner(gv_tolfalas), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(gv_tolfalas), c_playerPropSuppliesMade)) && (UnitGetOwner(gv_tolfalas) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(gv_tolfalas), "TolfalasUpgradespawn2", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Wraith", 0, UnitGetOwner(gv_tolfalas), PointFromId(1891670312));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryAiur", 0, UnitGetOwner(gv_tolfalas), PointFromId(1891670312));
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "Marine", 0, UnitGetOwner(gv_tolfalas), PointFromId(1891670312));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(gv_tolfalas), "TolfalasUpgradespawn", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(5, "Marine", 0, UnitGetOwner(gv_tolfalas), PointFromId(1891670312));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(gv_tolfalas), "TolfalasUpgradespawn", c_techCountCompleteOnly) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(gv_tolfalas), PointFromId(1891670312));
                }

            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Tolfalas_Init () {
    gt_Tolfalas = TriggerCreate("gt_Tolfalas_Func");
    TriggerEnable(gt_Tolfalas, false);
    TriggerAddEventTimePeriodic(gt_Tolfalas, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Galadriel
//--------------------------------------------------------------------------------------------------
bool gt_Galadriel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lothorien;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lothorien = UnitFromId(2050115423);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_lothorien), "Galadriel", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_lothorien))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganGhostLabUnarmed", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(283882455));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/622E9AC9"));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Galadriel_Init () {
    gt_Galadriel = TriggerCreate("gt_Galadriel_Func");
    TriggerAddEventUnitResearchProgress(gt_Galadriel, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dwarven Friendship Income
//--------------------------------------------------------------------------------------------------
bool gt_DwarvenFriendshipIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_greenwood;
    unit lv_erebor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_greenwood = UnitFromId(677747402);
    lv_erebor = UnitFromId(1045690131);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1577456443)), "DwarvenFriendship", c_techCountCompleteOnly) == 1)) {
        if ((UnitIsAlive(lv_greenwood) == true)) {
            PlayerModifyPropertyInt(UnitGetOwner(lv_greenwood), c_playerPropMinerals, c_playerPropOperAdd, 75);
        }

        if ((UnitIsAlive(lv_erebor) == true)) {
            PlayerModifyPropertyInt(UnitGetOwner(lv_erebor), c_playerPropMinerals, c_playerPropOperAdd, 75);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DwarvenFriendshipIncome_Init () {
    gt_DwarvenFriendshipIncome = TriggerCreate("gt_DwarvenFriendshipIncome_Func");
    TriggerAddEventTimePeriodic(gt_DwarvenFriendshipIncome, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Conceal
//--------------------------------------------------------------------------------------------------
bool gt_Conceal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_greenwood;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_greenwood = UnitFromId(677747402);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_greenwood), "ConcealTheHalls", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_greenwood))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(UnitFromId(14086565), "PermanentlyCloaked", UnitFromId(1577456443), 1);
    UnitBehaviorAdd(UnitFromId(14086565), "Invulnerable", UnitFromId(1577456443), 1);
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/4B3259E7"));
    TriggerEnable(gt_GreenwoodDestroyed, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Conceal_Init () {
    gt_Conceal = TriggerCreate("gt_Conceal_Func");
    TriggerAddEventUnitResearchProgress(gt_Conceal, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Greenwood Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_GreenwoodDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(UnitFromId(14086565), "Invulnerable", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GreenwoodDestroyed_Init () {
    gt_GreenwoodDestroyed = TriggerCreate("gt_GreenwoodDestroyed_Func");
    TriggerEnable(gt_GreenwoodDestroyed, false);
    TriggerAddEventUnitDied(gt_GreenwoodDestroyed, UnitRefFromUnit(UnitFromId(677747402)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thranduil
//--------------------------------------------------------------------------------------------------
bool gt_Thranduil_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_greenwood;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_greenwood = UnitFromId(677747402);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_greenwood), "Thranduil", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!((EventPlayer() == UnitGetOwner(lv_greenwood)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Selendis", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(927171715));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    if ((UnitIsAlive(UnitFromId(1432086961)) == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/62E64EC7"));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E11251CA"));
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Thranduil_Init () {
    gt_Thranduil = TriggerCreate("gt_Thranduil_Func");
    TriggerAddEventUnitResearchProgress(gt_Thranduil, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Field Of Silverlode
//--------------------------------------------------------------------------------------------------
bool gt_ActivateFieldOfSilverlode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 3000))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "KaraxChampion") || ((UnitGetType(EventUnit()) == "Talis"))))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(58)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 3000);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FieldOfSilverlode2", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1624744834));
    gv_fieldOfSilverlode = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(2104205232));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1953033544));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(161688755));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(969584430));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1220715689));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1515281506));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1775202815));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(776660452));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1994807427));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/3CB6C357"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_fieldOfSilverlodeBeacon);
    TriggerEnable(gt_FieldOfSilverlode, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateFieldOfSilverlode_Init () {
    gt_ActivateFieldOfSilverlode = TriggerCreate("gt_ActivateFieldOfSilverlode_Func");
    TriggerAddEventUnitBehaviorChange(gt_ActivateFieldOfSilverlode, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Field Of Silverlode
//--------------------------------------------------------------------------------------------------
bool gt_FieldOfSilverlode_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawner;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawner = gv_fieldOfSilverlode;
    lv_point = PointFromId(2143039288);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_spawner) == true))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesMade)))) {
            return false;
        }

        if (!((UnitGetOwner(lv_spawner) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    gf_Createunit(1, "Ghost", lv_spawner, lv_point);
    gf_Createunit(2, "DarkTemplar", lv_spawner, lv_point);
    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "SilverlodeUpgradespawn3", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "ZealotPurifier", lv_spawner, lv_point);
        gf_Createunit(1, "Ghost", lv_spawner, lv_point);
        gf_Createunit(1, "DarkTemplar", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "SilverlodeUpgradespawn2", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "Ghost", lv_spawner, lv_point);
        gf_Createunit(2, "DarkTemplar", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "SilverlodeUpgradespawn", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "Ghost", lv_spawner, lv_point);
        gf_Createunit(2, "DarkTemplar", lv_spawner, lv_point);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FieldOfSilverlode_Init () {
    gt_FieldOfSilverlode = TriggerCreate("gt_FieldOfSilverlode_Func");
    TriggerEnable(gt_FieldOfSilverlode, false);
    TriggerAddEventTimePeriodic(gt_FieldOfSilverlode, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Rhosgobel
//--------------------------------------------------------------------------------------------------
bool gt_ActivateRhosgobel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 6500))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "KaraxChampion") || ((UnitGetType(EventUnit()) == "Urun")) || ((UnitGetType(EventUnit()) == "Talis"))))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(24)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 6500);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedFactory", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(946822445));
    gv_rhosgobel = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1566537432));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(674948076));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(758751994));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1638108897));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(387559619));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(128822700));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(443975038));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1871020446));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1772491821));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1843467340));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1534038185));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1442456470));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/EA475FC2"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_rhosgobelBeacon);
    TriggerEnable(gt_Rhosgobel, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateRhosgobel_Init () {
    gt_ActivateRhosgobel = TriggerCreate("gt_ActivateRhosgobel_Func");
    TriggerAddEventUnitBehaviorChange(gt_ActivateRhosgobel, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rhosgobel
//--------------------------------------------------------------------------------------------------
bool gt_Rhosgobel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_rhosgobel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rhosgobel = gv_rhosgobel;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_rhosgobel) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_rhosgobel), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_rhosgobel), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_rhosgobel) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_rhosgobel), "RhosgobelUpgradespawn4", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Immortal", 0, UnitGetOwner(lv_rhosgobel), PointFromId(496404607));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Reaper", 0, UnitGetOwner(lv_rhosgobel), PointFromId(496404607));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "DarkTemplar", 0, UnitGetOwner(lv_rhosgobel), PointFromId(496404607));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marine", 0, UnitGetOwner(lv_rhosgobel), PointFromId(496404607));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_rhosgobel), PointFromId(496404607));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Vulture", 0, UnitGetOwner(lv_rhosgobel), PointFromId(496404607));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_rhosgobel), "RhosgobelUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Reaper", 0, UnitGetOwner(lv_rhosgobel), PointFromId(496404607));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "DarkTemplar", 0, UnitGetOwner(lv_rhosgobel), PointFromId(496404607));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marine", 0, UnitGetOwner(lv_rhosgobel), PointFromId(496404607));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_rhosgobel), PointFromId(496404607));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Vulture", 0, UnitGetOwner(lv_rhosgobel), PointFromId(496404607));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_rhosgobel), "RhosgobelUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Reaper", 0, UnitGetOwner(lv_rhosgobel), PointFromId(496404607));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "DarkTemplar", 0, UnitGetOwner(lv_rhosgobel), PointFromId(496404607));
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marine", 0, UnitGetOwner(lv_rhosgobel), PointFromId(496404607));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(lv_rhosgobel), PointFromId(496404607));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_rhosgobel), "RhosgobelUpgradespawn", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Reaper", 0, UnitGetOwner(lv_rhosgobel), PointFromId(496404607));
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "DarkTemplar", 0, UnitGetOwner(lv_rhosgobel), PointFromId(496404607));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_rhosgobel), PointFromId(496404607));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(lv_rhosgobel), "RhosgobelUpgradespawn", c_techCountCompleteOnly) == 0)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Reaper", 0, UnitGetOwner(lv_rhosgobel), PointFromId(496404607));
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DarkTemplar", 0, UnitGetOwner(lv_rhosgobel), PointFromId(496404607));
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(lv_rhosgobel), PointFromId(496404607));
                        }

                    }
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Rhosgobel_Init () {
    gt_Rhosgobel = TriggerCreate("gt_Rhosgobel_Func");
    TriggerEnable(gt_Rhosgobel, false);
    TriggerAddEventTimePeriodic(gt_Rhosgobel, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Field Of Celebrandt
//--------------------------------------------------------------------------------------------------
bool gt_ActivateFieldOfCelebrandt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 3000))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "KaraxChampion") || ((UnitGetType(EventUnit()) == "Talis"))))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(23)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 3000);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FieldOfCelebrandt", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(883474048));
    gv_fieldOfCelebrandt = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(393178673));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(655690527));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(487587101));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(857505247));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1215253501));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(101970062));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1101341157));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(612936738));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(597114414));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/872DB0DA"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_fieldOfCelenbrandtBeacon);
    TriggerEnable(gt_FieldOfCelebrandt, true);
    TriggerEnable(gt_Orophin, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateFieldOfCelebrandt_Init () {
    gt_ActivateFieldOfCelebrandt = TriggerCreate("gt_ActivateFieldOfCelebrandt_Func");
    TriggerAddEventUnitBehaviorChange(gt_ActivateFieldOfCelebrandt, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Field Of Celebrandt
//--------------------------------------------------------------------------------------------------
bool gt_FieldOfCelebrandt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_fieldOfCelebrandt;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fieldOfCelebrandt = gv_fieldOfCelebrandt;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_fieldOfCelebrandt) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_fieldOfCelebrandt), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_fieldOfCelebrandt), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_fieldOfCelebrandt) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_fieldOfCelebrandt), "CelebrandtUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Adept", 0, UnitGetOwner(lv_fieldOfCelebrandt), PointFromId(910660977));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "DarkTemplar", 0, UnitGetOwner(lv_fieldOfCelebrandt), PointFromId(910660977));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Ghost", 0, UnitGetOwner(lv_fieldOfCelebrandt), PointFromId(910660977));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_fieldOfCelebrandt), "CelebrandtUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Adept", 0, UnitGetOwner(lv_fieldOfCelebrandt), PointFromId(910660977));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "DarkTemplar", 0, UnitGetOwner(lv_fieldOfCelebrandt), PointFromId(910660977));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Ghost", 0, UnitGetOwner(lv_fieldOfCelebrandt), PointFromId(910660977));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_fieldOfCelebrandt), "CelebrandtUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Adept", 0, UnitGetOwner(lv_fieldOfCelebrandt), PointFromId(910660977));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DarkTemplar", 0, UnitGetOwner(lv_fieldOfCelebrandt), PointFromId(910660977));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Ghost", 0, UnitGetOwner(lv_fieldOfCelebrandt), PointFromId(910660977));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_fieldOfCelebrandt), "CelebrandtUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DarkTemplar", 0, UnitGetOwner(lv_fieldOfCelebrandt), PointFromId(910660977));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ghost", 0, UnitGetOwner(lv_fieldOfCelebrandt), PointFromId(910660977));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FieldOfCelebrandt_Init () {
    gt_FieldOfCelebrandt = TriggerCreate("gt_FieldOfCelebrandt_Func");
    TriggerEnable(gt_FieldOfCelebrandt, false);
    TriggerAddEventTimePeriodic(gt_FieldOfCelebrandt, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orophin
//--------------------------------------------------------------------------------------------------
bool gt_Orophin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_celebrandt;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_celebrandt = gv_fieldOfCelebrandt;

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_celebrandt), "Orophin", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_celebrandt))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MengskReaper", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(910660977));
    gv_orophin = UnitLastCreated();
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6B584D68"));
    TriggerEnable(gt_OrophinDeath, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Orophin_Init () {
    gt_Orophin = TriggerCreate("gt_Orophin_Func");
    TriggerEnable(gt_Orophin, false);
    TriggerAddEventUnitResearchProgress(gt_Orophin, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fimbreithil
//--------------------------------------------------------------------------------------------------
bool gt_Fimbreithil_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_gardenOfEntwives;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_gardenOfEntwives = UnitFromId(1824510748);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_gardenOfEntwives), "Fimbretihil", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!((EventPlayer() == UnitGetOwner(lv_gardenOfEntwives)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ColossusPurifier", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1962911935));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/32BF37AA"));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Fimbreithil_Init () {
    gt_Fimbreithil = TriggerCreate("gt_Fimbreithil_Func");
    TriggerAddEventUnitResearchProgress(gt_Fimbreithil, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Forlond
//--------------------------------------------------------------------------------------------------
bool gt_SpawnForlond_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(502699174)), "InspireTheElvesOfHarlond", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Terran222", 0, 0, PointFromId(1337030305));
    gv_forlondbeacon = UnitLastCreated();
    TriggerEnable(gt_ActivateForlond, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnForlond_Init () {
    gt_SpawnForlond = TriggerCreate("gt_SpawnForlond_Func");
    TriggerAddEventUnitResearchProgress(gt_SpawnForlond, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Forlond
//--------------------------------------------------------------------------------------------------
bool gt_ActivateForlond_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 4500))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Zeratul")))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(7)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 4500);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoboticsFacilityWarp", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1337030305));
    gv_forlond = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(579293390));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(352713101));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1835233122));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1449339576));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1772770375));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1492625376));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/98965539"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_forlondbeacon);
    TriggerEnable(gt_Forlond, true);
    TriggerEnable(gt_ColationHasFormed, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateForlond_Init () {
    gt_ActivateForlond = TriggerCreate("gt_ActivateForlond_Func");
    TriggerEnable(gt_ActivateForlond, false);
    TriggerAddEventUnitBehaviorChange(gt_ActivateForlond, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Forlond
//--------------------------------------------------------------------------------------------------
bool gt_Forlond_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(gv_forlond) == true) && (PlayerGetPropertyInt(UnitGetOwner(gv_forlond), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(gv_forlond), c_playerPropSuppliesMade)) && (UnitGetOwner(gv_forlond) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(gv_forlond), "ForlondUpgradeSpawn2", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "NoldorArcher", 0, UnitGetOwner(gv_forlond), PointFromId(1983257430));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Stalker", 0, UnitGetOwner(gv_forlond), PointFromId(1983257430));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "NoldorWarrior", 0, UnitGetOwner(gv_forlond), PointFromId(1983257430));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(gv_forlond), "ForlondUpgradeSpawn", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Stalker", 0, UnitGetOwner(gv_forlond), PointFromId(1983257430));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "NoldorWarrior", 0, UnitGetOwner(gv_forlond), PointFromId(1983257430));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(gv_forlond), "ForlondUpgradeSpawn", c_techCountCompleteOnly) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Stalker", 0, UnitGetOwner(gv_forlond), PointFromId(1983257430));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NoldorWarrior", 0, UnitGetOwner(gv_forlond), PointFromId(1983257430));
                }

            }
        }
        if ((TechTreeUpgradeCount(UnitGetOwner(gv_forlond), "FormAColation", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NoldorWarrior", 0, UnitGetOwner(gv_forlond), PointFromId(1983257430));
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Forlond_Init () {
    gt_Forlond = TriggerCreate("gt_Forlond_Func");
    TriggerEnable(gt_Forlond, false);
    TriggerAddEventTimePeriodic(gt_Forlond, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Colation Has Formed
//--------------------------------------------------------------------------------------------------
bool gt_ColationHasFormed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(gv_forlond), "FormAColation", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/2D6C92DA"));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColationHasFormed_Init () {
    gt_ColationHasFormed = TriggerCreate("gt_ColationHasFormed_Func");
    TriggerEnable(gt_ColationHasFormed, false);
    TriggerAddEventUnitResearchProgress(gt_ColationHasFormed, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cirdan
//--------------------------------------------------------------------------------------------------
bool gt_Cirdan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mithlond;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mithlond = UnitFromId(649935218);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_mithlond), "Cirdan", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_mithlond))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tassadar", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1983257430));
    gv_cirdan = UnitLastCreated();
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/03736A48"));
    TriggerEnable(gt_CirdanDeath, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Cirdan_Init () {
    gt_Cirdan = TriggerCreate("gt_Cirdan_Func");
    TriggerAddEventUnitResearchProgress(gt_Cirdan, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crown's bounty
//--------------------------------------------------------------------------------------------------
bool gt_Crownsbounty_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUpgrade() == "Crownsbounty"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(UnitFromId(439325741)), c_playerPropMinerals, c_playerPropOperAdd, 750);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Crownsbounty_Init () {
    gt_Crownsbounty = TriggerCreate("gt_Crownsbounty_Func");
    TriggerEnable(gt_Crownsbounty, false);
    TriggerAddEventUnitResearchProgress(gt_Crownsbounty, UnitRefFromUnit(UnitFromId(439325741)), c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Noble's accord
//--------------------------------------------------------------------------------------------------
bool gt_Noblesaccord_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto49FE03FE_g;
    int auto49FE03FE_u;
    unit auto49FE03FE_var;
    unitgroup auto5F78ABCE_g;
    int auto5F78ABCE_u;
    unit auto5F78ABCE_var;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUpgrade() == "NobleAccord"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto49FE03FE_g = UnitGroup(null, gv_itemArnor, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto49FE03FE_u = UnitGroupCount(auto49FE03FE_g, c_unitCountAll);
    for (;; auto49FE03FE_u -= 1) {
        auto49FE03FE_var = UnitGroupUnitFromEnd(auto49FE03FE_g, auto49FE03FE_u);
        if (auto49FE03FE_var == null) { break; }
        UnitGroupAdd(gv_arnorPlayer, auto49FE03FE_var);
    }
    Wait(0.1, c_timeGame);
    auto5F78ABCE_g = UnitGroup(null, gv_itemArnor, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5F78ABCE_u = UnitGroupCount(auto5F78ABCE_g, c_unitCountAll);
    for (;; auto5F78ABCE_u -= 1) {
        auto5F78ABCE_var = UnitGroupUnitFromEnd(auto5F78ABCE_g, auto5F78ABCE_u);
        if (auto5F78ABCE_var == null) { break; }
        UnitBehaviorAdd(auto5F78ABCE_var, "NobleAccord", UnitFromId(856187551), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Noblesaccord_Init () {
    gt_Noblesaccord = TriggerCreate("gt_Noblesaccord_Func");
    TriggerEnable(gt_Noblesaccord, false);
    TriggerAddEventUnitResearchProgress(gt_Noblesaccord, UnitRefFromUnit(UnitFromId(439325741)), c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Call Upon The Fief
//--------------------------------------------------------------------------------------------------
bool gt_CallUponTheFief_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUpgrade() == "CallUponTheFief"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(10, "Marine", 0, UnitGetOwner(UnitFromId(439325741)), PointFromId(1102867604));
    libNtve_gf_CreateUnitsWithDefaultFacing(10, "Zealot", 0, UnitGetOwner(UnitFromId(439325741)), PointFromId(1102867604));
    libNtve_gf_CreateUnitsWithDefaultFacing(5, "Vulture", 0, UnitGetOwner(UnitFromId(439325741)), PointFromId(1102867604));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CallUponTheFief_Init () {
    gt_CallUponTheFief = TriggerCreate("gt_CallUponTheFief_Func");
    TriggerEnable(gt_CallUponTheFief, false);
    TriggerAddEventUnitResearchProgress(gt_CallUponTheFief, UnitRefFromUnit(UnitFromId(439325741)), c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disperse
//--------------------------------------------------------------------------------------------------
bool gt_Disperse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(439325741)), "DispersePower", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!((gv_disperseDone == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_disperseDone = true;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/7CE239BB"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    TriggerEnable(gt_Crownsbounty, true);
    TriggerEnable(gt_Noblesaccord, true);
    TriggerEnable(gt_CallUponTheFief, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Disperse_Init () {
    gt_Disperse = TriggerCreate("gt_Disperse_Func");
    TriggerEnable(gt_Disperse, false);
    TriggerAddEventUnitResearchProgress(gt_Disperse, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unlock Disperse
//--------------------------------------------------------------------------------------------------
bool gt_UnlockDisperse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_annuminas;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_annuminas = UnitFromId(439325741);

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(lv_annuminas) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((AbsI(gv_fortifyUpgrades) >= 3)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(lv_annuminas), "Fortify3OuterHoldings", 1);
        TriggerEnable(gt_Disperse, true);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnlockDisperse_Init () {
    gt_UnlockDisperse = TriggerCreate("gt_UnlockDisperse_Func");
    TriggerEnable(gt_UnlockDisperse, false);
    TriggerAddEventUnitResearchProgress(gt_UnlockDisperse, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Eldacar (disperse)
//--------------------------------------------------------------------------------------------------
bool gt_Eldacardisperse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_annuminas;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_annuminas = UnitFromId(439325741);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_annuminas), "EldacarUnlock2", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!((EventPlayer() == UnitGetOwner(lv_annuminas)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RaynorLab2", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1102867604));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/37627C3B"));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Eldacardisperse_Init () {
    gt_Eldacardisperse = TriggerCreate("gt_Eldacardisperse_Func");
    TriggerAddEventUnitResearchProgress(gt_Eldacardisperse, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fortified Last Bridge
//--------------------------------------------------------------------------------------------------
bool gt_FortifiedLastBridge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_annuminas;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_annuminas = UnitFromId(439325741);

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(lv_annuminas) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(953071559)), "FortifyOuterHoldingLastBridge", c_techCountCompleteOnly) == 1)) {
        gv_fortifyUpgrades += 1;
        TriggerEnable(gt_UnlockDisperse, true);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FortifiedLastBridge_Init () {
    gt_FortifiedLastBridge = TriggerCreate("gt_FortifiedLastBridge_Func");
    TriggerAddEventUnitResearchProgress(gt_FortifiedLastBridge, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fortified Lond Daer
//--------------------------------------------------------------------------------------------------
bool gt_FortifiedLondDaer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_annuminas;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_annuminas = UnitFromId(439325741);

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(lv_annuminas) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1550051897)), "FortifyOuterHoldingLondDaer", c_techCountCompleteOnly) == 1)) {
        gv_fortifyUpgrades += 1;
        TriggerEnable(gt_UnlockDisperse, true);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FortifiedLondDaer_Init () {
    gt_FortifiedLondDaer = TriggerCreate("gt_FortifiedLondDaer_Func");
    TriggerAddEventUnitResearchProgress(gt_FortifiedLondDaer, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fortified Minhiarth
//--------------------------------------------------------------------------------------------------
bool gt_FortifiedMinhiarth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_annuminas;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_annuminas = UnitFromId(439325741);

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(lv_annuminas) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1731438873)), "FortifyOuterHoldingMinhiarth", c_techCountCompleteOnly) == 1)) {
        gv_fortifyUpgrades += 1;
        TriggerEnable(gt_UnlockDisperse, true);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FortifiedMinhiarth_Init () {
    gt_FortifiedMinhiarth = TriggerCreate("gt_FortifiedMinhiarth_Func");
    TriggerAddEventUnitResearchProgress(gt_FortifiedMinhiarth, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fortified Outer Rhuadur
//--------------------------------------------------------------------------------------------------
bool gt_FortifiedOuterRhuadur_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_annuminas;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_annuminas = UnitFromId(439325741);

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(lv_annuminas) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(421005958)), "FortifyOuterHoldingOuterRhuadur", c_techCountCompleteOnly) == 1)) {
        gv_fortifyUpgrades += 1;
        TriggerEnable(gt_UnlockDisperse, true);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FortifiedOuterRhuadur_Init () {
    gt_FortifiedOuterRhuadur = TriggerCreate("gt_FortifiedOuterRhuadur_Func");
    TriggerAddEventUnitResearchProgress(gt_FortifiedOuterRhuadur, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fortified Tharbad
//--------------------------------------------------------------------------------------------------
bool gt_FortifiedTharbad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_annuminas;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_annuminas = UnitFromId(439325741);

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(lv_annuminas) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1087886462)), "FortifyOuterHoldingTharbad", c_techCountCompleteOnly) == 1)) {
        gv_fortifyUpgrades += 1;
        TriggerEnable(gt_UnlockDisperse, true);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FortifiedTharbad_Init () {
    gt_FortifiedTharbad = TriggerCreate("gt_FortifiedTharbad_Func");
    TriggerAddEventUnitResearchProgress(gt_FortifiedTharbad, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Centralize
//--------------------------------------------------------------------------------------------------
bool gt_Centralize_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(439325741)), "CentralizePower", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!((gv_centralizedone == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_centralizedone = true;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/EAF50F1E"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Centralize_Init () {
    gt_Centralize = TriggerCreate("gt_Centralize_Func");
    TriggerEnable(gt_Centralize, false);
    TriggerAddEventUnitResearchProgress(gt_Centralize, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unlock Centralize
//--------------------------------------------------------------------------------------------------
bool gt_UnlockCentralize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_annuminas;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_annuminas = UnitFromId(439325741);

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(lv_annuminas) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((AbsI(gv_retreatUpgrades) >= 3)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(lv_annuminas), "ConsolidatePowerConditions", 1);
        TriggerEnable(gt_Centralize, true);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnlockCentralize_Init () {
    gt_UnlockCentralize = TriggerCreate("gt_UnlockCentralize_Func");
    TriggerEnable(gt_UnlockCentralize, false);
    TriggerAddEventUnitResearchProgress(gt_UnlockCentralize, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Eldacar (centralize)
//--------------------------------------------------------------------------------------------------
bool gt_Eldacarcentralize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_annuminas;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_annuminas = UnitFromId(439325741);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_annuminas), "EldacarUnlock", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_annuminas))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RaynorLab", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1102867604));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/9AB2B790"));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Eldacarcentralize_Init () {
    gt_Eldacarcentralize = TriggerCreate("gt_Eldacarcentralize_Func");
    TriggerAddEventUnitResearchProgress(gt_Eldacarcentralize, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Retreated Last Bridge
//--------------------------------------------------------------------------------------------------
bool gt_RetreatedLastBridge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_annuminas;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_annuminas = UnitFromId(439325741);

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(lv_annuminas) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(953071559)), "RetreatOuterHoldingLastBridge", c_techCountCompleteOnly) == 1)) {
        gv_retreatUpgrades += 1;
        TriggerEnable(gt_UnlockCentralize, true);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RetreatedLastBridge_Init () {
    gt_RetreatedLastBridge = TriggerCreate("gt_RetreatedLastBridge_Func");
    TriggerAddEventUnitResearchProgress(gt_RetreatedLastBridge, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Retreated Lond Daer
//--------------------------------------------------------------------------------------------------
bool gt_RetreatedLondDaer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_annuminas;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_annuminas = UnitFromId(439325741);

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(lv_annuminas) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1550051897)), "RetreatOuterHoldingLondDaer", c_techCountCompleteOnly) == 1)) {
        gv_retreatUpgrades += 1;
        TriggerEnable(gt_UnlockCentralize, true);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RetreatedLondDaer_Init () {
    gt_RetreatedLondDaer = TriggerCreate("gt_RetreatedLondDaer_Func");
    TriggerAddEventUnitResearchProgress(gt_RetreatedLondDaer, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Retreated Minhiarth
//--------------------------------------------------------------------------------------------------
bool gt_RetreatedMinhiarth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_annuminas;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_annuminas = UnitFromId(439325741);

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(lv_annuminas) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1731438873)), "RetreatOuterHoldingMinhiarth", c_techCountCompleteOnly) == 1)) {
        gv_retreatUpgrades += 1;
        TriggerEnable(gt_UnlockCentralize, true);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RetreatedMinhiarth_Init () {
    gt_RetreatedMinhiarth = TriggerCreate("gt_RetreatedMinhiarth_Func");
    TriggerAddEventUnitResearchProgress(gt_RetreatedMinhiarth, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Retreated Outer Rhuadur
//--------------------------------------------------------------------------------------------------
bool gt_RetreatedOuterRhuadur_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_annuminas;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_annuminas = UnitFromId(439325741);

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(lv_annuminas) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(421005958)), "RetreatOuterHoldingOuterRhuadur", c_techCountCompleteOnly) == 1)) {
        gv_retreatUpgrades += 1;
        TriggerEnable(gt_UnlockCentralize, true);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RetreatedOuterRhuadur_Init () {
    gt_RetreatedOuterRhuadur = TriggerCreate("gt_RetreatedOuterRhuadur_Func");
    TriggerAddEventUnitResearchProgress(gt_RetreatedOuterRhuadur, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Retreated Tharbad
//--------------------------------------------------------------------------------------------------
bool gt_RetreatedTharbad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_annuminas;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_annuminas = UnitFromId(439325741);

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(lv_annuminas) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1087886462)), "RetreatOuterHoldingTharbad", c_techCountCompleteOnly) == 1)) {
        gv_retreatUpgrades += 1;
        TriggerEnable(gt_UnlockCentralize, true);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RetreatedTharbad_Init () {
    gt_RetreatedTharbad = TriggerCreate("gt_RetreatedTharbad_Func");
    TriggerAddEventUnitResearchProgress(gt_RetreatedTharbad, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fortify Outer Rhuadur
//--------------------------------------------------------------------------------------------------
bool gt_FortifyOuterRhuadur_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_outerRhuadur;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_outerRhuadur = UnitFromId(421005958);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_outerRhuadur), "FortifyOuterHoldingOuterRhuadur", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_outerRhuadur))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(166057214));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1397925978));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(436192754));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(2102197945));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(2019225894));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FortifyOuterRhuadur_Init () {
    gt_FortifyOuterRhuadur = TriggerCreate("gt_FortifyOuterRhuadur_Func");
    TriggerAddEventUnitResearchProgress(gt_FortifyOuterRhuadur, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fortify Last Bridge
//--------------------------------------------------------------------------------------------------
bool gt_FortifyLastBridge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lastBridge;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lastBridge = UnitFromId(953071559);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_lastBridge), "FortifyOuterHoldingLastBridge", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_lastBridge))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1222190282));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(2059943435));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(407522332));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(2089360732));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(175672662));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FortifyLastBridge_Init () {
    gt_FortifyLastBridge = TriggerCreate("gt_FortifyLastBridge_Func");
    TriggerAddEventUnitResearchProgress(gt_FortifyLastBridge, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fortify Tharbad
//--------------------------------------------------------------------------------------------------
bool gt_FortifyTharbad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tharbad;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tharbad = UnitFromId(1087886462);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_tharbad), "FortifyOuterHoldingTharbad", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_tharbad))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(740597133));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1576914054));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(446772168));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(288253784));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(726492190));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FortifyTharbad_Init () {
    gt_FortifyTharbad = TriggerCreate("gt_FortifyTharbad_Func");
    TriggerAddEventUnitResearchProgress(gt_FortifyTharbad, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fortify Minhiarth
//--------------------------------------------------------------------------------------------------
bool gt_FortifyMinhiarth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_minhiarth;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minhiarth = UnitFromId(1731438873);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_minhiarth), "FortifyOuterHoldingMinhiarth", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_minhiarth))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1675879720));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1332223065));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1697880619));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(608375813));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(959683327));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FortifyMinhiarth_Init () {
    gt_FortifyMinhiarth = TriggerCreate("gt_FortifyMinhiarth_Func");
    TriggerAddEventUnitResearchProgress(gt_FortifyMinhiarth, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fortify Lond Daer
//--------------------------------------------------------------------------------------------------
bool gt_FortifyLondDaer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_londDaer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_londDaer = UnitFromId(1550051897);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_londDaer), "FortifyOuterHoldingLondDaer", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_londDaer))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(182383741));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1535094111));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1127780165));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1728853317));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(2144482302));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FortifyLondDaer_Init () {
    gt_FortifyLondDaer = TriggerCreate("gt_FortifyLondDaer_Func");
    TriggerAddEventUnitResearchProgress(gt_FortifyLondDaer, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Guerilla warfare
//--------------------------------------------------------------------------------------------------
bool gt_Guerillawarfare_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_amonsul;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_amonsul = UnitFromId(650634245);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_amonsul), "GuerillaWarfare", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_amonsul))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(421005958)) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1052865881));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(220619619));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1280141817));
    }

    if ((UnitIsAlive(UnitFromId(650634245)) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(278287079));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1185015332));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1958325716));
    }

    if ((UnitIsAlive(UnitFromId(573473263)) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(230413312));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(193845321));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1653145482));
    }

    if ((UnitIsAlive(UnitFromId(1067839632)) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(104572971));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(477677716));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(2100677495));
    }

    if ((UnitIsAlive(UnitFromId(953071559)) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1773934951));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1175309198));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(2113305913));
    }

    if ((UnitIsAlive(UnitFromId(439325741)) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1102867604));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1102867604));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1102867604));
    }

    if ((UnitIsAlive(UnitFromId(1213833690)) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(2113084744));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(2077156981));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(618383933));
    }

    if ((UnitIsAlive(UnitFromId(1731438873)) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1160157461));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1337008722));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1116524340));
    }

    if ((UnitIsAlive(UnitFromId(1087886462)) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(478977197));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1290449354));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(699901311));
    }

    if ((UnitIsAlive(UnitFromId(1550051897)) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1633819149));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(766128886));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryGun", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1256998228));
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Guerillawarfare_Init () {
    gt_Guerillawarfare = TriggerCreate("gt_Guerillawarfare_Func");
    TriggerAddEventUnitResearchProgress(gt_Guerillawarfare, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prince Of Dol Amroth
//--------------------------------------------------------------------------------------------------
bool gt_PrinceOfDolAmroth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dolAmroth;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dolAmroth = UnitFromId(2026638653);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_dolAmroth), "PrinceOfDolAmroth", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!((EventPlayer() == UnitGetOwner(lv_dolAmroth)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrinceOfDolAmroth", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(886977154));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/EB79BBA6"));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrinceOfDolAmroth_Init () {
    gt_PrinceOfDolAmroth = TriggerCreate("gt_PrinceOfDolAmroth_Func");
    TriggerAddEventUnitResearchProgress(gt_PrinceOfDolAmroth, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chief Of Druwaith
//--------------------------------------------------------------------------------------------------
bool gt_ChiefOfDruwaith_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_druwaithLaur;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_druwaithLaur = gv_druwaithLaur;

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_druwaithLaur), "ChiefOfDruwaithgood", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!((EventPlayer() == UnitGetOwner(lv_druwaithLaur)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_druwaithLaur), "Oppress", c_techCountCompleteOnly) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NovaHero", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(730090713));
        SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/98760444"));
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NovaHero", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(730090713));
        SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/650B013B"));
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChiefOfDruwaith_Init () {
    gt_ChiefOfDruwaith = TriggerCreate("gt_ChiefOfDruwaith_Func");
    TriggerEnable(gt_ChiefOfDruwaith, false);
    TriggerAddEventUnitResearchProgress(gt_ChiefOfDruwaith, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Druwaith Laur
//--------------------------------------------------------------------------------------------------
bool gt_SpawnDruwaithLaur_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TakeTheDruwaithLaur", 0, 0, PointFromId(971467209));
    gv_druwaithLaurBeacon = UnitLastCreated();
    TriggerEnable(gt_ActivateDruwaithLaur, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnDruwaithLaur_Init () {
    gt_SpawnDruwaithLaur = TriggerCreate("gt_SpawnDruwaithLaur_Func");
    TriggerAddEventUnitDied(gt_SpawnDruwaithLaur, UnitRefFromUnit(UnitFromId(1948361748)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Druwaith Laur
//--------------------------------------------------------------------------------------------------
bool gt_ActivateDruwaithLaur_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4D0F10A2_g;
    int auto4D0F10A2_u;
    unit auto4D0F10A2_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 5500))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Tosh") || ((UnitGetType(EventUnit()) == "Raven"))))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(33)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4D0F10A2_g = gv_clearDruwaithCannons;
    auto4D0F10A2_u = UnitGroupCount(auto4D0F10A2_g, c_unitCountAll);
    for (;; auto4D0F10A2_u -= 1) {
        auto4D0F10A2_var = UnitGroupUnitFromEnd(auto4D0F10A2_g, auto4D0F10A2_u);
        if (auto4D0F10A2_var == null) { break; }
        UnitKill(auto4D0F10A2_var);
    }
    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 5500);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DruwaithLaurGood", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(572646617));
    gv_druwaithLaur = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1205447540));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(697408205));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(905525869));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1530027895));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(469007421));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(238331884));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(708458953));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(339569312));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1241977687));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(247455933));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(759412888));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1675723419));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(474547786));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(504229339));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1184277617));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1696608872));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(734212762));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(552339934));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    if ((TechTreeUpgradeCount(UnitGetOwner(gv_druwaithLaur), "Oppress", c_techCountCompleteOnly) == 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/DC9DA8E1"));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/055D1C4E"));
    }
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_druwaithLaurBeacon);
    TriggerEnable(gt_DruwaithLaur, true);
    TriggerEnable(gt_ChiefOfDruwaith, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateDruwaithLaur_Init () {
    gt_ActivateDruwaithLaur = TriggerCreate("gt_ActivateDruwaithLaur_Func");
    TriggerEnable(gt_ActivateDruwaithLaur, false);
    TriggerAddEventUnitBehaviorChange(gt_ActivateDruwaithLaur, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Druwaith Laur
//--------------------------------------------------------------------------------------------------
bool gt_DruwaithLaur_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawner;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawner = gv_druwaithLaur;
    lv_point = PointFromId(730090713);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_spawner) == true))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesMade)))) {
            return false;
        }

        if (!((UnitGetOwner(lv_spawner) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    gf_Createunit(2, "PreserverA", lv_spawner, lv_point);
    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "DruwaithUpgradeSpawnGood3", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "PreserverC", lv_spawner, lv_point);
        gf_Createunit(1, "PreserverA", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "DruwaithUpgradeSpawnGood2", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "PreserverB", lv_spawner, lv_point);
        gf_Createunit(1, "PreserverA", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "DruwaithUpgradeSpawnGood", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "PreserverB", lv_spawner, lv_point);
        gf_Createunit(1, "PreserverA", lv_spawner, lv_point);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DruwaithLaur_Init () {
    gt_DruwaithLaur = TriggerCreate("gt_DruwaithLaur_Func");
    TriggerEnable(gt_DruwaithLaur, false);
    TriggerAddEventTimePeriodic(gt_DruwaithLaur, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Westmarch
//--------------------------------------------------------------------------------------------------
bool gt_SpawnWestmarch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "OccupyWestMarch", 0, 0, PointFromId(1055484869));
    gv_westMarchBeacon = UnitLastCreated();
    TriggerEnable(gt_ActivateWestmarch, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnWestmarch_Init () {
    gt_SpawnWestmarch = TriggerCreate("gt_SpawnWestmarch_Func");
    TriggerAddEventUnitDied(gt_SpawnWestmarch, UnitRefFromUnit(UnitFromId(1122522248)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Westmarch
//--------------------------------------------------------------------------------------------------
bool gt_ActivateWestmarch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 5000))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "MengskSiegeTank") || ((UnitGetType(EventUnit()) == "Raven"))))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(31)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 5000);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedDominionHousing3", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1055484869));
    gv_westMarch = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1141883127));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1773503654));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1385097758));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(977056439));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1283094372));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1608137369));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1177386170));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(649263750));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(781575083));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(404408));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(84923261));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1366381207));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/65D0C63C"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_westMarchBeacon);
    TriggerEnable(gt_WestMarch, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateWestmarch_Init () {
    gt_ActivateWestmarch = TriggerCreate("gt_ActivateWestmarch_Func");
    TriggerEnable(gt_ActivateWestmarch, false);
    TriggerAddEventUnitBehaviorChange(gt_ActivateWestmarch, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: West March
//--------------------------------------------------------------------------------------------------
bool gt_WestMarch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawner;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawner = gv_westMarch;
    lv_point = PointFromId(1879120932);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_spawner) == true))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesMade)))) {
            return false;
        }

        if (!((UnitGetOwner(lv_spawner) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    gf_Createunit(1, "Marine", lv_spawner, lv_point);
    gf_Createunit(1, "Vulture", lv_spawner, lv_point);
    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "WestMarchUpgradespawn3", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "Vulture", lv_spawner, lv_point);
        gf_Createunit(1, "Diamondback", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "WestMarchUpgradespawn2", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "Spectre", lv_spawner, lv_point);
        gf_Createunit(1, "Vulture", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "WestMarchUpgradespawn", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(2, "Vulture", lv_spawner, lv_point);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WestMarch_Init () {
    gt_WestMarch = TriggerCreate("gt_WestMarch_Func");
    TriggerEnable(gt_WestMarch, false);
    TriggerAddEventTimePeriodic(gt_WestMarch, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Surveiler Of Gondor
//--------------------------------------------------------------------------------------------------
bool gt_SurveilerOfGondor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_erech;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_erech = UnitFromId(1068266261);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_erech), "OathOfErech2", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_erech))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Karass", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(2035205192));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/FE5D305F"));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurveilerOfGondor_Init () {
    gt_SurveilerOfGondor = TriggerCreate("gt_SurveilerOfGondor_Func");
    TriggerAddEventUnitResearchProgress(gt_SurveilerOfGondor, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Black Vale
//--------------------------------------------------------------------------------------------------
bool gt_ActivateBlackVale_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 5500))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "MengskSiegeTank") || ((UnitGetType(EventUnit()) == "Raven"))))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(16)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 5500);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShadowShieldGeneratorSmall", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(124440920));
    gv_blackVale = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1049381878));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1355312206));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1250223068));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(664053576));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(738431917));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1927014878));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1209099579));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(370672434));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1813353632));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1705013177));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(876737547));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/27451FBE"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_blackValeBeacon);
    TriggerEnable(gt_BlackVale, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateBlackVale_Init () {
    gt_ActivateBlackVale = TriggerCreate("gt_ActivateBlackVale_Func");
    TriggerAddEventUnitBehaviorChange(gt_ActivateBlackVale, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Black Vale
//--------------------------------------------------------------------------------------------------
bool gt_BlackVale_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(gv_blackVale) == true) && (PlayerGetPropertyInt(UnitGetOwner(gv_blackVale), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(gv_blackVale), c_playerPropSuppliesMade)) && (UnitGetOwner(gv_blackVale) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(gv_blackVale), "BlackValeUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "MorthondArcher", 0, UnitGetOwner(gv_blackVale), PointFromId(825542303));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarPig2", 0, UnitGetOwner(gv_blackVale), PointFromId(825542303));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(gv_blackVale), PointFromId(825542303));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(gv_blackVale), "BlackValeUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "MorthondArcher", 0, UnitGetOwner(gv_blackVale), PointFromId(825542303));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(gv_blackVale), PointFromId(825542303));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(gv_blackVale), "BlackValeUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "MorthondArcher", 0, UnitGetOwner(gv_blackVale), PointFromId(825542303));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(gv_blackVale), PointFromId(825542303));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(gv_blackVale), "BlackValeUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "MorthondArcher", 0, UnitGetOwner(gv_blackVale), PointFromId(825542303));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BlackVale_Init () {
    gt_BlackVale = TriggerCreate("gt_BlackVale_Func");
    TriggerEnable(gt_BlackVale, false);
    TriggerAddEventTimePeriodic(gt_BlackVale, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Valandil's insanity
//--------------------------------------------------------------------------------------------------
bool gt_ActivateValandilsinsanity_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dolAmroth;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dolAmroth = UnitFromId(2026638653);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_dolAmroth), "ValandilsInsanity", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!((EventPlayer() == UnitGetOwner(lv_dolAmroth)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ValandilIncomeDolamroth, true);
    TriggerEnable(gt_ValandilIncomeErech, true);
    TriggerEnable(gt_ValandilIncomePinnathGaelin, true);
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/22FE069E"));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateValandilsinsanity_Init () {
    gt_ActivateValandilsinsanity = TriggerCreate("gt_ActivateValandilsinsanity_Func");
    TriggerAddEventUnitResearchProgress(gt_ActivateValandilsinsanity, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Valandil Income (Erech)
//--------------------------------------------------------------------------------------------------
bool gt_ValandilIncomeErech_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_erech;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_erech = UnitFromId(1068266261);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_erech) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_erech), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_erech), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_erech) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_erech), c_playerPropMinerals, c_playerPropOperAdd, 50);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ValandilIncomeErech_Init () {
    gt_ValandilIncomeErech = TriggerCreate("gt_ValandilIncomeErech_Func");
    TriggerEnable(gt_ValandilIncomeErech, false);
    TriggerAddEventTimePeriodic(gt_ValandilIncomeErech, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Valandil Income (Dol amroth)
//--------------------------------------------------------------------------------------------------
bool gt_ValandilIncomeDolamroth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dolAmroth;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dolAmroth = UnitFromId(2026638653);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_dolAmroth) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_dolAmroth), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_dolAmroth), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_dolAmroth) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_dolAmroth), c_playerPropMinerals, c_playerPropOperAdd, 50);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ValandilIncomeDolamroth_Init () {
    gt_ValandilIncomeDolamroth = TriggerCreate("gt_ValandilIncomeDolamroth_Func");
    TriggerEnable(gt_ValandilIncomeDolamroth, false);
    TriggerAddEventTimePeriodic(gt_ValandilIncomeDolamroth, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Valandil Income (Pinnath Gaelin)
//--------------------------------------------------------------------------------------------------
bool gt_ValandilIncomePinnathGaelin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pinnathGaelin;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pinnathGaelin = UnitFromId(1919917573);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_pinnathGaelin) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_pinnathGaelin), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_pinnathGaelin), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_pinnathGaelin) != 0)) {
        PlayerModifyPropertyInt(UnitGetOwner(lv_pinnathGaelin), c_playerPropMinerals, c_playerPropOperAdd, 50);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ValandilIncomePinnathGaelin_Init () {
    gt_ValandilIncomePinnathGaelin = TriggerCreate("gt_ValandilIncomePinnathGaelin_Func");
    TriggerEnable(gt_ValandilIncomePinnathGaelin, false);
    TriggerAddEventTimePeriodic(gt_ValandilIncomePinnathGaelin, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Litash
//--------------------------------------------------------------------------------------------------
bool gt_ActivateLitash_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 7500))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "InfestedStukov") || ((UnitGetType(EventUnit()) == "AlarakChampion"))))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(3)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 7500);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoboticsFacility", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(2129404488));
    gv_litash = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(701705336));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(2115381660));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1032206243));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(974187715));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(432769775));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1465302122));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1760735324));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(287190670));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(598536428));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/B4B5EB80"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_litashBeacon);
    TriggerEnable(gt_Litash, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateLitash_Init () {
    gt_ActivateLitash = TriggerCreate("gt_ActivateLitash_Func");
    TriggerAddEventUnitBehaviorChange(gt_ActivateLitash, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Litash
//--------------------------------------------------------------------------------------------------
bool gt_Litash_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(gv_litash) == true) && (PlayerGetPropertyInt(UnitGetOwner(gv_litash), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(gv_litash), c_playerPropSuppliesMade)) && (UnitGetOwner(gv_litash) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(gv_litash), "LitashUpgradespawn4", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "HighTemplarTaldarim", 0, UnitGetOwner(gv_litash), PointFromId(1377496786));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "MengskMarine", 0, UnitGetOwner(gv_litash), PointFromId(1377496786));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "DarkTemplarTaldarim", 0, UnitGetOwner(gv_litash), PointFromId(1377496786));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marine", 0, UnitGetOwner(gv_litash), PointFromId(1377496786));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(gv_litash), PointFromId(1377496786));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(gv_litash), "LitashUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "HighTemplarTaldarim", 0, UnitGetOwner(gv_litash), PointFromId(1377496786));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "MengskMarine", 0, UnitGetOwner(gv_litash), PointFromId(1377496786));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "DarkTemplarTaldarim", 0, UnitGetOwner(gv_litash), PointFromId(1377496786));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marine", 0, UnitGetOwner(gv_litash), PointFromId(1377496786));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(gv_litash), PointFromId(1377496786));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(gv_litash), "LitashUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HighTemplarTaldarim", 0, UnitGetOwner(gv_litash), PointFromId(1377496786));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MengskMarine", 0, UnitGetOwner(gv_litash), PointFromId(1377496786));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "DarkTemplarTaldarim", 0, UnitGetOwner(gv_litash), PointFromId(1377496786));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(gv_litash), PointFromId(1377496786));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(gv_litash), PointFromId(1377496786));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(gv_litash), "LitashUpgradespawn", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MengskMarine", 0, UnitGetOwner(gv_litash), PointFromId(1377496786));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DarkTemplarTaldarim", 0, UnitGetOwner(gv_litash), PointFromId(1377496786));
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(gv_litash), PointFromId(1377496786));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(gv_litash), PointFromId(1377496786));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(gv_litash), "LitashUpgradespawn", c_techCountCompleteOnly) == 0)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(gv_litash), PointFromId(1377496786));
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, UnitGetOwner(gv_litash), PointFromId(1377496786));
                        }

                    }
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Litash_Init () {
    gt_Litash = TriggerCreate("gt_Litash_Func");
    TriggerEnable(gt_Litash, false);
    TriggerAddEventTimePeriodic(gt_Litash, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Evil Rhuadur
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEvilRhuadur_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(421005958)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(650634245)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "EvilRhudaur", 0, 0, PointFromId(98994573));
    gv_rhuadurBeacon = UnitLastCreated();
    TriggerEnable(gt_ActivateEvilRhuadur, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnEvilRhuadur_Init () {
    gt_SpawnEvilRhuadur = TriggerCreate("gt_SpawnEvilRhuadur_Func");
    TriggerAddEventUnitDied(gt_SpawnEvilRhuadur, UnitRefFromUnit(UnitFromId(421005958)));
    TriggerAddEventUnitDied(gt_SpawnEvilRhuadur, UnitRefFromUnit(UnitFromId(650634245)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Evil Rhuadur
//--------------------------------------------------------------------------------------------------
bool gt_ActivateEvilRhuadur_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 5500))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "ZaGara") || (UnitGetType(EventUnit()) == "InfestedStukov") || (UnitGetType(EventUnit()) == "AlarakChampion")))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(5)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 5500);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedArmory", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(98994573));
    gv_evilRhuadur = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(2024699924));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1682092150));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(353057901));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1357978));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(132717450));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(279565954));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(23944675));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(395812005));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1313586185));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1892974462));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1981856026));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(514288717));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(443387067));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1403914101));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(480251600));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(42851888));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A946BCDD"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_rhuadurBeacon);
    TriggerEnable(gt_Evilrhuadur, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateEvilRhuadur_Init () {
    gt_ActivateEvilRhuadur = TriggerCreate("gt_ActivateEvilRhuadur_Func");
    TriggerEnable(gt_ActivateEvilRhuadur, false);
    TriggerAddEventUnitBehaviorChange(gt_ActivateEvilRhuadur, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evil rhuadur
//--------------------------------------------------------------------------------------------------
bool gt_Evilrhuadur_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(gv_evilRhuadur) == true) && (PlayerGetPropertyInt(UnitGetOwner(gv_evilRhuadur), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(gv_evilRhuadur), c_playerPropSuppliesMade)) && (UnitGetOwner(gv_evilRhuadur) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(gv_evilRhuadur), "EvilRhuadurUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ursadon", 0, UnitGetOwner(gv_evilRhuadur), PointFromId(94888226));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeTank", 0, UnitGetOwner(gv_evilRhuadur), PointFromId(94888226));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zealot", 0, UnitGetOwner(gv_evilRhuadur), PointFromId(94888226));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine", 0, UnitGetOwner(gv_evilRhuadur), PointFromId(94888226));
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "StukovInfestedTerran", 0, UnitGetOwner(gv_evilRhuadur), PointFromId(94888226));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(gv_evilRhuadur), "EvilRhuadurUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "Zealot", 0, UnitGetOwner(gv_evilRhuadur), PointFromId(94888226));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(gv_evilRhuadur), PointFromId(94888226));
                libNtve_gf_CreateUnitsWithDefaultFacing(5, "StukovInfestedTerran", 0, UnitGetOwner(gv_evilRhuadur), PointFromId(94888226));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(gv_evilRhuadur), "EvilRhuadurUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zealot", 0, UnitGetOwner(gv_evilRhuadur), PointFromId(94888226));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(gv_evilRhuadur), PointFromId(94888226));
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "StukovInfestedTerran", 0, UnitGetOwner(gv_evilRhuadur), PointFromId(94888226));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(gv_evilRhuadur), "EvilRhuadurUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(gv_evilRhuadur), PointFromId(94888226));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "StukovInfestedTerran", 0, UnitGetOwner(gv_evilRhuadur), PointFromId(94888226));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Evilrhuadur_Init () {
    gt_Evilrhuadur = TriggerCreate("gt_Evilrhuadur_Func");
    TriggerEnable(gt_Evilrhuadur, false);
    TriggerAddEventTimePeriodic(gt_Evilrhuadur, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Mirkwood
//--------------------------------------------------------------------------------------------------
bool gt_SpawnMirkwood_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(677747402)) == false))) {
            return false;
        }

        if (!(((UnitIsAlive(UnitFromId(14086565)) == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Terran22", 0, 0, PointFromId(1690707405));
    gv_mirkwoodBeacon = UnitLastCreated();
    TriggerEnable(gt_ActivateMirkwood, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnMirkwood_Init () {
    gt_SpawnMirkwood = TriggerCreate("gt_SpawnMirkwood_Func");
    TriggerAddEventUnitDied(gt_SpawnMirkwood, UnitRefFromUnit(UnitFromId(677747402)));
    TriggerAddEventUnitDied(gt_SpawnMirkwood, UnitRefFromUnit(UnitFromId(14086565)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Mirkwood
//--------------------------------------------------------------------------------------------------
bool gt_ActivateMirkwood_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1F6FCDDE_g;
    int auto1F6FCDDE_u;
    unit auto1F6FCDDE_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 7000))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "SwarmHostSplitB") || ((UnitGetType(EventUnit()) == "Maar"))))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(15)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 7000);
    auto1F6FCDDE_g = gv_mirkwoodClearCannons;
    auto1F6FCDDE_u = UnitGroupCount(auto1F6FCDDE_g, c_unitCountAll);
    for (;; auto1F6FCDDE_u -= 1) {
        auto1F6FCDDE_var = UnitGroupUnitFromEnd(auto1F6FCDDE_g, auto1F6FCDDE_u);
        if (auto1F6FCDDE_var == null) { break; }
        UnitKill(auto1F6FCDDE_var);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "BanelingEggNestVoid", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1345419198));
    gv_mirkwood = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(448890730));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(917024856));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(606099189));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(2084738224));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1231709673));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(963624922));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(861323449));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1108638278));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(469891039));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1334687111));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1705657297));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(397383123));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(243037854));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1079280411));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1532106181));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(999333608));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(2116831183));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1976903714));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(37464248));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(897559501));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorUsed", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1076804707));
    gv_mirkwoodCreep = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorUsed", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(959200984));
    gv_mirkwoodCreep2 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorUsed", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1015947403));
    gv_mirkwoodCreep3 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorUsed", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(44328804));
    gv_mirkwoodCreep4 = UnitLastCreated();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A0564C3D"));
    SoundPlayForPlayer(SoundLink("MirkwoodIsOurs", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_mirkwoodBeacon);
    TriggerEnable(gt_Mirkwood, true);
    TriggerEnable(gt_MirkwoodDestroyed, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateMirkwood_Init () {
    gt_ActivateMirkwood = TriggerCreate("gt_ActivateMirkwood_Func");
    TriggerEnable(gt_ActivateMirkwood, false);
    TriggerAddEventUnitBehaviorChange(gt_ActivateMirkwood, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mirkwood
//--------------------------------------------------------------------------------------------------
bool gt_Mirkwood_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(gv_mirkwood) == true) && (PlayerGetPropertyInt(UnitGetOwner(gv_mirkwood), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(gv_mirkwood), c_playerPropSuppliesMade)) && (UnitGetOwner(gv_mirkwood) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(gv_mirkwood), "MirkwoodUpgradespawn4", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BroodLord", 0, UnitGetOwner(gv_mirkwood), PointFromId(2068737177));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "HighTemplarTaldarim", 0, UnitGetOwner(gv_mirkwood), PointFromId(2068737177));
            libNtve_gf_CreateUnitsWithDefaultFacing(8, "KerriganInfestBroodling", 0, UnitGetOwner(gv_mirkwood), PointFromId(2068737177));
            libNtve_gf_CreateUnitsWithDefaultFacing(11, "Broodling", 0, UnitGetOwner(gv_mirkwood), PointFromId(2068737177));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(gv_mirkwood), "MirkwoodUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "HighTemplarTaldarim", 0, UnitGetOwner(gv_mirkwood), PointFromId(2068737177));
                libNtve_gf_CreateUnitsWithDefaultFacing(6, "KerriganInfestBroodling", 0, UnitGetOwner(gv_mirkwood), PointFromId(2068737177));
                libNtve_gf_CreateUnitsWithDefaultFacing(9, "Broodling", 0, UnitGetOwner(gv_mirkwood), PointFromId(2068737177));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(gv_mirkwood), "MirkwoodUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HighTemplarTaldarim", 0, UnitGetOwner(gv_mirkwood), PointFromId(2068737177));
                    libNtve_gf_CreateUnitsWithDefaultFacing(4, "KerriganInfestBroodling", 0, UnitGetOwner(gv_mirkwood), PointFromId(2068737177));
                    libNtve_gf_CreateUnitsWithDefaultFacing(7, "Broodling", 0, UnitGetOwner(gv_mirkwood), PointFromId(2068737177));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(gv_mirkwood), "MirkwoodUpgradespawn", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(3, "KerriganInfestBroodling", 0, UnitGetOwner(gv_mirkwood), PointFromId(2068737177));
                        libNtve_gf_CreateUnitsWithDefaultFacing(4, "Broodling", 0, UnitGetOwner(gv_mirkwood), PointFromId(2068737177));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(gv_mirkwood), "MirkwoodUpgradespawn", c_techCountCompleteOnly) == 0)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganInfestBroodling", 0, UnitGetOwner(gv_mirkwood), PointFromId(2068737177));
                            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Broodling", 0, UnitGetOwner(gv_mirkwood), PointFromId(2068737177));
                        }

                    }
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Mirkwood_Init () {
    gt_Mirkwood = TriggerCreate("gt_Mirkwood_Func");
    TriggerEnable(gt_Mirkwood, false);
    TriggerAddEventTimePeriodic(gt_Mirkwood, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mirkwood Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_MirkwoodDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("MirkwoodDead", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitBehaviorRemove(gv_mirkwoodCreep, "HeroDeathPrevention", 1);
    UnitBehaviorRemove(gv_mirkwoodCreep2, "HeroDeathPrevention", 1);
    UnitBehaviorRemove(gv_mirkwoodCreep3, "HeroDeathPrevention", 1);
    UnitBehaviorRemove(gv_mirkwoodCreep4, "HeroDeathPrevention", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MirkwoodDestroyed_Init () {
    gt_MirkwoodDestroyed = TriggerCreate("gt_MirkwoodDestroyed_Func");
    TriggerEnable(gt_MirkwoodDestroyed, false);
    TriggerAddEventUnitDied(gt_MirkwoodDestroyed, UnitRefFromVariable("gv_mirkwood"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Northern Wastes
//--------------------------------------------------------------------------------------------------
bool gt_ActivateNorthernWastes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 8500))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Maar") || ((UnitGetType(EventUnit()) == "ZaGara") || (UnitGetType(EventUnit()) == "Terrorzor"))))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(29)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 8500);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedDominionHousing2", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(620320666));
    gv_northernWastesEast = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedDominionHousing22", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1337043248));
    gv_northernWastesWest = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1641312976));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1345924642));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(879683870));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(422054782));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(452622089));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(2120623918));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(454474472));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(761585923));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(854090296));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1336456097));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(291558557));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(102254321));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(435843057));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(675577136));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(35576167));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(913669303));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(15, "Zergling", 0, UnitGetOwner(EventUnit()), PointFromId(654854118));
    libNtve_gf_CreateUnitsWithDefaultFacing(15, "StukovInfestedTerran", 0, UnitGetOwner(EventUnit()), PointFromId(654854118));
    libNtve_gf_CreateUnitsWithDefaultFacing(5, "Ursadon", 0, UnitGetOwner(EventUnit()), PointFromId(654854118));
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Ultralisk", 0, UnitGetOwner(EventUnit()), PointFromId(654854118));
    libNtve_gf_CreateUnitsWithDefaultFacing(15, "Zergling", 0, UnitGetOwner(EventUnit()), PointFromId(1806160368));
    libNtve_gf_CreateUnitsWithDefaultFacing(15, "StukovInfestedTerran", 0, UnitGetOwner(EventUnit()), PointFromId(1806160368));
    libNtve_gf_CreateUnitsWithDefaultFacing(5, "Ursadon", 0, UnitGetOwner(EventUnit()), PointFromId(1806160368));
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Ultralisk", 0, UnitGetOwner(EventUnit()), PointFromId(1806160368));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/12514DB3"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_northernWastesBeacon);
    TriggerEnable(gt_NorthernWastesWest, true);
    TriggerEnable(gt_NorthernWastesEast, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateNorthernWastes_Init () {
    gt_ActivateNorthernWastes = TriggerCreate("gt_ActivateNorthernWastes_Func");
    TriggerAddEventUnitBehaviorChange(gt_ActivateNorthernWastes, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Northern Wastes West
//--------------------------------------------------------------------------------------------------
bool gt_NorthernWastesWest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_triggeringspawn;
    point lv_triggeringpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggeringspawn = gv_northernWastesWest;
    lv_triggeringpoint = PointFromId(1806160368);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_triggeringspawn) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_triggeringspawn), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_triggeringspawn), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_triggeringspawn) != 0)) {
        gf_Createunit(3, "Zergling", lv_triggeringspawn, lv_triggeringpoint);
        gf_Createunit(3, "StukovInfestedTerran", lv_triggeringspawn, lv_triggeringpoint);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NorthernWastesWest_Init () {
    gt_NorthernWastesWest = TriggerCreate("gt_NorthernWastesWest_Func");
    TriggerEnable(gt_NorthernWastesWest, false);
    TriggerAddEventTimePeriodic(gt_NorthernWastesWest, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Northern Wastes East
//--------------------------------------------------------------------------------------------------
bool gt_NorthernWastesEast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_triggeringspawn;
    point lv_triggeringpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggeringspawn = gv_northernWastesEast;
    lv_triggeringpoint = PointFromId(654854118);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_triggeringspawn) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_triggeringspawn), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_triggeringspawn), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_triggeringspawn) != 0)) {
        gf_Createunit(3, "Zergling", lv_triggeringspawn, lv_triggeringpoint);
        gf_Createunit(3, "StukovInfestedTerran", lv_triggeringspawn, lv_triggeringpoint);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NorthernWastesEast_Init () {
    gt_NorthernWastesEast = TriggerCreate("gt_NorthernWastesEast_Func");
    TriggerEnable(gt_NorthernWastesEast, false);
    TriggerAddEventTimePeriodic(gt_NorthernWastesEast, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Khorakhil/Empower
//--------------------------------------------------------------------------------------------------
bool gt_KhorakhilEmpower_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_northEnedwaith;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_northEnedwaith = UnitFromId(1330193940);

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == UnitGetOwner(lv_northEnedwaith)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_northEnedwaith), "Khorakhil", c_techCountCompleteOnly) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "KhorakhilTheBlindSorcerer", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1980932493));
        SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/4BF0EE2D"));
        TriggerEnable(TriggerGetCurrent(), false);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_northEnedwaith), "EmpowerAdunabethTheQuiet", c_techCountCompleteOnly) == 1)) {
        SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/22F6A20F"));
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KhorakhilEmpower_Init () {
    gt_KhorakhilEmpower = TriggerCreate("gt_KhorakhilEmpower_Func");
    TriggerAddEventUnitResearchProgress(gt_KhorakhilEmpower, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Horamuth
//--------------------------------------------------------------------------------------------------
bool gt_Horamuth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_evilMinhiarth;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_evilMinhiarth = gv_evilMinhiarth;

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_evilMinhiarth), "Horamuth", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_evilMinhiarth))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == gv_evilMinhiarth)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HoramuthTheIceKing", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1359575571));
    }

    if ((EventUnit() == gv_evilLefnui)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HoramuthTheIceKing", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1011198778));
    }

    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/0DFF2DE5"));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Horamuth_Init () {
    gt_Horamuth = TriggerCreate("gt_Horamuth_Func");
    TriggerAddEventUnitResearchProgress(gt_Horamuth, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lieutenant Of Hoarddale
//--------------------------------------------------------------------------------------------------
bool gt_LieutenantOfHoarddale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hoarddale;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hoarddale = UnitFromId(1920784909);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_hoarddale), "LieutenantOfHoarddale", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_hoarddale))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoachVile", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1259028994));
    gv_lieutenantOfHoarddale = UnitLastCreated();
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/0D33AB2E"));
    TriggerEnable(gt_LieutenantOfHoarddaleDeath, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LieutenantOfHoarddale_Init () {
    gt_LieutenantOfHoarddale = TriggerCreate("gt_LieutenantOfHoarddale_Func");
    TriggerAddEventUnitResearchProgress(gt_LieutenantOfHoarddale, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Evil Lefnui
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEvilLefnui_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "EvilLefnui", c_unitCreateIgnorePlacement, 0, PointFromId(342646091));
    gv_evilLefnuiBeacon = UnitLastCreated();
    TriggerEnable(gt_ActivateEvilLefnui, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnEvilLefnui_Init () {
    gt_SpawnEvilLefnui = TriggerCreate("gt_SpawnEvilLefnui_Func");
    TriggerAddEventUnitDied(gt_SpawnEvilLefnui, UnitRefFromUnit(UnitFromId(490175528)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Evil Lefnui
//--------------------------------------------------------------------------------------------------
bool gt_ActivateEvilLefnui_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3CDE9E85_g;
    int auto3CDE9E85_u;
    unit auto3CDE9E85_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 4500))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "TaurenSpaceMarine") || ((UnitGetType(EventUnit()) == "MengskFirebat"))))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(22)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 4500);
    auto3CDE9E85_g = gv_clearEvilLefnuiCannons;
    auto3CDE9E85_u = UnitGroupCount(auto3CDE9E85_g, c_unitCountAll);
    for (;; auto3CDE9E85_u -= 1) {
        auto3CDE9E85_var = UnitGroupUnitFromEnd(auto3CDE9E85_g, auto3CDE9E85_u);
        if (auto3CDE9E85_var == null) { break; }
        UnitKill(auto3CDE9E85_var);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "EvilLefnui2", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(342646091));
    gv_evilLefnui = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(628472566));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(112165785));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1273655725));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1736229592));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(452847795));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1222992757));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(844390457));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(2077280198));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(2067152697));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1455722056));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1503653540));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(327046448));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1640517142));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(988242078));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E51EEB75"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_evilLefnuiBeacon);
    gv_evilLefnuiGotten = true;
    TriggerEnable(gt_EvilLefnui, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateEvilLefnui_Init () {
    gt_ActivateEvilLefnui = TriggerCreate("gt_ActivateEvilLefnui_Func");
    TriggerEnable(gt_ActivateEvilLefnui, false);
    TriggerAddEventUnitBehaviorChange(gt_ActivateEvilLefnui, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evil Lefnui
//--------------------------------------------------------------------------------------------------
bool gt_EvilLefnui_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_evilLefnui;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_evilLefnui = gv_evilLefnui;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_evilLefnui) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_evilLefnui), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_evilLefnui), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_evilLefnui) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_evilLefnui), "LefnuiUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(10, "PreserverA", 0, UnitGetOwner(lv_evilLefnui), PointFromId(1011198778));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "PreserverB", 0, UnitGetOwner(lv_evilLefnui), PointFromId(1011198778));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PreserverC", 0, UnitGetOwner(lv_evilLefnui), PointFromId(1011198778));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_evilLefnui), "LefnuiUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(7, "PreserverA", 0, UnitGetOwner(lv_evilLefnui), PointFromId(1011198778));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "PreserverB", 0, UnitGetOwner(lv_evilLefnui), PointFromId(1011198778));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_evilLefnui), "LefnuiUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(5, "PreserverA", 0, UnitGetOwner(lv_evilLefnui), PointFromId(1011198778));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PreserverB", 0, UnitGetOwner(lv_evilLefnui), PointFromId(1011198778));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_evilLefnui), "LefnuiUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(3, "PreserverA", 0, UnitGetOwner(lv_evilLefnui), PointFromId(1011198778));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EvilLefnui_Init () {
    gt_EvilLefnui = TriggerCreate("gt_EvilLefnui_Func");
    TriggerEnable(gt_EvilLefnui, false);
    TriggerAddEventTimePeriodic(gt_EvilLefnui, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Evil Orthanc
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEvilOrthanc_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CaptureOrthanc", c_unitCreateIgnorePlacement, 0, PointFromId(1274933590));
    gv_evilOrthancBeacon = UnitLastCreated();
    TriggerEnable(gt_ActivateEvilOrthanc, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnEvilOrthanc_Init () {
    gt_SpawnEvilOrthanc = TriggerCreate("gt_SpawnEvilOrthanc_Func");
    TriggerAddEventUnitDied(gt_SpawnEvilOrthanc, UnitRefFromUnit(UnitFromId(1421689034)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Evil Orthanc
//--------------------------------------------------------------------------------------------------
bool gt_ActivateEvilOrthanc_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto133FBDD8_g;
    int auto133FBDD8_u;
    unit auto133FBDD8_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 3000))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "TaurenSpaceMarine") || ((UnitGetType(EventUnit()) == "MengskFirebat"))))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(19)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 3000);
    auto133FBDD8_g = gv_clearOrthancCannons;
    auto133FBDD8_u = UnitGroupCount(auto133FBDD8_g, c_unitCountAll);
    for (;; auto133FBDD8_u -= 1) {
        auto133FBDD8_var = UnitGroupUnitFromEnd(auto133FBDD8_g, auto133FBDD8_u);
        if (auto133FBDD8_var == null) { break; }
        UnitKill(auto133FBDD8_var);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "EvilOrthanc", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1274933590));
    gv_evilOrthanc = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(487152280));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(806436998));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(498124205));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1140747851));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1197763926));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(324494778));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1058118238));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(623358629));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1365872837));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(2118397224));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1595228754));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1492032280));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/63D1DD2F"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_evilOrthancBeacon);
    gv_evilOrthancGotten = true;
    TriggerEnable(gt_EvilOrthanc, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateEvilOrthanc_Init () {
    gt_ActivateEvilOrthanc = TriggerCreate("gt_ActivateEvilOrthanc_Func");
    TriggerEnable(gt_ActivateEvilOrthanc, false);
    TriggerAddEventUnitBehaviorChange(gt_ActivateEvilOrthanc, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evil Orthanc
//--------------------------------------------------------------------------------------------------
bool gt_EvilOrthanc_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(gv_evilOrthanc) == true) && (PlayerGetPropertyInt(UnitGetOwner(gv_evilOrthanc), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(gv_evilOrthanc), c_playerPropSuppliesMade)) && (UnitGetOwner(gv_evilOrthanc) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(gv_evilOrthanc), "EvilOrthancUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "Marine2", 0, UnitGetOwner(gv_evilOrthanc), PointFromId(1356171968));
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "PrisonZealot", 0, UnitGetOwner(gv_evilOrthanc), PointFromId(1356171968));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeTank", 0, UnitGetOwner(gv_evilOrthanc), PointFromId(1356171968));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HighTemplarTaldarim", 0, UnitGetOwner(gv_evilOrthanc), PointFromId(1356171968));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Cyclone", 0, UnitGetOwner(gv_evilOrthanc), PointFromId(1356171968));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(gv_evilOrthanc), "EvilOrthancUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(6, "Marine2", 0, UnitGetOwner(gv_evilOrthanc), PointFromId(1356171968));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "PrisonZealot", 0, UnitGetOwner(gv_evilOrthanc), PointFromId(1356171968));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeTank", 0, UnitGetOwner(gv_evilOrthanc), PointFromId(1356171968));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Cyclone", 0, UnitGetOwner(gv_evilOrthanc), PointFromId(1356171968));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(gv_evilOrthanc), "EvilOrthancUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Marine2", 0, UnitGetOwner(gv_evilOrthanc), PointFromId(1356171968));
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "PrisonZealot", 0, UnitGetOwner(gv_evilOrthanc), PointFromId(1356171968));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Cyclone", 0, UnitGetOwner(gv_evilOrthanc), PointFromId(1356171968));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(gv_evilOrthanc), "EvilOrthancUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine2", 0, UnitGetOwner(gv_evilOrthanc), PointFromId(1356171968));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrisonZealot", 0, UnitGetOwner(gv_evilOrthanc), PointFromId(1356171968));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Cyclone", 0, UnitGetOwner(gv_evilOrthanc), PointFromId(1356171968));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EvilOrthanc_Init () {
    gt_EvilOrthanc = TriggerCreate("gt_EvilOrthanc_Func");
    TriggerEnable(gt_EvilOrthanc, false);
    TriggerAddEventTimePeriodic(gt_EvilOrthanc, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Nan Laeglin
//--------------------------------------------------------------------------------------------------
bool gt_ActivateNanLaeglin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 4000))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "TaurenSpaceMarine") || ((UnitGetType(EventUnit()) == "MengskFirebat"))))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(20)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 4000);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NanLaeglin", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(748555721));
    gv_nanLaeglin = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1827092433));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(359796275));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(296692687));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1909772047));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1400347049));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1192709065));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(516144731));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1863952782));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1834293838));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A0EA0E62"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_nanLaeglinBeacon);
    TriggerEnable(gt_NanLaeglin, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateNanLaeglin_Init () {
    gt_ActivateNanLaeglin = TriggerCreate("gt_ActivateNanLaeglin_Func");
    TriggerAddEventUnitBehaviorChange(gt_ActivateNanLaeglin, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nan Laeglin
//--------------------------------------------------------------------------------------------------
bool gt_NanLaeglin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(gv_nanLaeglin) == true) && (PlayerGetPropertyInt(UnitGetOwner(gv_nanLaeglin), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(gv_nanLaeglin), c_playerPropSuppliesMade)) && (UnitGetOwner(gv_nanLaeglin) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(gv_nanLaeglin), "NanLaeglinUpgradespawn2", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Dunlending", 0, UnitGetOwner(gv_nanLaeglin), PointFromId(798804380));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "PrisonZealot", 0, UnitGetOwner(gv_nanLaeglin), PointFromId(798804380));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Cyclone", 0, UnitGetOwner(gv_nanLaeglin), PointFromId(798804380));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(gv_nanLaeglin), "NanLaeglinUpgradespawn", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Dunlending", 0, UnitGetOwner(gv_nanLaeglin), PointFromId(798804380));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "PrisonZealot", 0, UnitGetOwner(gv_nanLaeglin), PointFromId(798804380));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(gv_nanLaeglin), "NanLaeglinUpgradespawn", c_techCountCompleteOnly) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dunlending", 0, UnitGetOwner(gv_nanLaeglin), PointFromId(798804380));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrisonZealot", 0, UnitGetOwner(gv_nanLaeglin), PointFromId(798804380));
                }

            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NanLaeglin_Init () {
    gt_NanLaeglin = TriggerCreate("gt_NanLaeglin_Func");
    TriggerAddEventTimePeriodic(gt_NanLaeglin, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Evil Minhiarth
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEvilMinhiarth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Terran3", 0, 0, PointFromId(403054260));
    gv_minhiarthBeacon = UnitLastCreated();
    TriggerEnable(gt_ActivateEvilMinhiarth, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnEvilMinhiarth_Init () {
    gt_SpawnEvilMinhiarth = TriggerCreate("gt_SpawnEvilMinhiarth_Func");
    TriggerAddEventUnitDied(gt_SpawnEvilMinhiarth, UnitRefFromUnit(UnitFromId(1731438873)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Evil Minhiarth
//--------------------------------------------------------------------------------------------------
bool gt_ActivateEvilMinhiarth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD745431F_g;
    int autoD745431F_u;
    unit autoD745431F_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 4500))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "TaurenSpaceMarine") || ((UnitGetType(EventUnit()) == "MengskFirebat"))))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(2)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 4500);
    autoD745431F_g = gv_clearminhiarthcannons;
    autoD745431F_u = UnitGroupCount(autoD745431F_g, c_unitCountAll);
    for (;; autoD745431F_u -= 1) {
        autoD745431F_var = UnitGroupUnitFromEnd(autoD745431F_g, autoD745431F_u);
        if (autoD745431F_var == null) { break; }
        UnitKill(autoD745431F_var);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WolfStatue", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(403054260));
    gv_evilMinhiarth = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(126546973));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(883812481));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(524448400));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(264922068));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(140546881));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(96589848));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(995310823));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1269659443));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1085650173));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(765710798));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(683357694));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(4725980));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/24F7E518"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_minhiarthBeacon);
    TriggerEnable(gt_EvilMinhiarth, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateEvilMinhiarth_Init () {
    gt_ActivateEvilMinhiarth = TriggerCreate("gt_ActivateEvilMinhiarth_Func");
    TriggerEnable(gt_ActivateEvilMinhiarth, false);
    TriggerAddEventUnitBehaviorChange(gt_ActivateEvilMinhiarth, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evil Minhiarth
//--------------------------------------------------------------------------------------------------
bool gt_EvilMinhiarth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(gv_evilMinhiarth) == true) && (PlayerGetPropertyInt(UnitGetOwner(gv_evilMinhiarth), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(gv_evilMinhiarth), c_playerPropSuppliesMade)) && (UnitGetOwner(gv_evilMinhiarth) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(gv_evilMinhiarth), "EvilMinhiarthUpgradespawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(9, "Marine2", 0, UnitGetOwner(gv_evilMinhiarth), PointFromId(1359575571));
            libNtve_gf_CreateUnitsWithDefaultFacing(9, "PrisonZealot", 0, UnitGetOwner(gv_evilMinhiarth), PointFromId(1359575571));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(gv_evilMinhiarth), "EvilMinhiarthUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(6, "Marine2", 0, UnitGetOwner(gv_evilMinhiarth), PointFromId(1359575571));
                libNtve_gf_CreateUnitsWithDefaultFacing(6, "PrisonZealot", 0, UnitGetOwner(gv_evilMinhiarth), PointFromId(1359575571));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(gv_evilMinhiarth), "EvilMinhiarthUpgradespawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Marine2", 0, UnitGetOwner(gv_evilMinhiarth), PointFromId(1359575571));
                    libNtve_gf_CreateUnitsWithDefaultFacing(4, "PrisonZealot", 0, UnitGetOwner(gv_evilMinhiarth), PointFromId(1359575571));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(gv_evilMinhiarth), "EvilMinhiarthUpgradespawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Marine2", 0, UnitGetOwner(gv_evilMinhiarth), PointFromId(1359575571));
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "PrisonZealot", 0, UnitGetOwner(gv_evilMinhiarth), PointFromId(1359575571));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EvilMinhiarth_Init () {
    gt_EvilMinhiarth = TriggerCreate("gt_EvilMinhiarth_Func");
    TriggerEnable(gt_EvilMinhiarth, false);
    TriggerAddEventTimePeriodic(gt_EvilMinhiarth, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Serants Of Mordor Activate
//--------------------------------------------------------------------------------------------------
bool gt_SerantsOfMordorActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1569959845)), "ServantsOfMordor", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_MouthOfSauronSpawning, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SerantsOfMordorActivate_Init () {
    gt_SerantsOfMordorActivate = TriggerCreate("gt_SerantsOfMordorActivate_Func");
    TriggerAddEventUnitResearchProgress(gt_SerantsOfMordorActivate, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mouth Of Sauron Spawning
//--------------------------------------------------------------------------------------------------
bool gt_MouthOfSauronSpawning_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mouthOfSauron;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mouthOfSauron = UnitFromId(155521309);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitIsAlive(lv_mouthOfSauron) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_mouthOfSauron), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_mouthOfSauron), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_mouthOfSauron) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_mouthOfSauron), "UdunUpgradespawn4", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "StalkerShakuras", 0, UnitGetOwner(lv_mouthOfSauron), UnitGetPosition(lv_mouthOfSauron));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_mouthOfSauron), "UdunUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "StalkerShakuras", 0, UnitGetOwner(lv_mouthOfSauron), UnitGetPosition(lv_mouthOfSauron));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_mouthOfSauron), "UdunUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "StalkerShakuras", 0, UnitGetOwner(lv_mouthOfSauron), UnitGetPosition(lv_mouthOfSauron));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_mouthOfSauron), "UdunUpgradespawn", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "StalkerShakuras", 0, UnitGetOwner(lv_mouthOfSauron), UnitGetPosition(lv_mouthOfSauron));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(lv_mouthOfSauron), "UdunUpgradespawn", c_techCountCompleteOnly) == 0)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "StalkerShakuras", 0, UnitGetOwner(lv_mouthOfSauron), UnitGetPosition(lv_mouthOfSauron));
                        }

                    }
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MouthOfSauronSpawning_Init () {
    gt_MouthOfSauronSpawning = TriggerCreate("gt_MouthOfSauronSpawning_Func");
    TriggerEnable(gt_MouthOfSauronSpawning, false);
    TriggerAddEventTimePeriodic(gt_MouthOfSauronSpawning, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Shelob
//--------------------------------------------------------------------------------------------------
bool gt_ActivateShelob_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 7000))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Maar") || ((UnitGetType(EventUnit()) == "Stetmann"))))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(28)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 7000);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Impaler", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(728727036));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/0CE58A7B"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_shelobBeacon);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateShelob_Init () {
    gt_ActivateShelob = TriggerCreate("gt_ActivateShelob_Func");
    TriggerAddEventUnitBehaviorChange(gt_ActivateShelob, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Burn The Gardens
//--------------------------------------------------------------------------------------------------
bool gt_SpawnBurnTheGardens_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "BurnGardensOfEntwives", 0, 0, PointFromId(1048492536));
    gv_burnGardensbeacon = UnitLastCreated();
    TriggerEnable(gt_BurnTheGardens, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnBurnTheGardens_Init () {
    gt_SpawnBurnTheGardens = TriggerCreate("gt_SpawnBurnTheGardens_Func");
    TriggerAddEventUnitDied(gt_SpawnBurnTheGardens, UnitRefFromUnit(UnitFromId(1824510748)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Burn The Gardens
//--------------------------------------------------------------------------------------------------
bool gt_BurnTheGardens_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 1500))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Maar")))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(27)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 1500);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "InfestedAbomination", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1048492536));
    libNtve_gf_CreateUnitsWithDefaultFacing(15, "StukovInfestedTerran", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1048492536));
    libNtve_gf_CreateUnitsWithDefaultFacing(15, "Zergling", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1048492536));
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionFromId(26), null, c_animNameDefault, "Death", 0, c_animTimeDefault);
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(26), null);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/ED833EC6"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_burnGardensbeacon);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BurnTheGardens_Init () {
    gt_BurnTheGardens = TriggerCreate("gt_BurnTheGardens_Func");
    TriggerEnable(gt_BurnTheGardens, false);
    TriggerAddEventUnitBehaviorChange(gt_BurnTheGardens, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Establish Angmar
//--------------------------------------------------------------------------------------------------
bool gt_EstablishAngmar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1492802972)), "EstablishAngmar", c_techCountCompleteOnly) == 1)) {
        UnitSetOwner(UnitFromId(1492802972), gv_itemMordor, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/9276BE54"));
        SoundPlayForPlayer(SoundLink("BattleShoutAngmar", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(UnitFromId(682814818)), "EstablishAngmar", 1);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1492802972)), "FrozenPlainsUpgradespawn", c_techCountCompleteOnly) == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(UnitFromId(682814818)), "FrozenPlainsUpgradespawn", 1);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1492802972)), "FrozenPlainsUpgradespawn2", c_techCountCompleteOnly) == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(UnitFromId(682814818)), "FrozenPlainsUpgradespawn2", 1);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1492802972)), "FrozenPlainsUpgradespawn3", c_techCountCompleteOnly) == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(UnitFromId(682814818)), "FrozenPlainsUpgradespawn3", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EstablishAngmar_Init () {
    gt_EstablishAngmar = TriggerCreate("gt_EstablishAngmar_Func");
    TriggerAddEventUnitResearchProgress(gt_EstablishAngmar, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Carn Dum
//--------------------------------------------------------------------------------------------------
bool gt_ActivateCarnDum_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 7500))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Maar") || ((UnitGetType(EventUnit()) == "AlarakChampion"))))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(25)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 7500);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "LurkerDenMP", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1999312289));
    gv_carnDum = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(499825752));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(346240134));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(820982575));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(906323731));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(721977737));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1838305450));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(2106486983));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1167389929));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1873135532));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1641041900));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(2062187732));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(251796454));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(843371542));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1705377733));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(608179734));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(2109618509));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(43446436));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/982152B1"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_carnDumBeacon);
    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(UnitFromId(1492802972)), "CarnDumIsEstablished", 1);
    TriggerEnable(gt_CarnDum, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateCarnDum_Init () {
    gt_ActivateCarnDum = TriggerCreate("gt_ActivateCarnDum_Func");
    TriggerAddEventUnitBehaviorChange(gt_ActivateCarnDum, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Carn Dum
//--------------------------------------------------------------------------------------------------
bool gt_CarnDum_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_carnDum;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_carnDum = gv_carnDum;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_carnDum) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_carnDum), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_carnDum), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_carnDum) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_carnDum), "CarnDumUpgradespawn4", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Hydralisk", 0, UnitGetOwner(lv_carnDum), PointFromId(1068435577));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "HydraliskImpaler", 0, UnitGetOwner(lv_carnDum), PointFromId(1068435577));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "StukovInfestedTerran", 0, UnitGetOwner(lv_carnDum), PointFromId(1068435577));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "HighTemplarTaldarim", 0, UnitGetOwner(lv_carnDum), PointFromId(1068435577));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ImmortalTaldarim", 0, UnitGetOwner(lv_carnDum), PointFromId(1068435577));
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "Zergling", 0, UnitGetOwner(lv_carnDum), PointFromId(1068435577));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_carnDum), "CarnDumUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Hydralisk", 0, UnitGetOwner(lv_carnDum), PointFromId(1068435577));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "HydraliskImpaler", 0, UnitGetOwner(lv_carnDum), PointFromId(1068435577));
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "StukovInfestedTerran", 0, UnitGetOwner(lv_carnDum), PointFromId(1068435577));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "HighTemplarTaldarim", 0, UnitGetOwner(lv_carnDum), PointFromId(1068435577));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ImmortalTaldarim", 0, UnitGetOwner(lv_carnDum), PointFromId(1068435577));
                libNtve_gf_CreateUnitsWithDefaultFacing(6, "Zergling", 0, UnitGetOwner(lv_carnDum), PointFromId(1068435577));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_carnDum), "CarnDumUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, UnitGetOwner(lv_carnDum), PointFromId(1068435577));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HydraliskImpaler", 0, UnitGetOwner(lv_carnDum), PointFromId(1068435577));
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "StukovInfestedTerran", 0, UnitGetOwner(lv_carnDum), PointFromId(1068435577));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HighTemplarTaldarim", 0, UnitGetOwner(lv_carnDum), PointFromId(1068435577));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ImmortalTaldarim", 0, UnitGetOwner(lv_carnDum), PointFromId(1068435577));
                    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Zergling", 0, UnitGetOwner(lv_carnDum), PointFromId(1068435577));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_carnDum), "CarnDumUpgradespawn", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(3, "StukovInfestedTerran", 0, UnitGetOwner(lv_carnDum), PointFromId(1068435577));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HighTemplarTaldarim", 0, UnitGetOwner(lv_carnDum), PointFromId(1068435577));
                        libNtve_gf_CreateUnitsWithDefaultFacing(5, "Zergling", 0, UnitGetOwner(lv_carnDum), PointFromId(1068435577));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(315361432)), "CarnDumUpgradespawn", c_techCountCompleteOnly) == 0)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(2, "StukovInfestedTerran", 0, UnitGetOwner(lv_carnDum), PointFromId(1068435577));
                            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Zergling", 0, UnitGetOwner(lv_carnDum), PointFromId(1068435577));
                        }

                    }
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CarnDum_Init () {
    gt_CarnDum = TriggerCreate("gt_CarnDum_Func");
    TriggerEnable(gt_CarnDum, false);
    TriggerAddEventTimePeriodic(gt_CarnDum, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Empower Sauron
//--------------------------------------------------------------------------------------------------
bool gt_EmpowerSauron_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_minasMorgul;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minasMorgul = UnitFromId(315361432);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_minasMorgul), "EmpowerSauron", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_minasMorgul))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/52C0E721"));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EmpowerSauron_Init () {
    gt_EmpowerSauron = TriggerCreate("gt_EmpowerSauron_Func");
    TriggerAddEventUnitResearchProgress(gt_EmpowerSauron, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Empower Witch King
//--------------------------------------------------------------------------------------------------
bool gt_EmpowerWitchKing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_minasMorgul;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minasMorgul = UnitFromId(315361432);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_minasMorgul), "EmpowerWitchKing", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_minasMorgul))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/C6B01EEC"));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EmpowerWitchKing_Init () {
    gt_EmpowerWitchKing = TriggerCreate("gt_EmpowerWitchKing_Func");
    TriggerAddEventUnitResearchProgress(gt_EmpowerWitchKing, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Uvartha
//--------------------------------------------------------------------------------------------------
bool gt_Uvartha_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_minasMorgul;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minasMorgul = UnitFromId(315361432);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_minasMorgul), "UvarthaTheBlackHorseman", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_minasMorgul))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidRayTaldarim", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(784783942));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E8875612"));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Uvartha_Init () {
    gt_Uvartha = TriggerCreate("gt_Uvartha_Func");
    TriggerAddEventUnitResearchProgress(gt_Uvartha, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amon lanc destroyed
//--------------------------------------------------------------------------------------------------
bool gt_Amonlancdestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(1569959845)) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanalCreeper", 0, UnitGetOwner(UnitFromId(1569959845)), PointFromId(757102162));
        gv_greenwoodcorruption = UnitLastCreated();
        TriggerEnable(gt_Amonlanccorruption, true);
        TriggerEnable(gt_Udundestroyed, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Amonlancdestroyed_Init () {
    gt_Amonlancdestroyed = TriggerCreate("gt_Amonlancdestroyed_Func");
    TriggerAddEventUnitDied(gt_Amonlancdestroyed, UnitRefFromUnit(UnitFromId(969977804)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amon lanc corruption
//--------------------------------------------------------------------------------------------------
bool gt_Amonlanccorruption_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(gv_greenwoodcorruption) == true) && (PlayerGetPropertyInt(UnitGetOwner(gv_greenwoodcorruption), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(gv_greenwoodcorruption), c_playerPropSuppliesMade)) && (UnitGetOwner(gv_greenwoodcorruption) != 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, UnitGetOwner(gv_greenwoodcorruption), PointFromId(864034612));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "StukovInfestedTerran", 0, UnitGetOwner(gv_greenwoodcorruption), PointFromId(864034612));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Amonlanccorruption_Init () {
    gt_Amonlanccorruption = TriggerCreate("gt_Amonlanccorruption_Func");
    TriggerEnable(gt_Amonlanccorruption, false);
    TriggerAddEventTimePeriodic(gt_Amonlanccorruption, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Udun destroyed
//--------------------------------------------------------------------------------------------------
bool gt_Udundestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(gv_greenwoodcorruption, "Invulnerable", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Udundestroyed_Init () {
    gt_Udundestroyed = TriggerCreate("gt_Udundestroyed_Func");
    TriggerEnable(gt_Udundestroyed, false);
    TriggerAddEventUnitDied(gt_Udundestroyed, UnitRefFromUnit(UnitFromId(1569959845)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Dol Guldur
//--------------------------------------------------------------------------------------------------
bool gt_ActivateDolGuldur_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8B927A4E_g;
    int auto8B927A4E_u;
    unit auto8B927A4E_var;

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(gv_greenwoodcorruption), "ErectTheFortressOfDolGuldur", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(gv_greenwoodcorruption))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(gv_greenwoodcorruption);
    auto8B927A4E_g = gv_clearAmonLancCannons;
    auto8B927A4E_u = UnitGroupCount(auto8B927A4E_g, c_unitCountAll);
    for (;; auto8B927A4E_u -= 1) {
        auto8B927A4E_var = UnitGroupUnitFromEnd(auto8B927A4E_g, auto8B927A4E_u);
        if (auto8B927A4E_var == null) { break; }
        UnitKill(auto8B927A4E_var);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DolGuldur", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(757102162));
    gv_dolGuldur = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(180004248));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1793376128));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1045300360));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(834050226));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1987264678));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(420209475));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(47638799));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(668666593));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(386781637));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(282503606));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1829090646));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(338295370));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepGen7", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1788186824));
    gv_creep1 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepGen7", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(956091534));
    gv_creep2 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepGen7", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1741977617));
    gv_creep3 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepGen7", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(233628812));
    gv_creep4 = UnitLastCreated();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/7E2E6F5F"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    TriggerEnable(gt_DolGuldur, true);
    TriggerEnable(gt_Udundestroyed2, true);
    TriggerEnable(gt_Dolguldurdestroyed, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateDolGuldur_Init () {
    gt_ActivateDolGuldur = TriggerCreate("gt_ActivateDolGuldur_Func");
    TriggerAddEventUnitResearchProgress(gt_ActivateDolGuldur, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dol Guldur
//--------------------------------------------------------------------------------------------------
bool gt_DolGuldur_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(gv_dolGuldur) == true) && (PlayerGetPropertyInt(UnitGetOwner(gv_dolGuldur), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(gv_dolGuldur), c_playerPropSuppliesMade)) && (UnitGetOwner(gv_dolGuldur) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(gv_dolGuldur), "DolGuldurUpgradespawn2", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "Broodling", 0, UnitGetOwner(gv_dolGuldur), PointFromId(864034612));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "KerriganInfestBroodling", 0, UnitGetOwner(gv_dolGuldur), PointFromId(864034612));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", 0, UnitGetOwner(gv_dolGuldur), PointFromId(864034612));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "StukovInfestedTerran", 0, UnitGetOwner(gv_dolGuldur), PointFromId(864034612));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(gv_dolGuldur), "DolGuldurUpgradespawn", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Broodling", 0, UnitGetOwner(gv_dolGuldur), PointFromId(864034612));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "KerriganInfestBroodling", 0, UnitGetOwner(gv_dolGuldur), PointFromId(864034612));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", 0, UnitGetOwner(gv_dolGuldur), PointFromId(864034612));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "StukovInfestedTerran", 0, UnitGetOwner(gv_dolGuldur), PointFromId(864034612));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(gv_dolGuldur), "DolGuldurUpgradespawn", c_techCountCompleteOnly) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", 0, UnitGetOwner(gv_dolGuldur), PointFromId(864034612));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "StukovInfestedTerran", 0, UnitGetOwner(gv_dolGuldur), PointFromId(864034612));
                }

            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DolGuldur_Init () {
    gt_DolGuldur = TriggerCreate("gt_DolGuldur_Func");
    TriggerEnable(gt_DolGuldur, false);
    TriggerAddEventTimePeriodic(gt_DolGuldur, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Udun destroyed 2
//--------------------------------------------------------------------------------------------------
bool gt_Udundestroyed2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(gv_dolGuldur, "Invulnerable", 1);
    UnitBehaviorRemove(gv_dolGuldur, "Invulnerable2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Udundestroyed2_Init () {
    gt_Udundestroyed2 = TriggerCreate("gt_Udundestroyed2_Func");
    TriggerEnable(gt_Udundestroyed2, false);
    TriggerAddEventUnitDied(gt_Udundestroyed2, UnitRefFromUnit(UnitFromId(1569959845)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dol guldur destroyed
//--------------------------------------------------------------------------------------------------
bool gt_Dolguldurdestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(gv_creep1);
    UnitKill(gv_creep2);
    UnitKill(gv_creep3);
    UnitKill(gv_creep4);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Dolguldurdestroyed_Init () {
    gt_Dolguldurdestroyed = TriggerCreate("gt_Dolguldurdestroyed_Func");
    TriggerEnable(gt_Dolguldurdestroyed, false);
    TriggerAddEventUnitDied(gt_Dolguldurdestroyed, UnitRefFromVariable("gv_dolGuldur"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warlord Of The Southron's
//--------------------------------------------------------------------------------------------------
bool gt_WarlordOfTheSouthrons_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_southron;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_southron = UnitFromId(1767098372);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(1767098372)), "WarlordOfTheSouthrons", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MarineWarfield", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1062406593));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/8E5669B6"));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarlordOfTheSouthrons_Init () {
    gt_WarlordOfTheSouthrons = TriggerCreate("gt_WarlordOfTheSouthrons_Func");
    TriggerAddEventUnitResearchProgress(gt_WarlordOfTheSouthrons, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Call The South
//--------------------------------------------------------------------------------------------------
bool gt_CallTheSouth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_southronEncampment;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_southronEncampment = UnitFromId(1767098372);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_southronEncampment), "TheCallingOfTheSouth", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!((EventPlayer() == UnitGetOwner(lv_southronEncampment)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/835D14C1"));
    TimerStart(gv_callSouthTimer, 300.0, false, c_timeGame);
    TimerWindowCreate(gv_callSouthTimer, StringExternal("Param/Value/CDE986D2"), false, false);
    gv_callSouthTimerwindow = TimerWindowLastCreated();
    TimerWindowSetStyle(gv_callSouthTimerwindow, c_timerWindowStyleHorizontalTitleTime, false);
    TimerWindowShow(gv_callSouthTimerwindow, PlayerGroupAll(), true);
    TimerWindowShowBorder(gv_callSouthTimerwindow, true);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(300.0, c_timeGame);
    TimerWindowDestroy(gv_callSouthTimerwindow);
    if ((UnitIsAlive(UnitFromId(1767098372)) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(20, "DarkTemplarShakuras", c_unitCreateIgnorePlacement, UnitGetOwner(gv_southronEncampment), PointFromId(1062406593));
        libNtve_gf_CreateUnitsWithDefaultFacing(15, "StalkerPurifier", c_unitCreateIgnorePlacement, UnitGetOwner(gv_southronEncampment), PointFromId(1062406593));
        libNtve_gf_CreateUnitsWithDefaultFacing(5, "MengskHellion", c_unitCreateIgnorePlacement, UnitGetOwner(gv_southronEncampment), PointFromId(1062406593));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HotSNoxious", c_unitCreateIgnorePlacement, UnitGetOwner(gv_southronEncampment), PointFromId(1062406593));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1890047186));
        libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
        UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1886793686));
        libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
        UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(499508725));
        libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
        UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1157295476));
        libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
        UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1555414194));
        libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
        UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1167303586));
        libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
        UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(22990520));
        libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
        UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1460980316));
        libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
        UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(909386346));
        libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
        UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(584172854));
        libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
        UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
        SoundPlayForPlayer(SoundLink("MumuHorn", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(UnitFromId(1767098372)), "CallTheSouthVictory", 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/EE79C5D5"));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D0F85BC6"));
        libNtve_gf_CreateUnitsWithDefaultFacing(3, "MengskHellion", c_unitCreateIgnorePlacement, UnitGetOwner(gv_southronEncampment), PointFromId(1062406593));
        libNtve_gf_CreateUnitsWithDefaultFacing(3, "DarkTemplarShakuras", c_unitCreateIgnorePlacement, UnitGetOwner(gv_southronEncampment), PointFromId(1062406593));
        libNtve_gf_CreateUnitsWithDefaultFacing(3, "StalkerPurifier", c_unitCreateIgnorePlacement, UnitGetOwner(gv_southronEncampment), PointFromId(1062406593));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CallTheSouth_Init () {
    gt_CallTheSouth = TriggerCreate("gt_CallTheSouth_Func");
    TriggerAddEventUnitResearchProgress(gt_CallTheSouth, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Corsair Lord
//--------------------------------------------------------------------------------------------------
bool gt_CorsairLord_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_gladdenCamp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_gladdenCamp = gv_gladdenCamp;

    // Conditions
    if (testConds) {
        if (!(((TechTreeUpgradeCount(UnitGetOwner(gv_corsairPelargir), "CorsairLord", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(gv_corsairLefnui), "CorsairLord", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(lv_gladdenCamp), "MarquilLeaderOfTheNorthmen", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(lv_gladdenCamp), "MarquilLeaderOfTheNorthmen", c_techCountCompleteOnly) == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == gv_corsairPelargir)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhoenixAiur", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(108884082));
    }
    else {
        if ((EventUnit() == gv_corsairLefnui)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhoenixAiur", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(355228888));
        }

    }
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/2B6250B1"));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CorsairLord_Init () {
    gt_CorsairLord = TriggerCreate("gt_CorsairLord_Func");
    TriggerAddEventUnitResearchProgress(gt_CorsairLord, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable Corsair Pelargir
//--------------------------------------------------------------------------------------------------
bool gt_EnableCorsairPelargir_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(UnitFromId(1767098372)), "PelargirDestroyed", 1);
    TriggerEnable(gt_ActivateCorsairPelargirSpawn, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableCorsairPelargir_Init () {
    gt_EnableCorsairPelargir = TriggerCreate("gt_EnableCorsairPelargir_Func");
    TriggerAddEventUnitDied(gt_EnableCorsairPelargir, UnitRefFromUnit(UnitFromId(989327831)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Corsair Pelargir (Spawn )
//--------------------------------------------------------------------------------------------------
bool gt_ActivateCorsairPelargirSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_southronEncampment;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_southronEncampment = UnitFromId(1767098372);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_southronEncampment), "CorsairEncampmentPelargir", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_southronEncampment))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ColonistShipFlying", c_unitCreateIgnorePlacement, 0, PointFromId(659258051));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1388273972)), c_orderQueueReplace);
    gv_corsairPelargir = UnitLastCreated();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/EFFCE63D"));
    TriggerEnable(gt_ActivateCorsairPelargirship, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateCorsairPelargirSpawn_Init () {
    gt_ActivateCorsairPelargirSpawn = TriggerCreate("gt_ActivateCorsairPelargirSpawn_Func");
    TriggerEnable(gt_ActivateCorsairPelargirSpawn, false);
    TriggerAddEventUnitResearchProgress(gt_ActivateCorsairPelargirSpawn, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Corsair Pelargir (ship)
//--------------------------------------------------------------------------------------------------
bool gt_ActivateCorsairPelargirship_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoEF1CB4CD_g;
    int autoEF1CB4CD_u;
    unit autoEF1CB4CD_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ColonistShipFlying"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoEF1CB4CD_g = gv_clearPelargir;
    autoEF1CB4CD_u = UnitGroupCount(autoEF1CB4CD_g, c_unitCountAll);
    for (;; autoEF1CB4CD_u -= 1) {
        autoEF1CB4CD_var = UnitGroupUnitFromEnd(autoEF1CB4CD_g, autoEF1CB4CD_u);
        if (autoEF1CB4CD_var == null) { break; }
        UnitKill(autoEF1CB4CD_var);
    }
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), PointFromId(1388273972)), c_orderQueueAddToEnd);
    UnitWaitUntilIdle(EventUnit(), true);
    SoundPlayForPlayer(SoundLink("Corsairsfromthesouth", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/8247E323"));
    libNtve_gf_RescueUnit(EventUnit(), UnitGetOwner(UnitFromId(1767098372)), true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1477829046));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1365567894));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1230992747));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1854715042));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(156849931));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(837481181));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(467125034));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1508321873));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(374871203));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(216886205));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(501506536));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1362819777));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1262301187));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(18071159));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    TriggerEnable(gt_CorsairPelargir, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateCorsairPelargirship_Init () {
    gt_ActivateCorsairPelargirship = TriggerCreate("gt_ActivateCorsairPelargirship_Func");
    TriggerEnable(gt_ActivateCorsairPelargirship, false);
    TriggerAddEventUnitRegion(gt_ActivateCorsairPelargirship, null, RegionFromId(40), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Corsair Pelargir
//--------------------------------------------------------------------------------------------------
bool gt_CorsairPelargir_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawner;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawner = gv_corsairPelargir;
    lv_point = PointFromId(108884082);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_spawner) == true))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesMade)))) {
            return false;
        }

        if (!((UnitGetOwner(lv_spawner) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    gf_Createunit(1, "StalkerPurifier", lv_spawner, lv_point);
    gf_Createunit(2, "DarkTemplarShakuras", lv_spawner, lv_point);
    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "CorsairEncampmentUpgradespawn2", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "CorsairMP", lv_spawner, lv_point);
        gf_Createunit(2, "DarkTemplarShakuras", lv_spawner, lv_point);
        gf_Createunit(2, "StalkerPurifier", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "CorsairEncampmentUpgradespawn", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "MengskHellion", lv_spawner, lv_point);
        gf_Createunit(2, "StalkerPurifier", lv_spawner, lv_point);
        gf_Createunit(2, "DarkTemplarShakuras", lv_spawner, lv_point);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CorsairPelargir_Init () {
    gt_CorsairPelargir = TriggerCreate("gt_CorsairPelargir_Func");
    TriggerEnable(gt_CorsairPelargir, false);
    TriggerAddEventTimePeriodic(gt_CorsairPelargir, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable Corsair Lefnui
//--------------------------------------------------------------------------------------------------
bool gt_EnableCorsairLefnui_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(UnitFromId(1767098372)), "LefnuiDestroyed", 1);
    TriggerEnable(gt_ActivateCorsairLefnuiSpawn, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableCorsairLefnui_Init () {
    gt_EnableCorsairLefnui = TriggerCreate("gt_EnableCorsairLefnui_Func");
    TriggerAddEventUnitDied(gt_EnableCorsairLefnui, UnitRefFromUnit(UnitFromId(490175528)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Corsair Lefnui (Spawn )
//--------------------------------------------------------------------------------------------------
bool gt_ActivateCorsairLefnuiSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_southronEncampment;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_southronEncampment = UnitFromId(1767098372);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_southronEncampment), "CorsairEncampmentLefnui", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_southronEncampment))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CorsairEncampmentLefnui2", c_unitCreateIgnorePlacement, 0, PointFromId(2139553930));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1011198778)), c_orderQueueReplace);
    gv_corsairLefnui = UnitLastCreated();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F8E6A0D2"));
    TriggerEnable(gt_ActivateCorsairLefnuiship, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateCorsairLefnuiSpawn_Init () {
    gt_ActivateCorsairLefnuiSpawn = TriggerCreate("gt_ActivateCorsairLefnuiSpawn_Func");
    TriggerEnable(gt_ActivateCorsairLefnuiSpawn, false);
    TriggerAddEventUnitResearchProgress(gt_ActivateCorsairLefnuiSpawn, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Corsair Lefnui (ship)
//--------------------------------------------------------------------------------------------------
bool gt_ActivateCorsairLefnuiship_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8AC4B127_g;
    int auto8AC4B127_u;
    unit auto8AC4B127_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CorsairEncampmentLefnui2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8AC4B127_g = gv_clearEvilLefnuiCannons;
    auto8AC4B127_u = UnitGroupCount(auto8AC4B127_g, c_unitCountAll);
    for (;; auto8AC4B127_u -= 1) {
        auto8AC4B127_var = UnitGroupUnitFromEnd(auto8AC4B127_g, auto8AC4B127_u);
        if (auto8AC4B127_var == null) { break; }
        UnitKill(auto8AC4B127_var);
    }
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("ColonistShipLand2", 0), PointFromId(1011198778)), c_orderQueueAddToEnd);
    UnitWaitUntilIdle(EventUnit(), true);
    SoundPlayForPlayer(SoundLink("Corsairsfromthesouth", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/C9C25E85"));
    libNtve_gf_RescueUnit(EventUnit(), UnitGetOwner(UnitFromId(1767098372)), true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(990322349));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(693971517));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(509885271));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1042158364));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1705305597));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1309308891));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(142277305));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1529813071));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(21364294));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1352486523));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1104908270));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1565365154));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(2120833854));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(665730604));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    TriggerEnable(gt_CorsairLefnui, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateCorsairLefnuiship_Init () {
    gt_ActivateCorsairLefnuiship = TriggerCreate("gt_ActivateCorsairLefnuiship_Func");
    TriggerEnable(gt_ActivateCorsairLefnuiship, false);
    TriggerAddEventUnitRegion(gt_ActivateCorsairLefnuiship, null, RegionFromId(42), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Corsair Lefnui
//--------------------------------------------------------------------------------------------------
bool gt_CorsairLefnui_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawner;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawner = gv_corsairLefnui;
    lv_point = PointFromId(355228888);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_spawner) == true))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_spawner), c_playerPropSuppliesMade)))) {
            return false;
        }

        if (!((UnitGetOwner(lv_spawner) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    gf_Createunit(1, "StalkerPurifier", lv_spawner, lv_point);
    gf_Createunit(2, "DarkTemplarShakuras", lv_spawner, lv_point);
    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "CorsairEncampmentUpgradespawn2", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "CorsairMP", lv_spawner, lv_point);
        gf_Createunit(2, "DarkTemplarShakuras", lv_spawner, lv_point);
        gf_Createunit(2, "StalkerPurifier", lv_spawner, lv_point);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_spawner), "CorsairEncampmentUpgradespawn", c_techCountCompleteOnly) == 1)) {
        gf_Createunit(1, "MengskHellion", lv_spawner, lv_point);
        gf_Createunit(2, "StalkerPurifier", lv_spawner, lv_point);
        gf_Createunit(2, "DarkTemplarShakuras", lv_spawner, lv_point);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CorsairLefnui_Init () {
    gt_CorsairLefnui = TriggerCreate("gt_CorsairLefnui_Func");
    TriggerEnable(gt_CorsairLefnui, false);
    TriggerAddEventTimePeriodic(gt_CorsairLefnui, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Morgomir
//--------------------------------------------------------------------------------------------------
bool gt_Morgomir_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_rhovanionm;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rhovanionm = UnitFromId(418557182);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_rhovanionm), "SummonMorgomir", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_rhovanionm))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridReaver", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(941355735));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/87580C6F"));
    TriggerEnable(gt_deathresponsemorgomir, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Morgomir_Init () {
    gt_Morgomir = TriggerCreate("gt_Morgomir_Func");
    TriggerAddEventUnitResearchProgress(gt_Morgomir, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shatter Morgomir
//--------------------------------------------------------------------------------------------------
bool gt_ShatterMorgomir_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_rhovanionm;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rhovanionm = UnitFromId(418557182);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_rhovanionm), "TearMorgomirAsunder", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_rhovanionm))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/B9DBB375"));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShatterMorgomir_Init () {
    gt_ShatterMorgomir = TriggerCreate("gt_ShatterMorgomir_Func");
    TriggerAddEventUnitResearchProgress(gt_ShatterMorgomir, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rally The Easterlings
//--------------------------------------------------------------------------------------------------
bool gt_RallyTheEasterlings_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_rhovanionm;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rhovanionm = UnitFromId(418557182);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_rhovanionm), "RallyTheEasterlings", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_rhovanionm))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/3EAED3C4"));
    TriggerEnable(gt_Rallyeasterlings, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RallyTheEasterlings_Init () {
    gt_RallyTheEasterlings = TriggerCreate("gt_RallyTheEasterlings_Func");
    TriggerAddEventUnitResearchProgress(gt_RallyTheEasterlings, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rally easterlings
//--------------------------------------------------------------------------------------------------
bool gt_Rallyeasterlings_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_rhovanion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rhovanion = UnitFromId(418557182);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(UnitFromId(418557182)) == true) && (PlayerGetPropertyInt(UnitGetOwner(UnitFromId(418557182)), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(UnitFromId(418557182)), c_playerPropSuppliesMade)) && (UnitGetOwner(UnitFromId(418557182)) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_rhovanion), "RallyEasterlings32", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ColossusTaldarim", 0, UnitGetOwner(lv_rhovanion), PointFromId(1981699198));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "HighTemplarTaldarim", 0, UnitGetOwner(lv_rhovanion), PointFromId(1981699198));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotShakuras", 0, UnitGetOwner(lv_rhovanion), PointFromId(1981699198));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ImmortalTaldarim", 0, UnitGetOwner(lv_rhovanion), PointFromId(1981699198));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Goliath", 0, UnitGetOwner(lv_rhovanion), PointFromId(1981699198));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "DarkTemplarTaldarim", 0, UnitGetOwner(lv_rhovanion), PointFromId(1981699198));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MengskMarine", 0, UnitGetOwner(lv_rhovanion), PointFromId(1981699198));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_rhovanion), "RallyEasterlings3", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "HighTemplarTaldarim", 0, UnitGetOwner(lv_rhovanion), PointFromId(1981699198));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotShakuras", 0, UnitGetOwner(lv_rhovanion), PointFromId(1981699198));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ImmortalTaldarim", 0, UnitGetOwner(lv_rhovanion), PointFromId(1981699198));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Goliath", 0, UnitGetOwner(lv_rhovanion), PointFromId(1981699198));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "DarkTemplarTaldarim", 0, UnitGetOwner(lv_rhovanion), PointFromId(1981699198));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "MengskMarine", 0, UnitGetOwner(lv_rhovanion), PointFromId(1981699198));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_rhovanion), "RallyEasterlings2", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ImmortalTaldarim", 0, UnitGetOwner(lv_rhovanion), PointFromId(1981699198));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Goliath", 0, UnitGetOwner(lv_rhovanion), PointFromId(1981699198));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "DarkTemplarTaldarim", 0, UnitGetOwner(lv_rhovanion), PointFromId(1981699198));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MengskMarine", 0, UnitGetOwner(lv_rhovanion), PointFromId(1981699198));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_rhovanion), "RallyEasterlings", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Goliath", 0, UnitGetOwner(lv_rhovanion), PointFromId(1981699198));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DarkTemplarTaldarim", 0, UnitGetOwner(lv_rhovanion), PointFromId(1981699198));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MengskMarine", 0, UnitGetOwner(lv_rhovanion), PointFromId(1981699198));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Rallyeasterlings_Init () {
    gt_Rallyeasterlings = TriggerCreate("gt_Rallyeasterlings_Func");
    TriggerEnable(gt_Rallyeasterlings, false);
    TriggerAddEventTimePeriodic(gt_Rallyeasterlings, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Corsair invasion
//--------------------------------------------------------------------------------------------------
bool gt_ActivateCorsairinvasion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(gv_southronEncampment), "CorsairInvasion", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(gv_southronEncampment))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("BlackShipsinvasion", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(15.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "CorsairMP", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(534994426));
    libNtve_gf_CreateUnitsWithDefaultFacing(8, "DarkTemplarShakuras", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(534994426));
    libNtve_gf_CreateUnitsWithDefaultFacing(8, "StalkerPurifier", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(534994426));
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "CorsairMP", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1406481435));
    libNtve_gf_CreateUnitsWithDefaultFacing(8, "DarkTemplarShakuras", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1406481435));
    libNtve_gf_CreateUnitsWithDefaultFacing(8, "StalkerPurifier", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1406481435));
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "CorsairMP", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1087636379));
    libNtve_gf_CreateUnitsWithDefaultFacing(8, "DarkTemplarShakuras", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1087636379));
    libNtve_gf_CreateUnitsWithDefaultFacing(8, "StalkerPurifier", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1087636379));
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "CorsairMP", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1913475396));
    libNtve_gf_CreateUnitsWithDefaultFacing(8, "DarkTemplarShakuras", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1913475396));
    libNtve_gf_CreateUnitsWithDefaultFacing(8, "StalkerPurifier", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1913475396));
    libNtve_gf_CreateUnitsWithDefaultFacing(2, "CorsairMP", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1910091990));
    libNtve_gf_CreateUnitsWithDefaultFacing(8, "DarkTemplarShakuras", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1910091990));
    libNtve_gf_CreateUnitsWithDefaultFacing(8, "StalkerPurifier", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1910091990));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateCorsairinvasion_Init () {
    gt_ActivateCorsairinvasion = TriggerCreate("gt_ActivateCorsairinvasion_Func");
    TriggerAddEventUnitResearchProgress(gt_ActivateCorsairinvasion, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn East Bight
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEastBight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Terran225", 0, 0, PointFromId(292721161));
    gv_eastBightBeacon = UnitLastCreated();
    TriggerEnable(gt_ActivateEastBight, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnEastBight_Init () {
    gt_SpawnEastBight = TriggerCreate("gt_SpawnEastBight_Func");
    TriggerAddEventUnitDied(gt_SpawnEastBight, UnitRefFromUnit(UnitFromId(677747402)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate East Bight
//--------------------------------------------------------------------------------------------------
bool gt_ActivateEastBight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 4500))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Dehaka") || ((UnitGetType(EventUnit()) == "VorazunChampion"))))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(11)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 4500);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AutomatedRefinery", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(292721161));
    gv_eastbight = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1888787909));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(638756684));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(184547956));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(488385681));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(901059768));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(264187406));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(248146043));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1534925683));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1993714012));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1804964158));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1021531235));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1829395456));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/B455E870"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_eastBightBeacon);
    TriggerEnable(gt_EastBight, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateEastBight_Init () {
    gt_ActivateEastBight = TriggerCreate("gt_ActivateEastBight_Func");
    TriggerEnable(gt_ActivateEastBight, false);
    TriggerAddEventUnitBehaviorChange(gt_ActivateEastBight, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: East Bight
//--------------------------------------------------------------------------------------------------
bool gt_EastBight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(gv_eastbight) == true) && (PlayerGetPropertyInt(UnitGetOwner(gv_eastbight), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(gv_eastbight), c_playerPropSuppliesMade)) && (UnitGetOwner(gv_eastbight) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "EastBightUpgradeSpawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "DarkTemplarTaldarim", 0, UnitGetOwner(gv_eastbight), PointFromId(1449511257));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HighTemplarTaldarim", 0, UnitGetOwner(gv_eastbight), PointFromId(1449511257));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ImmortalTaldarim", 0, UnitGetOwner(gv_eastbight), PointFromId(1449511257));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Goliath", 0, UnitGetOwner(gv_eastbight), PointFromId(1449511257));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "MengskMarine", 0, UnitGetOwner(gv_eastbight), PointFromId(1449511257));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "EastBightUpgradeSpawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "DarkTemplarTaldarim", 0, UnitGetOwner(gv_eastbight), PointFromId(1449511257));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ImmortalTaldarim", 0, UnitGetOwner(gv_eastbight), PointFromId(1449511257));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "Goliath", 0, UnitGetOwner(gv_eastbight), PointFromId(1449511257));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "MengskMarine", 0, UnitGetOwner(gv_eastbight), PointFromId(1449511257));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "EastBightUpgradeSpawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Goliath", 0, UnitGetOwner(gv_eastbight), PointFromId(1449511257));
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "MengskMarine", 0, UnitGetOwner(gv_eastbight), PointFromId(1449511257));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "EastBightUpgradeSpawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Goliath", 0, UnitGetOwner(gv_eastbight), PointFromId(1449511257));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MengskMarine", 0, UnitGetOwner(gv_eastbight), PointFromId(1449511257));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EastBight_Init () {
    gt_EastBight = TriggerCreate("gt_EastBight_Func");
    TriggerEnable(gt_EastBight, false);
    TriggerAddEventTimePeriodic(gt_EastBight, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Anduin Camp
//--------------------------------------------------------------------------------------------------
bool gt_SpawnAnduinCamp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(1824510748)) == false))) {
            return false;
        }

        if (!(((UnitIsAlive(UnitFromId(2112326322)) == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AnduinCamp", 0, 0, PointFromId(265788047));
    gv_anduinCampBeacon = UnitLastCreated();
    TriggerEnable(gt_ActivateAnduinCamp, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnAnduinCamp_Init () {
    gt_SpawnAnduinCamp = TriggerCreate("gt_SpawnAnduinCamp_Func");
    TriggerAddEventUnitDied(gt_SpawnAnduinCamp, UnitRefFromUnit(UnitFromId(1824510748)));
    TriggerAddEventUnitDied(gt_SpawnAnduinCamp, UnitRefFromUnit(UnitFromId(2112326322)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Anduin Camp
//--------------------------------------------------------------------------------------------------
bool gt_ActivateAnduinCamp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 5000))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Dehaka") || ((UnitGetType(EventUnit()) == "Archon"))))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(17)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 5000);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Assimilator", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(265788047));
    gv_anduinCamp = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1275239722));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1257143260));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1710314288));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(855554038));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(6382739));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(76738687));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1516350947));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(226054136));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(2106254746));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(980419440));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(852388966));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1122001903));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(21810166));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(576831912));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1005655098));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(18758327));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/EBF4AC5A"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_anduinCampBeacon);
    TriggerEnable(gt_AnduinCamp, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateAnduinCamp_Init () {
    gt_ActivateAnduinCamp = TriggerCreate("gt_ActivateAnduinCamp_Func");
    TriggerEnable(gt_ActivateAnduinCamp, false);
    TriggerAddEventUnitBehaviorChange(gt_ActivateAnduinCamp, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Anduin Camp
//--------------------------------------------------------------------------------------------------
bool gt_AnduinCamp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_anduinCamp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_anduinCamp = gv_anduinCamp;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_anduinCamp) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_anduinCamp), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_anduinCamp), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_anduinCamp) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_anduinCamp), "AnduinCampUpgradeSpawn3", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Goliath", 0, UnitGetOwner(lv_anduinCamp), PointFromId(58516656));
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "DarkTemplarTaldarim", 0, UnitGetOwner(lv_anduinCamp), PointFromId(58516656));
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "MengskMarine", 0, UnitGetOwner(lv_anduinCamp), PointFromId(58516656));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Predator", 0, UnitGetOwner(lv_anduinCamp), PointFromId(58516656));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_anduinCamp), "AnduinCampUpgradeSpawn2", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "DarkTemplarTaldarim", 0, UnitGetOwner(lv_anduinCamp), PointFromId(58516656));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "MengskMarine", 0, UnitGetOwner(lv_anduinCamp), PointFromId(58516656));
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "Predator", 0, UnitGetOwner(lv_anduinCamp), PointFromId(58516656));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_anduinCamp), "AnduinCampUpgradeSpawn", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DarkTemplarTaldarim", 0, UnitGetOwner(lv_anduinCamp), PointFromId(58516656));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MengskMarine", 0, UnitGetOwner(lv_anduinCamp), PointFromId(58516656));
                    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Predator", 0, UnitGetOwner(lv_anduinCamp), PointFromId(58516656));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_anduinCamp), "AnduinCampUpgradeSpawn", c_techCountCompleteOnly) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DarkTemplarTaldarim", 0, UnitGetOwner(lv_anduinCamp), PointFromId(58516656));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MengskMarine", 0, UnitGetOwner(lv_anduinCamp), PointFromId(58516656));
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AnduinCamp_Init () {
    gt_AnduinCamp = TriggerCreate("gt_AnduinCamp_Func");
    TriggerEnable(gt_AnduinCamp, false);
    TriggerAddEventTimePeriodic(gt_AnduinCamp, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Smaug Beacon
//--------------------------------------------------------------------------------------------------
bool gt_CreateSmaugBeacon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_goblinTown;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_goblinTown = UnitFromId(853024071);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(UnitFromId(2081578249)), "WitheredheathUpgradespawn3", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ActivateSiegeOfErebor, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateSmaugBeacon_Init () {
    gt_CreateSmaugBeacon = TriggerCreate("gt_CreateSmaugBeacon_Func");
    TriggerAddEventUnitResearchProgress(gt_CreateSmaugBeacon, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Siege Of Erebor
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSiegeOfErebor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_ereborCannonCount, c_unitCountAlive) >= 14))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 6000))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Ravager") || (UnitGetType(EventUnit()) == "Terrorzor")))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(43)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 6000);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalMutalisk", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1889723398));
    gv_smaug = UnitLastCreated();
    UnitBehaviorAdd(UnitLastCreated(), "Uncommandable", UnitFromId(1565330970), 1);
    UnitBehaviorAdd(UnitLastCreated(), "SiegeOfErebor", UnitFromId(1565330970), 1);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1490365178)), c_orderQueueReplace);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A5EF247B"));
    SoundPlayForPlayer(SoundLink("Mywingsareahurricane", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_siegeOfEreborBeacon);
    TriggerEnable(gt_SiegeOfErebor, true);
    TriggerEnable(gt_SmaugDeath, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSiegeOfErebor_Init () {
    gt_ActivateSiegeOfErebor = TriggerCreate("gt_ActivateSiegeOfErebor_Func");
    TriggerEnable(gt_ActivateSiegeOfErebor, false);
    TriggerAddEventUnitBehaviorChange(gt_ActivateSiegeOfErebor, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Siege Of Erebor
//--------------------------------------------------------------------------------------------------
bool gt_SiegeOfErebor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(1045690131)) == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/ADBF328D"));
        UnitBehaviorRemove(gv_smaug, "Uncommandable", 1);
        UnitBehaviorRemove(gv_smaug, "SiegeOfErebor", 1);
        UnitSetPosition(gv_smaug, PointFromId(1903119900), false);
        libNtve_gf_RescueUnit(gv_smaug, UnitGetOwner(UnitFromId(2081578249)), true);
        UnitIssueOrder(gv_smaug, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1903119900)), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ereborcaptured", c_unitCreateIgnorePlacement, UnitGetOwner(gv_smaug), PointFromId(523172721));
        gv_ereborcaptured = UnitLastCreated();
        TriggerEnable(gt_RemoveEreborinvulernability, true);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    if ((UnitIsAlive(gv_smaug) == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/9286A4C6"));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(969829135));
        libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(UnitFromId(1045690131)), true);
        UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(2025858361));
        libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(UnitFromId(1045690131)), true);
        UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(185121410));
        libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(UnitFromId(1045690131)), true);
        UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(2055539548));
        libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(UnitFromId(1045690131)), true);
        UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1658658204));
        libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(UnitFromId(1045690131)), true);
        UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(615688538));
        libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(UnitFromId(1045690131)), true);
        UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1690115704));
        libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(UnitFromId(1045690131)), true);
        UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(759655872));
        libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(UnitFromId(1045690131)), true);
        UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(715269206));
        libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(UnitFromId(1045690131)), true);
        UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1095443107));
        libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(UnitFromId(1045690131)), true);
        UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(97599584));
        libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(UnitFromId(1045690131)), true);
        UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(537600940));
        libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(UnitFromId(1045690131)), true);
        UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
        SoundPlayForPlayer(SoundLink("MyTeethareswords", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SiegeOfErebor_Init () {
    gt_SiegeOfErebor = TriggerCreate("gt_SiegeOfErebor_Func");
    TriggerEnable(gt_SiegeOfErebor, false);
    TriggerAddEventUnitDied(gt_SiegeOfErebor, UnitRefFromVariable("gv_smaug"));
    TriggerAddEventUnitDied(gt_SiegeOfErebor, UnitRefFromUnit(UnitFromId(1045690131)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Erebor invulernability
//--------------------------------------------------------------------------------------------------
bool gt_RemoveEreborinvulernability_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(gv_ereborcaptured, "Invulnerable", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveEreborinvulernability_Init () {
    gt_RemoveEreborinvulernability = TriggerCreate("gt_RemoveEreborinvulernability_Func");
    TriggerEnable(gt_RemoveEreborinvulernability, false);
    TriggerAddEventUnitDied(gt_RemoveEreborinvulernability, UnitRefFromVariable("gv_smaug"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bolg
//--------------------------------------------------------------------------------------------------
bool gt_Bolg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mountGram;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mountGram = UnitFromId(1040499259);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_mountGram), "Bolg", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_mountGram))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HotSTorrasque", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(457187521));
    gv_bolg = UnitLastCreated();
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D01B4B52"));
    TriggerEnable(gt_BolgDeath, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Bolg_Init () {
    gt_Bolg = TriggerCreate("gt_Bolg_Func");
    TriggerAddEventUnitResearchProgress(gt_Bolg, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Broggau
//--------------------------------------------------------------------------------------------------
bool gt_Broggau_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_goblinTown;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_goblinTown = UnitFromId(853024071);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_goblinTown), "Broggau", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_goblinTown))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DuskWing", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1845075807));
    gv_broggau = UnitLastCreated();
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/0A251BED"));
    TriggerEnable(gt_BroggauDeath, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Broggau_Init () {
    gt_Broggau = TriggerCreate("gt_Broggau_Func");
    TriggerAddEventUnitResearchProgress(gt_Broggau, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scorba
//--------------------------------------------------------------------------------------------------
bool gt_Scorba_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_scatha;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scatha = gv_scatha;

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(lv_scatha), "Scorba", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((EventPlayer() == UnitGetOwner(lv_scatha))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DevourerMP", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1449564751));
    gv_scorba = UnitLastCreated();
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/733D4C36"));
    TriggerEnable(gt_ScorbaDeath, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scorba_Init () {
    gt_Scorba = TriggerCreate("gt_Scorba_Func");
    TriggerEnable(gt_Scorba, false);
    TriggerAddEventUnitResearchProgress(gt_Scorba, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Scatha
//--------------------------------------------------------------------------------------------------
bool gt_ActivateScatha_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals) >= 8500))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Ravager") || ((UnitGetType(EventUnit()) == "Terrorzor"))))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(13)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSubtract, 8500);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AshWorm2", c_unitCreateIgnorePlacement, EventPlayer(), PointFromId(1556635688));
    gv_scatha = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1954162476));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(854807273));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(867387865));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1301713376));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(98959781));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(2113714004));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(877830136));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(990959901));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(397250024));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 0, PointFromId(1826464542));
    libNtve_gf_RescueUnit(UnitLastCreated(), UnitGetOwner(EventUnit()), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ArtanisStasisField", 0, 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/34CB7E29"));
    SoundPlayForPlayer(SoundLink("Eventtriggering", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    UnitKill(gv_scathaBeacon);
    TriggerEnable(gt_Scatha, true);
    TriggerEnable(gt_Scorba, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateScatha_Init () {
    gt_ActivateScatha = TriggerCreate("gt_ActivateScatha_Func");
    TriggerAddEventUnitBehaviorChange(gt_ActivateScatha, null, "EventCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scatha
//--------------------------------------------------------------------------------------------------
bool gt_Scatha_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_scatha;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scatha = gv_scatha;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((true) && (UnitIsAlive(lv_scatha) == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_scatha), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(UnitGetOwner(lv_scatha), c_playerPropSuppliesMade)) && (UnitGetOwner(lv_scatha) != 0)) {
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_scatha), "WitheredheathUpgradespawn4", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, UnitGetOwner(lv_scatha), PointFromId(1449564751));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "SpaceCowSmall", 0, UnitGetOwner(lv_scatha), PointFromId(1449564751));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "MitosaurusC", 0, UnitGetOwner(lv_scatha), PointFromId(1449564751));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Locust2", 0, UnitGetOwner(lv_scatha), PointFromId(1449564751));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Locust", 0, UnitGetOwner(lv_scatha), PointFromId(1449564751));
        }
        else {
            if ((TechTreeUpgradeCount(UnitGetOwner(lv_scatha), "WitheredheathUpgradespawn3", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "SpaceCowSmall", 0, UnitGetOwner(lv_scatha), PointFromId(1449564751));
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "MitosaurusC", 0, UnitGetOwner(lv_scatha), PointFromId(1449564751));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Locust2", 0, UnitGetOwner(lv_scatha), PointFromId(1449564751));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Locust", 0, UnitGetOwner(lv_scatha), PointFromId(1449564751));
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_scatha), "WitheredheathUpgradespawn2", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpaceCowSmall", 0, UnitGetOwner(lv_scatha), PointFromId(1449564751));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MitosaurusC", 0, UnitGetOwner(lv_scatha), PointFromId(1449564751));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Locust2", 0, UnitGetOwner(lv_scatha), PointFromId(1449564751));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Locust", 0, UnitGetOwner(lv_scatha), PointFromId(1449564751));
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_scatha), "WitheredheathUpgradespawn", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MitosaurusC", 0, UnitGetOwner(lv_scatha), PointFromId(1449564751));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Locust2", 0, UnitGetOwner(lv_scatha), PointFromId(1449564751));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Locust", 0, UnitGetOwner(lv_scatha), PointFromId(1449564751));
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(lv_scatha), "WitheredheathUpgradespawn", c_techCountCompleteOnly) == 0)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Locust2", 0, UnitGetOwner(lv_scatha), PointFromId(1449564751));
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Locust", 0, UnitGetOwner(lv_scatha), PointFromId(1449564751));
                        }

                    }
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scatha_Init () {
    gt_Scatha = TriggerCreate("gt_Scatha_Func");
    TriggerEnable(gt_Scatha, false);
    TriggerAddEventTimePeriodic(gt_Scatha, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_MeleeInitialization_Init();
    gt_InitializationEvents_Init();
    gt_deathresponsemorgomir_Init();
    gt_deathresponsedeprecated_Init();
    gt_LondDaerDeath_Init();
    gt_MinhiriathDeath_Init();
    gt_TharbadDeath_Init();
    gt_BarrowDownsDeath_Init();
    gt_AnnuminasDeath_Init();
    gt_LastBridgeDeath_Init();
    gt_AmonSulDeath_Init();
    gt_OuterRhuadurDeath_Init();
    gt_FornostDeath_Init();
    gt_EvendimDeath_Init();
    gt_KhazaDumDeath_Init();
    gt_EreborDeath_Init();
    gt_IronHillsDeath_Init();
    gt_DaleDeath_Init();
    gt_BlueMountainsDeath_Init();
    gt_GardensOfEntwivesDeath_Init();
    gt_AmonLancDeath_Init();
    gt_GreenwoodDeath_Init();
    gt_GreenwoodHallsDeath_Init();
    gt_LothorienDeath_Init();
    gt_HarlondDeath_Init();
    gt_MithlondDeath_Init();
    gt_DolAmrothDeath_Init();
    gt_ErechDeath_Init();
    gt_PinnathGaelinDeath_Init();
    gt_AnfalasDeath_Init();
    gt_LefnuiDeath_Init();
    gt_OrthancDeath_Init();
    gt_OsgiliathDeath_Init();
    gt_PelargirDeath_Init();
    gt_MinasAnorDeath_Init();
    gt_LamedonDeath_Init();
    gt_DorEnErnilDeath_Init();
    gt_FreePeopleOfDorwinionDeath_Init();
    gt_HoardDaleDeath_Init();
    gt_TrollshawsDeath_Init();
    gt_DunlandDeath_Init();
    gt_NorthEnedwaithDeath_Init();
    gt_SouthEnedwaithDeath_Init();
    gt_DruwaithDeath_Init();
    gt_DunharrowDeath_Init();
    gt_WitheredHeathdeath_Init();
    gt_GoblinTownDeath_Init();
    gt_MountGundabadDeath_Init();
    gt_EttenmoorsDeath_Init();
    gt_FrozenplainsDeath_Init();
    gt_MountGramDeath_Init();
    gt_BaradDurDeath_Init();
    gt_UdunDeath_Init();
    gt_NurnDeath_Init();
    gt_CirthNurnDeath_Init();
    gt_MinasMorgulDeath_Init();
    gt_SouthronEncampmentDeath_Init();
    gt_RhunDeath_Init();
    gt_RhovanionDeath_Init();
    gt_DorwinionDeath_Init();
    gt_CarnenDeath_Init();
    gt_EsgarothDeath_Init();
    gt_MouthOfSauron_Init();
    gt_Sauron_Init();
    gt_WitchKing_Init();
    gt_GreatBeast_Init();
    gt_Khamul_Init();
    gt_KingOfDorwinion_Init();
    gt_QueenOfRhovanion_Init();
    gt_BlackSerpent_Init();
    gt_Mootlord_Init();
    gt_CommanderOfHoardale_Init();
    gt_Adunabeth_Init();
    gt_ChieftainOfDunland_Init();
    gt_Drogoth_Init();
    gt_Urgost_Init();
    gt_GreatGoblin_Init();
    gt_Azog_Init();
    gt_LieutenantOfHoarddaleDeath_Init();
    gt_ScorbaDeath_Init();
    gt_BroggauDeath_Init();
    gt_BolgDeath_Init();
    gt_SmaugDeath_Init();
    gt_MorgothDeath_Init();
    gt_Isildur_Init();
    gt_Anarion_Init();
    gt_Cemendur_Init();
    gt_Meneldil_Init();
    gt_Elendur_Init();
    gt_Ciryon_Init();
    gt_Aratan_Init();
    gt_Elendil_Init();
    gt_GilGilad_Init();
    gt_Amdir_Init();
    gt_Amroth_Init();
    gt_Oropher_Init();
    gt_DurinIV_Init();
    gt_LordOfErebor_Init();
    gt_GuildmasterOfBlueMountains_Init();
    gt_StewardOfGondor_Init();
    gt_Valandil_Init();
    gt_EC3A4rendil_Init();
    gt_OrophinDeath_Init();
    gt_CirdanDeath_Init();
    gt_TulkasDeath_Init();
    gt_AuleDeath_Init();
    gt_UlmoDeath_Init();
    gt_Manwedeath_Init();
    gt_YavannaDeath_Init();
    gt_Ringmechanic2_Init();
    gt_TurnonFund_Init();
    gt_FundCommand_Init();
    gt_Mineralscheat_Init();
    gt_Gascheat_Init();
    gt_Devunit_Init();
    gt_Passive_Init();
    gt_Disablepassive_Init();
    gt_Normalchat_Init();
    gt_Hardchat_Init();
    gt_Brutalchat_Init();
    gt_Nightmarechat_Init();
    gt_DefenseSelect_Init();
    gt_StartUp_Init();
    gt_Leveling_Init();
    gt_Unitgroupallunits_Init();
    gt_AllNeutral_Init();
    gt_MainPlayerAsssignment_Init();
    gt_PlayerIsZero_Init();
    gt_InitialResources_Init();
    gt_Alliances_Init();
    gt_Soundtrack_Init();
    gt_F12guides_Init();
    gt_Helprequestsoff_Init();
    gt_Factionsetup_Init();
    gt_Timer_Init();
    gt_goodstructures_Init();
    gt_Evilstructures_Init();
    gt_RemovefromGoodleaving_Init();
    gt_Removefromevilleaving_Init();
    gt_DefeatbyleaveGOODWINS_Init();
    gt_DefeatbyleaveEVIlWINS_Init();
    gt_DefeatbystructuresEVILWINS_Init();
    gt_DefeatbystructuresGOODWINS_Init();
    gt_Resourcemanaging_Init();
    gt_EnablePing_Init();
    gt_ReturnGas_Init();
    gt_MasterSpyRespawn_Init();
    gt_EastGondorSpy_Init();
    gt_EastGondorSpyDeath_Init();
    gt_EastGondorSpyRespawn_Init();
    gt_ElvesSpy_Init();
    gt_ElvesSpyDeath_Init();
    gt_ElvesSpyRespawn_Init();
    gt_ArnorSpy_Init();
    gt_ArnorSpyDeath_Init();
    gt_ArnorSpyRespawn_Init();
    gt_WestGondorSpy_Init();
    gt_WestGondorSpyDeath_Init();
    gt_WestGondorSpyRespawn_Init();
    gt_MordorSpy_Init();
    gt_MordorSpyDeath_Init();
    gt_MordorSpyRespawn_Init();
    gt_EvilmenSpy_Init();
    gt_EvilmenSpyDeath_Init();
    gt_EvilmenSpyRespawn_Init();
    gt_MistySpy_Init();
    gt_MistySpyDeath_Init();
    gt_MistySpyRespawn_Init();
    gt_DwarvesSpy_Init();
    gt_DwarvesSpyDeath_Init();
    gt_DwarvesSpyRespawn_Init();
    gt_EasterlingsSpy_Init();
    gt_EasterlingsSpyDeath_Init();
    gt_EasterlingsSpyRespawn_Init();
    gt_RetreatHeroesEastGondor_Init();
    gt_waitteleportEastGondor_Init();
    gt_RetreatHeroesArnor_Init();
    gt_waitteleportArnor_Init();
    gt_RetreatHeroesElves_Init();
    gt_waitteleportElves_Init();
    gt_RetreatHeroesWestGondor_Init();
    gt_waitteleportWestGondor_Init();
    gt_RetreatHeroesDwarves_Init();
    gt_waitteleportDwarves_Init();
    gt_RetreatHeroesMordor_Init();
    gt_waitteleportMordor_Init();
    gt_RetreatHeroesEvilMen_Init();
    gt_waitteleportEvilMen_Init();
    gt_RetreatHeroesMisty_Init();
    gt_waitteleportMisty_Init();
    gt_RetreatHeroesEasterlings_Init();
    gt_waitteleportEasterlings_Init();
    gt_AICanResearchEastGondor_Init();
    gt_AICanResearchElves_Init();
    gt_AICanResearchArnor_Init();
    gt_AICanResearchWestGondor_Init();
    gt_AICanResearchDwarves_Init();
    gt_AICanResearchMordor_Init();
    gt_AICanResearchMistyMountain_Init();
    gt_AICanResearchEasterlings_Init();
    gt_AICanResearchEvilmen_Init();
    gt_AInormaldifficulty_Init();
    gt_AIHarddifficulty_Init();
    gt_UpgradeSpeedMordor_Init();
    gt_UpradeSpeedMistymountains_Init();
    gt_UpgradeSpeedEasterlings_Init();
    gt_UpgradeSpeedEvilMen_Init();
    gt_AIBrutalDifficulty_Init();
    gt_EnableTulkas_Init();
    gt_ActivateTulkas_Init();
    gt_EnableAule_Init();
    gt_ActivateAule_Init();
    gt_EnableUlmo_Init();
    gt_ActivateUlmo_Init();
    gt_EnableManwe_Init();
    gt_ActivateManwe_Init();
    gt_EnableYavanna_Init();
    gt_ActivateYavanna_Init();
    gt_YavannaTimer_Init();
    gt_MorgothSoundtrack_Init();
    gt_ValarSoundtrack_Init();
    gt_Morgothintiilizatation_Init();
    gt_AINightmareDifficulty_Init();
    gt_RetreatHeroesMorgoth_Init();
    gt_waitteleportMorgoth_Init();
    gt_moveTeleportMorgoth_Init();
    gt_RetreatHeroesMordorold_Init();
    gt_waitteleportMordorold_Init();
    gt_AIintialization_Init();
    gt_Aichecker_Init();
    gt_AIenableteleport_Init();
    gt_Attackwaves_Init();
    gt_Turnrecurringdifficultyoff_Init();
    gt_spawnlayout_Init();
    gt_spawnlayout2_Init();
    gt_spawnlayout3_Init();
    gt_MountGram_Init();
    gt_MountGramIncome_Init();
    gt_FrozenPlains_Init();
    gt_FrozenPlainsincome_Init();
    gt_MountGundabad_Init();
    gt_MountGundabadIncome_Init();
    gt_GoblinTown_Init();
    gt_GoblinTownIncome_Init();
    gt_Ettenmoors_Init();
    gt_EttenmoorsIncome_Init();
    gt_WitheredHeath_Init();
    gt_DolAmroth_Init();
    gt_DolAmrothIncome_Init();
    gt_Erech_Init();
    gt_ErechIncome_Init();
    gt_PinnathGaelin_Init();
    gt_PinnathGaelinIncome_Init();
    gt_Lefnui_Init();
    gt_LefnuiIncome_Init();
    gt_Orthanc_Init();
    gt_Anfalas_Init();
    gt_Hoarddale_Init();
    gt_HoarddaleIncome_Init();
    gt_Trollshaws_Init();
    gt_TrollshawsIncome_Init();
    gt_Dunland_Init();
    gt_DunlandIncome_Init();
    gt_Druwaith_Init();
    gt_DruwaithIncome_Init();
    gt_Dunharrow_Init();
    gt_DunharrowIncome_Init();
    gt_SouthEnedwaith_Init();
    gt_SouthEnedwaithIncome_Init();
    gt_NorthEnedwaith_Init();
    gt_NorthEnedwaithIncome_Init();
    gt_Lothorien_Init();
    gt_LothorienIncome_Init();
    gt_GreenwoodHalls_Init();
    gt_GreenwoodHallsIncome_Init();
    gt_Harlond_Init();
    gt_HarlondIncome_Init();
    gt_GardenofTheEntwives_Init();
    gt_Mithlond_Init();
    gt_MithlondIncome_Init();
    gt_Greenwood_Init();
    gt_AmonLanc_Init();
    gt_Erebor_Init();
    gt_EreborIncome_Init();
    gt_EreborIncomemining_Init();
    gt_Khazadum_Init();
    gt_KhazaDumIncome_Init();
    gt_KhazaDumIncomemining_Init();
    gt_BlueMountains_Init();
    gt_BlueMountainsincome_Init();
    gt_BlueMountainsincomemining_Init();
    gt_IronHills_Init();
    gt_IronHillsincome_Init();
    gt_IronHillsIncomemining_Init();
    gt_Dale_Init();
    gt_DaleIncome_Init();
    gt_Rhun_Init();
    gt_RhunIncome_Init();
    gt_Dorwinion_Init();
    gt_DorwinionIncome_Init();
    gt_Rhovanion_Init();
    gt_RhovanionIncome_Init();
    gt_Carnen_Init();
    gt_CarnenIncome_Init();
    gt_Esgaroth_Init();
    gt_EsgarothIncome_Init();
    gt_SouthernEncampment_Init();
    gt_SouthronEncampmentincome_Init();
    gt_BaradDur_Init();
    gt_BaradDurIncome_Init();
    gt_Udun_Init();
    gt_UdunIncome_Init();
    gt_MinasMorgul_Init();
    gt_Nurn_Init();
    gt_NurnIncome_Init();
    gt_CirthNurn_Init();
    gt_CirthNurnIncome_Init();
    gt_Lastbridge_Init();
    gt_LondDaer_Init();
    gt_LondDaerIncome_Init();
    gt_Tharbad_Init();
    gt_TharbadIncome_Init();
    gt_OuterRhuadur_Init();
    gt_Minhiarth_Init();
    gt_AmonSul_Init();
    gt_Fornost_Init();
    gt_FornostIncome_Init();
    gt_Evendim_Init();
    gt_Barrowdowns_Init();
    gt_BarrowDownsIncome_Init();
    gt_Annuminas_Init();
    gt_AnnuminasIncome_Init();
    gt_FreePeopleOfDorwinion_Init();
    gt_Osgiliath_Init();
    gt_OsgiliathIncome_Init();
    gt_Minasanor_Init();
    gt_MinasAnorincome_Init();
    gt_Pelargir_Init();
    gt_PelargirIncome_Init();
    gt_DorEnErnil_Init();
    gt_DorEnErnilIncome_Init();
    gt_Lamedon_Init();
    gt_LamedonIncome_Init();
    gt_ActivateErynVornGood_Init();
    gt_ActivateErynVornEvil_Init();
    gt_ErynVorngood_Init();
    gt_ErynVornEvil_Init();
    gt_ActivePallando_Init();
    gt_ActiveAlatar_Init();
    gt_ActivateBree_Init();
    gt_Bree_Init();
    gt_BreeIncome_Init();
    gt_ActivtateAglarond_Init();
    gt_Suthburg_Init();
    gt_Aglarond_Init();
    gt_AglarondIncome_Init();
    gt_ActivateRefugeOfEdhelion_Init();
    gt_RefugeOfEdhelion_Init();
    gt_ActivateLossarnach_Init();
    gt_Lossarnach_Init();
    gt_ActivateLibnir_Init();
    gt_Libnir_Init();
    gt_LordOfIronHills_Init();
    gt_ActivateRedDwarvesEncampment_Init();
    gt_RedDwarvesEncampment_Init();
    gt_FleeDaleActivate_Init();
    gt_Dale2_Init();
    gt_Dale2Income_Init();
    gt_IncreaseMiningUpgrades_Init();
    gt_Increaseminingupgradesbluemountains_Init();
    gt_IncreaseminingupgradesKhazaDum_Init();
    gt_IncreaseminingupgradesErebor_Init();
    gt_IncreaseminingupgradesIronHills_Init();
    gt_IncreaseminingupgradesBuzradum_Init();
    gt_IncreaseminingupgradesAglarond_Init();
    gt_UnlockDurinTheFifth_Init();
    gt_BuyDurinTheFifth_Init();
    gt_ActivateBuzraDum_Init();
    gt_BuzraDum_Init();
    gt_BuzraeventIncome_Init();
    gt_BuzraIncome_Init();
    gt_HouseOfHealing_Init();
    gt_HouseOfHealingdestroy_Init();
    gt_Genevive_Init();
    gt_MarquilGladden_Init();
    gt_MarquilFreePeople_Init();
    gt_FightForDorwinion_Init();
    gt_SpawnDorwinion_Init();
    gt_ActivateDorwinion_Init();
    gt_GoodDorwinion_Init();
    gt_FortifyRiver_Init();
    gt_ActivateAnorien_Init();
    gt_Anorien_Init();
    gt_GladdenMigrate_Init();
    gt_GladdenCamp_Init();
    gt_ActivateTolfalas_Init();
    gt_Tolfalas_Init();
    gt_Galadriel_Init();
    gt_DwarvenFriendshipIncome_Init();
    gt_Conceal_Init();
    gt_GreenwoodDestroyed_Init();
    gt_Thranduil_Init();
    gt_ActivateFieldOfSilverlode_Init();
    gt_FieldOfSilverlode_Init();
    gt_ActivateRhosgobel_Init();
    gt_Rhosgobel_Init();
    gt_ActivateFieldOfCelebrandt_Init();
    gt_FieldOfCelebrandt_Init();
    gt_Orophin_Init();
    gt_Fimbreithil_Init();
    gt_SpawnForlond_Init();
    gt_ActivateForlond_Init();
    gt_Forlond_Init();
    gt_ColationHasFormed_Init();
    gt_Cirdan_Init();
    gt_Crownsbounty_Init();
    gt_Noblesaccord_Init();
    gt_CallUponTheFief_Init();
    gt_Disperse_Init();
    gt_UnlockDisperse_Init();
    gt_Eldacardisperse_Init();
    gt_FortifiedLastBridge_Init();
    gt_FortifiedLondDaer_Init();
    gt_FortifiedMinhiarth_Init();
    gt_FortifiedOuterRhuadur_Init();
    gt_FortifiedTharbad_Init();
    gt_Centralize_Init();
    gt_UnlockCentralize_Init();
    gt_Eldacarcentralize_Init();
    gt_RetreatedLastBridge_Init();
    gt_RetreatedLondDaer_Init();
    gt_RetreatedMinhiarth_Init();
    gt_RetreatedOuterRhuadur_Init();
    gt_RetreatedTharbad_Init();
    gt_FortifyOuterRhuadur_Init();
    gt_FortifyLastBridge_Init();
    gt_FortifyTharbad_Init();
    gt_FortifyMinhiarth_Init();
    gt_FortifyLondDaer_Init();
    gt_Guerillawarfare_Init();
    gt_PrinceOfDolAmroth_Init();
    gt_ChiefOfDruwaith_Init();
    gt_SpawnDruwaithLaur_Init();
    gt_ActivateDruwaithLaur_Init();
    gt_DruwaithLaur_Init();
    gt_SpawnWestmarch_Init();
    gt_ActivateWestmarch_Init();
    gt_WestMarch_Init();
    gt_SurveilerOfGondor_Init();
    gt_ActivateBlackVale_Init();
    gt_BlackVale_Init();
    gt_ActivateValandilsinsanity_Init();
    gt_ValandilIncomeErech_Init();
    gt_ValandilIncomeDolamroth_Init();
    gt_ValandilIncomePinnathGaelin_Init();
    gt_ActivateLitash_Init();
    gt_Litash_Init();
    gt_SpawnEvilRhuadur_Init();
    gt_ActivateEvilRhuadur_Init();
    gt_Evilrhuadur_Init();
    gt_SpawnMirkwood_Init();
    gt_ActivateMirkwood_Init();
    gt_Mirkwood_Init();
    gt_MirkwoodDestroyed_Init();
    gt_ActivateNorthernWastes_Init();
    gt_NorthernWastesWest_Init();
    gt_NorthernWastesEast_Init();
    gt_KhorakhilEmpower_Init();
    gt_Horamuth_Init();
    gt_LieutenantOfHoarddale_Init();
    gt_SpawnEvilLefnui_Init();
    gt_ActivateEvilLefnui_Init();
    gt_EvilLefnui_Init();
    gt_SpawnEvilOrthanc_Init();
    gt_ActivateEvilOrthanc_Init();
    gt_EvilOrthanc_Init();
    gt_ActivateNanLaeglin_Init();
    gt_NanLaeglin_Init();
    gt_SpawnEvilMinhiarth_Init();
    gt_ActivateEvilMinhiarth_Init();
    gt_EvilMinhiarth_Init();
    gt_SerantsOfMordorActivate_Init();
    gt_MouthOfSauronSpawning_Init();
    gt_ActivateShelob_Init();
    gt_SpawnBurnTheGardens_Init();
    gt_BurnTheGardens_Init();
    gt_EstablishAngmar_Init();
    gt_ActivateCarnDum_Init();
    gt_CarnDum_Init();
    gt_EmpowerSauron_Init();
    gt_EmpowerWitchKing_Init();
    gt_Uvartha_Init();
    gt_Amonlancdestroyed_Init();
    gt_Amonlanccorruption_Init();
    gt_Udundestroyed_Init();
    gt_ActivateDolGuldur_Init();
    gt_DolGuldur_Init();
    gt_Udundestroyed2_Init();
    gt_Dolguldurdestroyed_Init();
    gt_WarlordOfTheSouthrons_Init();
    gt_CallTheSouth_Init();
    gt_CorsairLord_Init();
    gt_EnableCorsairPelargir_Init();
    gt_ActivateCorsairPelargirSpawn_Init();
    gt_ActivateCorsairPelargirship_Init();
    gt_CorsairPelargir_Init();
    gt_EnableCorsairLefnui_Init();
    gt_ActivateCorsairLefnuiSpawn_Init();
    gt_ActivateCorsairLefnuiship_Init();
    gt_CorsairLefnui_Init();
    gt_Morgomir_Init();
    gt_ShatterMorgomir_Init();
    gt_RallyTheEasterlings_Init();
    gt_Rallyeasterlings_Init();
    gt_ActivateCorsairinvasion_Init();
    gt_SpawnEastBight_Init();
    gt_ActivateEastBight_Init();
    gt_EastBight_Init();
    gt_SpawnAnduinCamp_Init();
    gt_ActivateAnduinCamp_Init();
    gt_AnduinCamp_Init();
    gt_CreateSmaugBeacon_Init();
    gt_ActivateSiegeOfErebor_Init();
    gt_SiegeOfErebor_Init();
    gt_RemoveEreborinvulernability_Init();
    gt_Bolg_Init();
    gt_Broggau_Init();
    gt_Scorba_Init();
    gt_ActivateScatha_Init();
    gt_Scatha_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
